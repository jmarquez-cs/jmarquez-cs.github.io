var e,t,s,i,r,n,o,a,l,c,h,d,u,g,p,f,m,w,y,v,b,k,E,S,I,P,R,x,A,C=Object.defineProperty,T=e=>{throw TypeError(e)},B=(e,t,s)=>((e,t,s)=>t in e?C(e,t,{enumerable:!0,configurable:!0,writable:!0,value:s}):e[t]=s)(e,"symbol"!=typeof t?t+"":t,s),N=(e,t,s)=>t.has(e)||T("Cannot "+s),_=(e,t,s)=>(N(e,t,"read from private field"),s?s.call(e):t.get(e)),D=(e,t,s)=>t.has(e)?T("Cannot add the same private member more than once"):t instanceof WeakSet?t.add(e):t.set(e,s),M=(e,t,s)=>(N(e,t,"access private method"),s),L=(e,t,s,i)=>({set _(i){((e,t,s,i)=>{N(e,t,"write to private field"),i?i.call(e,s):t.set(e,s)})(e,t,i,s)},get _(){return _(e,t,i)}});import{d as O,P as U,l as $,p as V}from"./index.DnnBcP15.js";import{K as H,d as F}from"./key.PHAHNoTJ.js";import{c as q,N as W,a as z,p as G,d as j,b as K,t as Q,e as J,f as Y,I as Z,i as X,r as ee,g as te,h as se,j as ie,P as re,A as ne,k as oe,R as ae,u as le,l as ce,M as he,m as de}from"./index.Cx9vedW-.js";import{C as ue,e as ge,c as pe,a as fe,f as me,F as we,D as ye,p as ve,G as be,s as ke,n as Ee,g as Se,m as Ie,h as Pe,i as Re,k as xe,u as Ae,x as Ce,w as Te,U as Be,H as Ne,l as _e,d as De,j as Me,b as Le,E as Oe,I as Ue}from"./message.Ve-2rN-7.js";import{Y as $e,k as Ve,n as He,d as Fe,s as qe,a as We,T as ze,M as Ge,r as je,t as Ke,m as Qe,a3 as Je,H as Ye,L as Ze,I as Xe,J as et,G as tt,a4 as st,a5 as it,a6 as rt,a7 as nt,h as ot,N as at,i as lt,B as ct,g as ht,a8 as dt,K as ut,e as gt,a0 as pt}from"./index.8G8SSLdM.js";import{e as ft,d as mt}from"./decode.9RDMYjMh.js";import{m as wt,c as yt,b as vt,p as bt,r as kt}from"./scalable-cuckoo-filter.BKNYiDuL.js";import{N as Et,t as St,g as It,I as Pt,v as Rt,w as xt,x as At,y as Ct,z as Tt,B as Bt,E as Nt,F as _t,G as Dt,H as Mt,J as Lt,K as Ot,M as Ut,O as $t,P as Vt,A as Ht,k as Ft,T as qt,U as Wt,i as zt,b as Gt,c as jt,Q as Kt,R as Qt,S as Jt,V as Yt,W as Zt,s as Xt,X as es,Y as ts,Z as ss,q as is,a as rs,f as ns,d as os,h as as,_ as ls,p as cs,$ as hs}from"./index.BofkdKOa.js";import{k as ds,l as us,r as gs,d as ps,i as fs,j as ms,c as ws,h as ys,m as vs,f as bs}from"./index.S32ayjz-.js";import{f as ks,m as Es,p as Ss,a as Is}from"./index.CzrOjCaM.js";import{k as Ps,p as Rs,j as xs}from"./index.D4_5qI86.js";import{p as As}from"./index.BGGl-gag.js";import{noise as Cs}from"@chainsafe/libp2p-noise";import{g as Ts,u as Bs,b as Ns,d as _s,m as Ds,L as Ms,e as Ls}from"./selector.BiFyX8Ct.js";import{bootstrap as Os}from"@libp2p/bootstrap";import{identifyPush as Us,identify as $s}from"@libp2p/identify";import{g as Vs}from"./mermaid-core.CmyEpniE.js";import{webRTC as Hs,webRTCDirect as Fs}from"@libp2p/webrtc";import{webSockets as qs}from"@libp2p/websockets";function Ws({enumerable:e=!0,configurable:t=!1}={}){return{enumerable:e,configurable:t,writable:!1}}function*zs(e,t){if(null!=t&&"object"==typeof t)if(Array.isArray(t))for(const[s,i]of t.entries()){const t=[...e,s],r=ue.asCID(i);null!=r?yield[t.join("/"),r]:"object"==typeof i&&(yield*Gs(i,t))}else{const s=ue.asCID(t);null!=s?yield[e.join("/"),s]:yield*Gs(t,e)}}function*Gs(e,t){if(null==e||e instanceof Uint8Array)return;const s=ue.asCID(e);null!=s&&(yield[t.join("/"),s]);for(const[i,r]of Object.entries(e)){const e=[...t,i];yield*zs(e,r)}}function*js(e,t){if(Array.isArray(t))for(const[s,i]of t.entries()){const t=[...e,s];yield t.join("/"),"object"==typeof i&&null==ue.asCID(i)&&(yield*Ks(i,t))}else yield*Ks(t,e)}function*Ks(e,t){if(null!=e&&"object"==typeof e)for(const[s,i]of Object.entries(e)){const e=[...t,s];yield e.join("/"),null==i||i instanceof Uint8Array||"object"!=typeof i||null!=ue.asCID(i)||(yield*js(e,i))}}let Qs=class{constructor({cid:e,bytes:t,value:s}){if(B(this,"cid"),B(this,"bytes"),B(this,"value"),B(this,"asBlock"),null==e||null==t||void 0===s)throw new Error("Missing required argument");this.cid=e,this.bytes=t,this.value=s,this.asBlock=this,Object.defineProperties(this,{cid:Ws(),bytes:Ws(),value:Ws(),asBlock:Ws()})}links(){return Gs(this.value,[])}tree(){return Ks(this.value,[])}get(e="/"){return function(e,t){let s=e;for(const[i,r]of t.entries()){if(s=s[r],null==s)throw new Error(`Object has no property at ${t.slice(0,i+1).map(e=>`[${JSON.stringify(e)}]`).join("")}`);const e=ue.asCID(s);if(null!=e)return{value:e,remaining:t.slice(i+1).join("/")}}return{value:s}}(this.value,e.split("/").filter(Boolean))}};const Js="/pin/",Ys="/pinned-block/",Zs=pe;function Xs(e){return 0===e.version&&(e=e.toV1()),new H(`${Js}${e.toString(Zs)}`)}class ei{constructor(t,s,i){D(this,e),B(this,"datastore"),B(this,"blockstore"),B(this,"getCodec"),this.datastore=t,this.blockstore=s,this.getCodec=i}async*add(i,r={}){const n=Xs(i);if(await this.datastore.has(n))throw new Error("Already pinned");const o=Math.round(r.depth??1/0);if(o<0)throw new Error("Depth must be greater than or equal to 0");const a=new $e({concurrency:1});for await(const c of M(this,e,t).call(this,i,a,{...r,depth:o}))await M(this,e,s).call(this,c,e=>null==e.pinnedBy.find(e=>ge(e,i.bytes))&&(e.pinCount++,e.pinnedBy.push(i.bytes),!0),r),yield c;const l={depth:o,metadata:r.metadata??{}};await this.datastore.put(n,ft(l),r)}async*rm(i,r={}){const n=Xs(i),o=await this.datastore.get(n,r),a=mt(o);await this.datastore.delete(n,r);const l=new $e({concurrency:1});for await(const c of M(this,e,t).call(this,i,l,{...r,depth:a.depth}))await M(this,e,s).call(this,c,e=>(e.pinCount--,e.pinnedBy=e.pinnedBy.filter(e=>ge(e,i.bytes)),!0),{...r,depth:a.depth}),yield c}async*ls(e={}){for await(const{key:t,value:s}of this.datastore.query({prefix:Js+(null!=e.cid?`${e.cid.toString(pe)}`:"")},e)){const e=ue.parse(t.toString().substring(5),pe),i=mt(s);yield{cid:e,...i}}}async isPinned(e,t={}){const s=new H(`${Ys}${Zs.encode(e.multihash.bytes)}`);return this.datastore.has(s,t)}async get(e,t){const s=Xs(e),i=await this.datastore.get(s,t);return mt(i)}async setMetadata(e,t,s){const i=Xs(e),r=await this.datastore.get(i,s),n=mt(r);n.metadata=t??{},await this.datastore.put(i,ft(n),s)}}e=new WeakSet,t=async function*(s,i,r){if(-1===r.depth)return;const n=await this.getCodec(s.code),o=function({bytes:e,cid:t,value:s,codec:i}){const r=void 0!==s?s:null==i?void 0:i.decode(e);if(void 0===r)throw new Error('Missing required argument, must either provide "value" or "codec"');return new Qs({cid:t,bytes:e,value:r})}({bytes:await this.blockstore.get(s,r),cid:s,codec:n});yield s;for(const[,a]of o.links())yield*await i.add(async()=>M(this,e,t).call(this,a,i,{...r,depth:r.depth-1}))},s=async function(e,t,s){var i;const r=new H(`${Ys}${Zs.encode(e.multihash.bytes)}`);let n={pinCount:0,pinnedBy:[]};try{n=mt(await this.datastore.get(r,s))}catch(o){if("NotFoundError"!==o.name)throw o}t(n)&&(0===n.pinCount&&await this.datastore.has(r)?await this.datastore.delete(r):(await this.datastore.put(r,ft(n),s),null==(i=s.onProgress)||i.call(s,new fe("helia:pin:add",e))))};const ti=1,si=5;class ii extends Error{constructor(e="Insufficient providers found"){super(e),this.name="InsufficientProvidersError"}}B(ii,"name","InsufficientProvidersError");class ri extends Error{constructor(e="No routers available"){super(e),this.name="NoRoutersAvailableError"}}B(ri,"name","NoRoutersAvailableError");class ni extends Error{constructor(e="Unknown hash algorithm"){super(e),this.name="UnknownHashAlgorithmError"}}B(ni,"name","UnknownHashAlgorithmError");class oi extends Error{constructor(e="Unknown codec"){super(e),this.name="UnknownCodecError"}}B(oi,"name","UnknownCodecError");class ai{constructor(e,t){var s,i,r,n,o,a,l;B(this,"log"),B(this,"routers"),B(this,"providerLookupConcurrency"),this.log=e.logger.forComponent("helia:routing"),this.routers=t.routers??[],this.providerLookupConcurrency=t.providerLookupConcurrency??5,this.findProviders=(null==(s=e.metrics)?void 0:s.traceFunction("helia.routing.findProviders",this.findProviders.bind(this),{optionsIndex:1}))??this.findProviders,this.provide=(null==(i=e.metrics)?void 0:i.traceFunction("helia.routing.provide",this.provide.bind(this),{optionsIndex:1}))??this.provide,this.cancelReprovide=(null==(r=e.metrics)?void 0:r.traceFunction("helia.routing.cancelReprovide",this.cancelReprovide.bind(this),{optionsIndex:1}))??this.cancelReprovide,this.put=(null==(n=e.metrics)?void 0:n.traceFunction("helia.routing.put",this.put.bind(this),{optionsIndex:2}))??this.put,this.get=(null==(o=e.metrics)?void 0:o.traceFunction("helia.routing.get",this.get.bind(this),{optionsIndex:1}))??this.get,this.findPeer=(null==(a=e.metrics)?void 0:a.traceFunction("helia.routing.findPeer",this.findPeer.bind(this),{optionsIndex:1}))??this.findPeer,this.getClosestPeers=(null==(l=e.metrics)?void 0:l.traceFunction("helia.routing.getClosestPeers",this.getClosestPeers.bind(this),{optionsIndex:1}))??this.getClosestPeers}async start(){await Ve(...this.routers)}async stop(){await He(...this.routers)}async*findProviders(e,t={}){if(0===this.routers.length)throw new ri("No content routers available");const s=new Fe({concurrency:this.providerLookupConcurrency});s.addEventListener("error",()=>{});for await(const i of wt(s.toGenerator(),...li(this.routers,"findProviders").map(s=>s.findProviders(e,t))))if(null!=i){if(0===i.multiaddrs.length){if(null!=s.find(i.id))continue;s.add(async()=>{try{const e=await this.findPeer(i.id,t);return 0===e.multiaddrs.length?null:e}catch(e){return this.log.error("could not load multiaddrs for peer %p",i.id,e),null}},{peerId:i.id,signal:t.signal}).catch(e=>{this.log.error("could not load multiaddrs for peer %p",i.id,e)})}yield i}}async provide(e,t={}){if(0===this.routers.length)throw new ri("No content routers available");await Promise.all(li(this.routers,"provide").map(async s=>{await s.provide(e,t)}))}async cancelReprovide(e,t={}){await Promise.all(li(this.routers,"cancelReprovide").map(async s=>{await s.cancelReprovide(e,t)}))}async put(e,t,s){await Promise.all(li(this.routers,"put").map(async i=>{await i.put(e,t,s)}))}async get(e,t){return Promise.any(li(this.routers,"get").map(async s=>s.get(e,t)))}async findPeer(e,t){if(0===this.routers.length)throw new ri("No peer routers available");const s=this,i=wt(...li(this.routers,"findPeer").map(i=>async function*(){try{yield await i.findPeer(e,t)}catch(r){s.log.error(r)}}()));for await(const r of i)if(null!=r)return r;throw new Et("Could not find peer in routing")}async*getClosestPeers(e,t={}){if(0===this.routers.length)throw new ri("No peer routers available");for await(const s of wt(...li(this.routers,"getClosestPeers").map(s=>s.getClosestPeers(e,t))))null!=s&&(yield s)}}function li(e,t){return e.filter(e=>null!=e[t])}class ci{constructor(e,t,s={}){B(this,"lock"),B(this,"child"),B(this,"pins"),B(this,"started"),this.child=e,this.pins=t,this.lock=q({singleProcess:s.holdGcLock}),this.started=!1}isStarted(){return this.started}async start(){await Ve(this.child),this.started=!0}async stop(){await He(this.child),this.started=!1}unwrap(){return this.child}async put(e,t,s={}){var i;null==(i=null==s?void 0:s.signal)||i.throwIfAborted();const r=await this.lock.readLock();try{return await this.child.put(e,t,s)}finally{r()}}async*putMany(e,t={}){var s;null==(s=null==t?void 0:t.signal)||s.throwIfAborted();const i=await this.lock.readLock();try{yield*this.child.putMany(e,t)}finally{i()}}async get(e,t={}){var s;null==(s=null==t?void 0:t.signal)||s.throwIfAborted();const i=await this.lock.readLock();try{return await this.child.get(e,t)}finally{i()}}async*getMany(e,t={}){var s;null==(s=null==t?void 0:t.signal)||s.throwIfAborted();const i=await this.lock.readLock();try{yield*this.child.getMany(e,t)}finally{i()}}async delete(e,t={}){var s;null==(s=null==t?void 0:t.signal)||s.throwIfAborted();const i=await this.lock.writeLock();try{if(await this.pins.isPinned(e))throw new Error("CID was pinned");await this.child.delete(e,t)}finally{i()}}async*deleteMany(e,t={}){var s;null==(s=null==t?void 0:t.signal)||s.throwIfAborted();const i=await this.lock.writeLock();try{const s=this;yield*this.child.deleteMany(async function*(){for await(const t of e){if(await s.pins.isPinned(t))throw new Error("CID was pinned");yield t}}(),t)}finally{i()}}async has(e,t={}){var s;null==(s=null==t?void 0:t.signal)||s.throwIfAborted();const i=await this.lock.readLock();try{return await this.child.has(e,t)}finally{i()}}async*getAll(e={}){var t;null==(t=null==e?void 0:e.signal)||t.throwIfAborted();const s=await this.lock.readLock();try{yield*this.child.getAll(e)}finally{s()}}createSession(e,t){var s;return null==(s=null==t?void 0:t.signal)||s.throwIfAborted(),this.child.createSession(e,t)}}const hi=new H("/version");function di(e){return null!=(null==e?void 0:e.then)}class ui{has(e,t){return Promise.reject(new Error(".has is not implemented"))}put(e,t,s){return Promise.reject(new Error(".put is not implemented"))}async*putMany(e,t){for await(const{cid:s,block:i}of e)await this.put(s,i,t),yield s}get(e,t){return Promise.reject(new Error(".get is not implemented"))}async*getMany(e,t){for await(const s of e)yield{cid:s,block:await this.get(s,t)}}delete(e,t){return Promise.reject(new Error(".delete is not implemented"))}async*deleteMany(e,t){for await(const s of e)await this.delete(s,t),yield s}async*getAll(e){throw new Error(".getAll is not implemented")}}class gi extends ui{constructor(e){super(),B(this,"child"),this.child=e}put(e,t,s){var i,r;return 0===e.multihash.code?(null==(i=null==s?void 0:s.signal)||i.throwIfAborted(),e):null==this.child?(null==(r=null==s?void 0:s.signal)||r.throwIfAborted(),e):this.child.put(e,t,s)}get(e,t){var s,i;if(0===e.multihash.code)return null==(s=null==t?void 0:t.signal)||s.throwIfAborted(),e.multihash.digest;if(null==this.child)throw null==(i=null==t?void 0:t.signal)||i.throwIfAborted(),new W;return this.child.get(e,t)}has(e,t){var s,i;return 0===e.multihash.code?(null==(s=null==t?void 0:t.signal)||s.throwIfAborted(),!0):null==this.child?(null==(i=null==t?void 0:t.signal)||i.throwIfAborted(),!1):this.child.has(e,t)}delete(e,t){var s;if(0!==e.code)return null!=this.child?this.child.delete(e,t):void 0;null==(s=null==t?void 0:t.signal)||s.throwIfAborted()}getAll(e){var t;return null!=this.child?this.child.getAll(e):(null==(t=null==e?void 0:e.signal)||t.throwIfAborted(),[])}}class pi{constructor(e){B(this,"child"),B(this,"getHasher"),B(this,"log"),B(this,"logger"),B(this,"components"),this.log=e.logger.forComponent("helia:networked-storage"),this.logger=e.logger,this.components=e,this.child=new gi(e.blockstore),this.getHasher=e.getHasher}async put(e,t,s={}){var i,r,n;return await this.child.has(e,s)?(null==(i=s.onProgress)||i.call(s,new fe("blocks:put:duplicate",e)),e):(null==(r=s.onProgress)||r.call(s,new fe("blocks:put:providers:notify",e)),await Promise.all(this.components.blockBrokers.map(async i=>{var r;return null==(r=i.announce)?void 0:r.call(i,e,t,s)})),null==(n=s.onProgress)||n.call(s,new fe("blocks:put:blockstore:put",e)),this.child.put(e,t,s))}async*putMany(e,t={}){var s;const i=ks(e,async({cid:e})=>{var s;const i=await this.child.has(e,t);return i&&(null==(s=t.onProgress)||s.call(t,new fe("blocks:put-many:duplicate",e))),!i}),r=Ps(i,async({cid:e,block:s})=>{var i;null==(i=t.onProgress)||i.call(t,new fe("blocks:put-many:providers:notify",e)),await Promise.all(this.components.blockBrokers.map(async i=>{var r;return null==(r=i.announce)?void 0:r.call(i,e,s,t)}))});null==(s=t.onProgress)||s.call(t,new fe("blocks:put-many:blockstore:put-many")),yield*this.child.putMany(r,t)}async get(e,t={}){var s,i,r,n;if(!0!==t.offline&&!(await this.child.has(e,t))){const n=await this.getHasher(e.multihash.code);null==(s=t.onProgress)||s.call(t,new fe("blocks:get:providers:get",e));const o=await vi(e,this.components.blockBrokers,n,{...t,log:this.log});return null==(i=t.onProgress)||i.call(t,new fe("blocks:get:blockstore:put",e)),await this.child.put(e,o,t),null==(r=t.onProgress)||r.call(t,new fe("blocks:get:providers:notify",e)),await Promise.all(this.components.blockBrokers.map(async s=>{var i;return null==(i=s.announce)?void 0:i.call(s,e,o,t)})),o}return null==(n=t.onProgress)||n.call(t,new fe("blocks:get:blockstore:get",e)),this.child.get(e,t)}async*getMany(e,t={}){var s;null==(s=t.onProgress)||s.call(t,new fe("blocks:get-many:blockstore:get-many")),yield*this.child.getMany(Ps(e,async e=>{var s,i,r;if(!0!==t.offline&&!(await this.child.has(e,t))){const n=await this.getHasher(e.multihash.code);null==(s=t.onProgress)||s.call(t,new fe("blocks:get-many:providers:get",e));const o=await vi(e,this.components.blockBrokers,n,{...t,log:this.log});null==(i=t.onProgress)||i.call(t,new fe("blocks:get-many:blockstore:put",e)),await this.child.put(e,o,t),null==(r=t.onProgress)||r.call(t,new fe("blocks:get-many:providers:notify",e)),await Promise.all(this.components.blockBrokers.map(async s=>{var i;return null==(i=s.announce)?void 0:i.call(s,e,o,t)}))}}))}async delete(e,t={}){var s;null==(s=t.onProgress)||s.call(t,new fe("blocks:delete:blockstore:delete",e)),await this.child.delete(e,t)}async*deleteMany(e,t={}){var s;null==(s=t.onProgress)||s.call(t,new fe("blocks:delete-many:blockstore:delete-many")),yield*this.child.deleteMany(async function*(){for await(const t of e)yield t}(),t)}async has(e,t={}){return this.child.has(e,t)}async*getAll(e={}){var t;null==(t=e.onProgress)||t.call(e,new fe("blocks:get-all:blockstore:get-many")),yield*this.child.getAll(e)}}class fi extends pi{constructor(e){super(e),B(this,"started"),this.started=!1}isStarted(){return this.started}async start(){await Ve(this.child,...this.components.blockBrokers),this.started=!0}async stop(){await He(this.child,...this.components.blockBrokers),this.started=!1}unwrap(){return this.child}createSession(e,t){const s=this.components.blockBrokers.map(e=>null==e.createSession?e:e.createSession(t));return new mi({blockstore:this.child,blockBrokers:s,getHasher:this.getHasher,logger:this.logger},{root:e})}}class mi extends pi{constructor(e,t){super(e),B(this,"closeController"),this.closeController=new AbortController,qe(1/0,this.closeController.signal),this.log=e.logger.forComponent(`helia:session-storage:${t.root}`)}close(){this.closeController.abort()}async put(e,t,s={}){const i=We([this.closeController.signal,s.signal]);try{return await super.put(e,t,{...s,signal:i})}finally{i.clear()}}async*putMany(e,t={}){const s=We([this.closeController.signal,t.signal]);try{yield*super.putMany(e,{...t,signal:s})}finally{s.clear()}}async get(e,t={}){const s=We([this.closeController.signal,t.signal]);try{return await super.get(e,{...t,signal:s})}finally{s.clear()}}async*getMany(e,t={}){const s=We([this.closeController.signal,t.signal]);try{yield*super.getMany(e,{...t,signal:s})}finally{s.clear()}}async delete(e,t={}){const s=We([this.closeController.signal,t.signal]);try{await super.delete(e,{...t,signal:s})}finally{s.clear()}}async*deleteMany(e,t={}){const s=We([this.closeController.signal,t.signal]);try{yield*super.deleteMany(e,{...t,signal:s})}finally{s.clear()}}async has(e,t={}){const s=We([this.closeController.signal,t.signal]);try{return await super.has(e,{...t,signal:s})}finally{s.clear()}}async*getAll(e={}){const t=We([this.closeController.signal,e.signal]);try{yield*super.getAll({...e,signal:t})}finally{t.clear()}}}function wi(e){return"function"==typeof e.retrieve}const yi=(e,t)=>{if(null==t)throw new It(`No hasher configured for multihash code 0x${e.multihash.code.toString(16)}, please configure one. You can look up which hash this is at https://github.com/multiformats/multicodec/blob/master/table.csv`);return async s=>{let i;const r=t.digest(s);if(i=di(r)?await r:r,!ge(i.digest,e.multihash.digest))throw new Pt("Hash of downloaded block did not match multihash from passed CID")}};async function vi(e,t,s,i){const r=yi(e,s),n=new AbortController,o=We([n.signal,i.signal]);qe(1/0,n.signal);const a=[];for(const l of t)wi(l)&&a.push(l);try{return await Promise.any(a.map(async t=>{try{let s=!1;const n=await t.retrieve(e,{...i,signal:o,validateFn:async e=>{await r(e),s=!0}});return s||await r(n),n}catch(s){throw i.log.error("could not retrieve verified block for %c",e,s),s}}))}finally{n.abort(),o.clear()}}function bi(e,t,s,i){xt(e);const r=At({dkLen:32,asyncTick:10},i),{c:n,dkLen:o,asyncTick:a}=r;if(Ct(n),Ct(o),Ct(a),n<1)throw new Error("iterations (c) should be >= 1");const l=Tt(t),c=Tt(s),h=new Uint8Array(o),d=Bt.create(e,l),u=d._cloneInto().update(c);return{c:n,dkLen:o,asyncTick:a,DK:h,PRF:d,PRFSalt:u}}function ki(e,t,s,i,r){return e.destroy(),t.destroy(),i&&i.destroy(),Nt(r),s}async function Ei(e,t,s,i){const{c:r,dkLen:n,asyncTick:o,DK:a,PRF:l,PRFSalt:c}=bi(e,t,s,i);let h;const d=new Uint8Array(4),u=Rt(d),g=new Uint8Array(l.outputLen);for(let p=1,f=0;f<n;p++,f+=l.outputLen){const e=a.subarray(f,f+l.outputLen);u.setInt32(0,p,!1),(h=c._cloneInto(h)).update(d).digestInto(g),e.set(g.subarray(0,e.length)),await _t(r-1,o,()=>{l._cloneInto(h).update(g).digestInto(g);for(let t=0;t<e.length;t++)e[t]^=g[t]})}return ki(l,c,a,h,g)}const Si=Uint32Array.from([1732584193,4023233417,2562383102,271733878,3285377520]),Ii=new Uint32Array(80);class Pi extends Mt{constructor(){super(64,20,8,!1),this.A=0|Si[0],this.B=0|Si[1],this.C=0|Si[2],this.D=0|Si[3],this.E=0|Si[4]}get(){const{A:e,B:t,C:s,D:i,E:r}=this;return[e,t,s,i,r]}set(e,t,s,i,r){this.A=0|e,this.B=0|t,this.C=0|s,this.D=0|i,this.E=0|r}process(e,t){for(let a=0;a<16;a++,t+=4)Ii[a]=e.getUint32(t,!1);for(let a=16;a<80;a++)Ii[a]=Lt(Ii[a-3]^Ii[a-8]^Ii[a-14]^Ii[a-16],1);let{A:s,B:i,C:r,D:n,E:o}=this;for(let a=0;a<80;a++){let e,t;a<20?(e=Ot(i,r,n),t=1518500249):a<40?(e=i^r^n,t=1859775393):a<60?(e=Ut(i,r,n),t=2400959708):(e=i^r^n,t=3395469782);const l=Lt(s,5)+e+o+t+Ii[a]|0;o=n,n=r,r=Lt(i,30),i=s,s=l}s=s+this.A|0,i=i+this.B|0,r=r+this.C|0,n=n+this.D|0,o=o+this.E|0,this.set(s,i,r,n,o)}roundClean(){Nt(Ii)}destroy(){this.set(0,0,0,0,0),Nt(this.buffer)}}const Ri=$t,xi={sha1:Dt(()=>new Pi),"sha2-256":Vt,"sha2-512":Ri};function Ai(e,t,s,i,r){if("sha1"!==r&&"sha2-256"!==r&&"sha2-512"!==r){const e=Object.keys(xi).join(" / ");throw new It(`Hash '${r}' is unknown or not supported. Must be ${e}`)}const n=function(e,t,s,i){const{c:r,dkLen:n,DK:o,PRF:a,PRFSalt:l}=bi(e,t,s,i);let c;const h=new Uint8Array(4),d=Rt(h),u=new Uint8Array(a.outputLen);for(let g=1,p=0;p<n;g++,p+=a.outputLen){const e=o.subarray(p,p+a.outputLen);d.setInt32(0,g,!1),(c=l._cloneInto(c)).update(h).digestInto(u),e.set(u.subarray(0,e.length));for(let t=1;t<r;t++){a._cloneInto(c).update(u).digestInto(u);for(let t=0;t<e.length;t++)e[t]^=u[t]}}return ki(a,l,o,c,u)}(xi[r],e,t,{c:s,dkLen:i});return Ee.encode(n).substring(1)}class Ci extends ze{constructor(e,t){super(),B(this,"initialPeerSearchComplete"),B(this,"requests"),B(this,"name"),B(this,"log"),B(this,"logger"),B(this,"minProviders"),B(this,"maxProviders"),B(this,"providers"),B(this,"evictionFilter"),B(this,"initialProviders"),this.name=t.name,this.logger=e.logger,this.log=e.logger.forComponent(this.name),this.requests=new Map,this.minProviders=t.minProviders??1,this.maxProviders=t.maxProviders??5,this.providers=[],this.evictionFilter=yt(this.maxProviders),this.initialProviders=t.providers??[]}async retrieve(e,t={}){var s,i;const r=Ee.encode(e.multihash.bytes),n=this.requests.get(r);if(null!=n)return this.log("join existing request for %c",e),n;const o=vt();if(this.requests.set(r,o.promise),0===this.providers.length){let s=!1;null==this.initialPeerSearchComplete&&(s=!0,this.log=this.logger.forComponent(`${this.name}:${e}`),this.initialPeerSearchComplete=this.findProviders(e,this.minProviders,t)),await this.initialPeerSearchComplete,s&&this.log("found initial session peers for %c",e)}let a=!1;const l=new $e({concurrency:this.maxProviders});l.addEventListener("error",()=>{}),l.addEventListener("failure",e=>{this.log.error("error querying provider %o, evicting from session",e.detail.job.options.provider,e.detail.error),this.evict(e.detail.job.options.provider)}),l.addEventListener("success",e=>{a=!0,o.resolve(e.detail.result)}),l.addEventListener("idle",()=>{var s;a||!0===(null==(s=t.signal)?void 0:s.aborted)?this.log.trace("session idle, found block"):Promise.resolve().then(async()=>{this.log("no session peers had block for for %c, finding new providers",e);for(let e=0;e<this.minProviders&&0!==this.providers.length;e++){const e=this.providers[Math.floor(Math.random()*this.providers.length)];this.evict(e)}await this.findProviders(e,this.minProviders,t),this.log("found new providers re-retrieving %c",e),this.requests.delete(r),o.resolve(await this.retrieve(e,t))}).catch(t=>{this.log.error("could not find new providers for %c",e,t),o.reject(t)})});const c=s=>{l.add(async()=>this.queryProvider(e,s.detail,t),{provider:s.detail}).catch(s=>{var i;!0!==(null==(i=t.signal)?void 0:i.aborted)&&this.log.error("error retrieving session block for %c",e,s)})};this.addEventListener("provider",c),Promise.all([...this.providers].map(async s=>l.add(async()=>this.queryProvider(e,s,t),{provider:s}))).catch(s=>{var i;!0!==(null==(i=t.signal)?void 0:i.aborted)&&this.log.error("error retrieving session block for %c",e,s)});const h=()=>{var e;o.reject(new Ht((null==(e=t.signal)?void 0:e.reason)??"Session aborted")),l.abort()};null==(s=t.signal)||s.addEventListener("abort",h);try{return await o.promise}finally{this.removeEventListener("provider",c),null==(i=t.signal)||i.removeEventListener("abort",h),l.clear(),this.requests.delete(r)}}evict(e){this.evictionFilter.add(this.toEvictionKey(e));const t=this.providers.findIndex(t=>this.equals(t,e));-1!==t&&this.providers.splice(t,1)}isEvicted(e){return this.evictionFilter.has(this.toEvictionKey(e))}hasProvider(e){return null!=this.providers.find(t=>this.equals(t,e))||!!this.isEvicted(e)}async findProviders(e,t,s){const i=vt();let r=0;return Promise.resolve().then(async()=>{var n,o;if(this.log("finding %d-%d new provider(s) for %c",t,this.maxProviders,e),this.initialProviders.length>0)for(;r<t&&this.initialProviders.length>0;){const e=this.initialProviders.pop();if(null==e)break;const o=await this.convertToProvider(e,s);if(!0===(null==(n=s.signal)?void 0:n.aborted))break;if(null!=o&&(!this.hasProvider(o)&&(this.log("found %d/%d new providers",r,this.maxProviders),this.providers.push(o),this.safeDispatchEvent("provider",{detail:o}),r++,r===t&&(this.log("session is ready"),i.resolve()),this.providers.length===this.maxProviders))){this.log("found max session peers",r);break}}if(r<this.maxProviders)for await(const a of this.findNewProviders(e,s)){if(r===this.maxProviders||!0===(null==(o=s.signal)?void 0:o.aborted))break;if(!this.hasProvider(a)&&(this.log("found %d/%d new providers",r,this.maxProviders),this.providers.push(a),this.safeDispatchEvent("provider",{detail:a}),r++,r===t&&(this.log("session is ready"),i.resolve()),this.providers.length===this.maxProviders)){this.log("found max session peers",r);break}}if(this.log("found %d/%d new session peers",r,this.maxProviders),r<t)throw new ii(`Found ${r} of ${t} ${this.name} providers for ${e}`)}).catch(t=>{this.log.error("error searching routing for potential session peers for %c",e,t.errors??t),i.reject(t)}),i.promise}}class Ti{constructor(e){B(this,"libp2p"),B(this,"blockstore"),B(this,"datastore"),B(this,"pins"),B(this,"logger"),B(this,"routing"),B(this,"getCodec"),B(this,"getHasher"),B(this,"dns"),B(this,"metrics"),B(this,"log"),this.logger=e.logger??O(),this.log=this.logger.forComponent("helia"),this.getHasher=function(e=[],t){const s={[ke.code]:ke,[be.code]:be,[ve.code]:ve};return e.forEach(e=>{s[e.code]=e}),async e=>{let i=s[e];if(null==i&&null!=t){const r=t(e);i=di(r)?await r:r,s[i.code]=i}if(null!=i)return i;throw new ni(`No hasher configured for multihash code 0x${e.toString(16)}, please configure one. You can look up which hash this is at https://github.com/multiformats/multicodec/blob/master/table.csv`)}}(e.hashers,e.loadHasher),this.getCodec=function(e=[],t){const s={[ys]:ps,[ws]:gs,[ms]:us,[fs]:ds,[ye]:we};return e.forEach(e=>{s[e.code]=e}),async e=>{let i=s[e];if(null==i&&null!=t){const r=t(e);i=di(r)?await r:r,s[i.code]=i}if(null!=i)return i;throw new oi(`Could not load codec for ${e}`)}}(e.codecs,e.loadCodec),this.dns=e.dns??F(),this.metrics=e.metrics,this.libp2p=e.libp2p;const t={blockstore:e.blockstore,datastore:e.datastore,logger:this.logger,libp2p:this.libp2p,blockBrokers:[],getHasher:this.getHasher,getCodec:this.getCodec,dns:this.dns,metrics:this.metrics,...e.components??{}};this.routing=t.routing=new ai(t,{routers:(e.routers??[]).flatMap(e=>{const t=[e];return null!=e[z]&&t.push(e[z]),null!=e[G]&&t.push(e[G]),t}),providerLookupConcurrency:e.providerLookupConcurrency});const s=new fi(t);this.pins=new ei(e.datastore,s,this.getCodec),this.blockstore=new ci(s,this.pins,{holdGcLock:e.holdGcLock??!0}),this.datastore=e.datastore,t.blockBrokers=e.blockBrokers.map(e=>e(t))}async start(){await async function(e){if(!(await e.has(hi)))return void(await e.put(hi,me("1")));const t=await e.get(hi),s=St(t);if(1!==parseInt(s,10))throw new Error("Unknown datastore version, a datastore migration may be required")}(this.datastore),await Ve(this.blockstore,this.datastore,this.routing,this.libp2p)}async stop(){await He(this.blockstore,this.datastore,this.routing,this.libp2p)}async gc(e={}){const t=await this.blockstore.lock.writeLock();try{const t=this,s=this.blockstore.unwrap();this.log("gc start"),await j(s.deleteMany(async function*(){var i,r;for await(const{cid:o}of s.getAll())try{if(await t.pins.isPinned(o,e))continue;yield o,null==(i=e.onProgress)||i.call(e,new fe("helia:gc:deleted",o))}catch(n){t.log.error("Error during gc",n),null==(r=e.onProgress)||r.call(e,new fe("helia:gc:error",n))}}()))}finally{t()}this.log("gc finished")}}const Bi="/ipfs/bitswap/1.2.0",Ni=4194304,_i=Ni;var Di,Mi,Li,Oi,Ui,$i,Vi,Hi,Fi,qi,Wi,zi,Gi;(Mi=Di||(Di={})).WantBlock="WantBlock",Mi.WantHave="WantHave",(Oi=Li||(Li={}))[Oi.WantBlock=0]="WantBlock",Oi[Oi.WantHave=1]="WantHave",(Di||(Di={})).codec=()=>Se(Li),function(e){let t;e.codec=()=>(null==t&&(t=Ie((e,t,s={})=>{!1!==s.lengthDelimited&&t.fork(),null!=e.cid&&e.cid.byteLength>0&&(t.uint32(10),t.bytes(e.cid)),null!=e.priority&&0!==e.priority&&(t.uint32(16),t.int32(e.priority)),null!=e.cancel&&(t.uint32(24),t.bool(e.cancel)),null!=e.wantType&&(t.uint32(32),Di.codec().encode(e.wantType,t)),null!=e.sendDontHave&&(t.uint32(40),t.bool(e.sendDontHave)),!1!==s.lengthDelimited&&t.ldelim()},(e,t,s={})=>{const i={cid:xe(0),priority:0},r=null==t?e.len:e.pos+t;for(;e.pos<r;){const t=e.uint32();switch(t>>>3){case 1:i.cid=e.bytes();break;case 2:i.priority=e.int32();break;case 3:i.cancel=e.bool();break;case 4:i.wantType=Di.codec().decode(e);break;case 5:i.sendDontHave=e.bool();break;default:e.skipType(7&t)}}return i})),t),e.encode=t=>Pe(t,e.codec()),e.decode=(t,s)=>Re(t,e.codec(),s)}(Ui||(Ui={})),function(e){let t;e.codec=()=>(null==t&&(t=Ie((e,t,s={})=>{if(!1!==s.lengthDelimited&&t.fork(),null!=e.entries)for(const i of e.entries)t.uint32(10),Ui.codec().encode(i,t);null!=e.full&&(t.uint32(16),t.bool(e.full)),!1!==s.lengthDelimited&&t.ldelim()},(e,t,s={})=>{var i,r;const n={entries:[]},o=null==t?e.len:e.pos+t;for(;e.pos<o;){const t=e.uint32();switch(t>>>3){case 1:if(null!=(null==(i=s.limits)?void 0:i.entries)&&n.entries.length===s.limits.entries)throw new Ge('Decode error - map field "entries" had too many elements');n.entries.push(Ui.codec().decode(e,e.uint32(),{limits:null==(r=s.limits)?void 0:r.entries$}));break;case 2:n.full=e.bool();break;default:e.skipType(7&t)}}return n})),t),e.encode=t=>Pe(t,e.codec()),e.decode=(t,s)=>Re(t,e.codec(),s)}($i||($i={})),function(e){let t;e.codec=()=>(null==t&&(t=Ie((e,t,s={})=>{!1!==s.lengthDelimited&&t.fork(),null!=e.prefix&&e.prefix.byteLength>0&&(t.uint32(10),t.bytes(e.prefix)),null!=e.data&&e.data.byteLength>0&&(t.uint32(18),t.bytes(e.data)),!1!==s.lengthDelimited&&t.ldelim()},(e,t,s={})=>{const i={prefix:xe(0),data:xe(0)},r=null==t?e.len:e.pos+t;for(;e.pos<r;){const t=e.uint32();switch(t>>>3){case 1:i.prefix=e.bytes();break;case 2:i.data=e.bytes();break;default:e.skipType(7&t)}}return i})),t),e.encode=t=>Pe(t,e.codec()),e.decode=(t,s)=>Re(t,e.codec(),s)}(Vi||(Vi={})),(Fi=Hi||(Hi={})).HaveBlock="HaveBlock",Fi.DoNotHaveBlock="DoNotHaveBlock",(Wi=qi||(qi={}))[Wi.HaveBlock=0]="HaveBlock",Wi[Wi.DoNotHaveBlock=1]="DoNotHaveBlock",(Hi||(Hi={})).codec=()=>Se(qi),function(e){let t;e.codec=()=>(null==t&&(t=Ie((e,t,s={})=>{!1!==s.lengthDelimited&&t.fork(),null!=e.cid&&e.cid.byteLength>0&&(t.uint32(10),t.bytes(e.cid)),null!=e.type&&0!==qi[e.type]&&(t.uint32(16),Hi.codec().encode(e.type,t)),!1!==s.lengthDelimited&&t.ldelim()},(e,t,s={})=>{const i={cid:xe(0),type:Hi.HaveBlock},r=null==t?e.len:e.pos+t;for(;e.pos<r;){const t=e.uint32();switch(t>>>3){case 1:i.cid=e.bytes();break;case 2:i.type=Hi.codec().decode(e);break;default:e.skipType(7&t)}}return i})),t),e.encode=t=>Pe(t,e.codec()),e.decode=(t,s)=>Re(t,e.codec(),s)}(zi||(zi={})),function(e){let t;e.codec=()=>(null==t&&(t=Ie((e,t,s={})=>{if(!1!==s.lengthDelimited&&t.fork(),null!=e.wantlist&&(t.uint32(10),$i.codec().encode(e.wantlist,t)),null!=e.blocks)for(const i of e.blocks)t.uint32(26),Vi.codec().encode(i,t);if(null!=e.blockPresences)for(const i of e.blockPresences)t.uint32(34),zi.codec().encode(i,t);null!=e.pendingBytes&&0!==e.pendingBytes&&(t.uint32(40),t.int32(e.pendingBytes)),!1!==s.lengthDelimited&&t.ldelim()},(e,t,s={})=>{var i,r,n,o,a;const l={blocks:[],blockPresences:[],pendingBytes:0},c=null==t?e.len:e.pos+t;for(;e.pos<c;){const t=e.uint32();switch(t>>>3){case 1:l.wantlist=$i.codec().decode(e,e.uint32(),{limits:null==(i=s.limits)?void 0:i.wantlist});break;case 3:if(null!=(null==(r=s.limits)?void 0:r.blocks)&&l.blocks.length===s.limits.blocks)throw new Ge('Decode error - map field "blocks" had too many elements');l.blocks.push(Vi.codec().decode(e,e.uint32(),{limits:null==(n=s.limits)?void 0:n.blocks$}));break;case 4:if(null!=(null==(o=s.limits)?void 0:o.blockPresences)&&l.blockPresences.length===s.limits.blockPresences)throw new Ge('Decode error - map field "blockPresences" had too many elements');l.blockPresences.push(zi.codec().decode(e,e.uint32(),{limits:null==(a=s.limits)?void 0:a.blockPresences$}));break;case 5:l.pendingBytes=e.int32();break;default:e.skipType(7&t)}}return l})),t),e.encode=t=>Pe(t,e.codec()),e.decode=(t,s)=>Re(t,e.codec(),s)}(Gi||(Gi={}));class ji extends Error{constructor(e="Block too large"){super(e),this.name="BlockTooLargeError"}}B(ji,"name","BlockTooLargeError");function Ki(e,t,s,i,r,n){let o=0,a=!1;for(let l=s;l<e.length;l++){const s=e[l],c=n(s);if(c>4193664)throw new ji("Cannot send block as after encoding it is over the max message size");const h=r+c;if(h>i){a=!0;break}t.push(s),o++,r=h}return{hasMore:a,added:o,newSize:r}}function Qi(e){return Zi(3,Vi.encode(e))}function Ji(e){return Zi(4,zi.encode(e))}function Yi(e){return Zi(1,Ui.encode(e))}function Zi(e,t){return Ae(e)+Ae(t.byteLength)+t.byteLength}let Xi=class extends ze{constructor(e,t={}){var s,i;super(),B(this,"log"),B(this,"libp2p"),B(this,"routing"),B(this,"protocols"),B(this,"running"),B(this,"maxInboundStreams"),B(this,"maxOutboundStreams"),B(this,"messageReceiveTimeout"),B(this,"registrarIds"),B(this,"metrics"),B(this,"sendQueue"),B(this,"runOnLimitedConnections"),B(this,"maxOutgoingMessageSize"),B(this,"maxIncomingMessageSize"),this.log=e.logger.forComponent("helia:bitswap:network"),this.libp2p=e.libp2p,this.routing=e.routing,this.protocols=t.protocols??[Bi],this.registrarIds=[],this.running=!1,this._onStream=this._onStream.bind(this),this.maxInboundStreams=t.maxInboundStreams??1024,this.maxOutboundStreams=t.maxOutboundStreams??1024,this.messageReceiveTimeout=t.messageReceiveTimeout??5e3,this.runOnLimitedConnections=t.runOnLimitedConnections??false,this.maxIncomingMessageSize=t.maxIncomingMessageSize??Ni,this.maxOutgoingMessageSize=t.maxOutgoingMessageSize??t.maxIncomingMessageSize??_i,this.metrics={blocksSent:null==(s=e.metrics)?void 0:s.registerCounter("helia_bitswap_sent_blocks_total"),dataSent:null==(i=e.metrics)?void 0:i.registerCounter("helia_bitswap_sent_data_bytes_total")},this.sendQueue=new Fe({concurrency:t.messageSendConcurrency??50,metrics:e.metrics,metricName:"helia_bitswap_message_send_queue"}),this.sendQueue.addEventListener("error",e=>{this.log.error("error sending wantlist to peer",e.detail)})}async start(){if(this.running)return;this.running=!0,await this.libp2p.handle(this.protocols,this._onStream,{maxInboundStreams:this.maxInboundStreams,maxOutboundStreams:this.maxOutboundStreams,runOnLimitedConnection:this.runOnLimitedConnections});const e={onConnect:e=>{this.safeDispatchEvent("peer:connected",{detail:e})},onDisconnect:e=>{this.safeDispatchEvent("peer:disconnected",{detail:e})}};this.registrarIds=[];for(const t of this.protocols)this.registrarIds.push(await this.libp2p.register(t,e));this.libp2p.getConnections().forEach(e=>{this.safeDispatchEvent("peer:connected",{detail:e.remotePeer})})}async stop(){if(this.running=!1,await this.libp2p.unhandle(this.protocols),null!=this.registrarIds){for(const e of this.registrarIds)this.libp2p.unregister(e);this.registrarIds=[]}}_onStream(e){if(!this.running)return;const{stream:t,connection:s}=e;Promise.resolve().then(async()=>{this.log("incoming new bitswap %s stream from %p",t.protocol,s.remotePeer);const e=()=>{"open"===t.status?t.abort(new qt(`Incoming Bitswap stream timed out after ${this.messageReceiveTimeout}ms`)):this.log("stream aborted with status %s",t.status)};let i=AbortSignal.timeout(this.messageReceiveTimeout);i.addEventListener("abort",e),await t.closeWrite(),await As(t,e=>K(e,{maxDataLength:this.maxIncomingMessageSize}),async r=>{for await(const o of r)try{const r=Gi.decode(o);this.log("incoming new bitswap %s message from %p on stream",t.protocol,s.remotePeer,t.id),this.safeDispatchEvent("bitswap:message",{detail:{peer:s.remotePeer,message:r}}),i.removeEventListener("abort",e),i=AbortSignal.timeout(this.messageReceiveTimeout),qe(1/0,i),i.addEventListener("abort",e)}catch(n){this.log.error("error reading incoming bitswap message from %p on stream",s.remotePeer,t.id,n),t.abort(n);break}})}).catch(e=>{this.log.error("error handling incoming stream from %p",s.remotePeer,e),t.abort(e)})}async*findProviders(e,t){var s;null==(s=null==t?void 0:t.onProgress)||s.call(t,new fe("bitswap:network:find-providers",e));for await(const i of this.routing.findProviders(e,t)){await this.libp2p.isDialable(i.multiaddrs,{runOnLimitedConnection:this.runOnLimitedConnections})&&(yield i)}}async findAndConnect(e,t){null!=(null==t?void 0:t.providers)&&await Promise.all(t.providers.map(async e=>this.connectTo(e).catch(e=>{this.log.error("could not connect to supplied provider - %e",e)}))),await j(vs(Q(this.findProviders(e,t),(null==t?void 0:t.maxProviders)??3),async e=>this.connectTo(e.id,t))).catch(e=>{this.log.error(e)})}async sendMessage(e,t,s){if(!this.running)throw new Error("network isn't running");const i=this.sendQueue.queue.find(t=>e.equals(t.options.peerId)&&"queued"===t.status);if(null!=i)return i.options.message=function(e,t){for(const[s,i]of t.wantlist.entries()){const t=e.wantlist.get(s);null!=t&&(t.priority>i.priority&&(i.priority=t.priority),i.cancel=i.cancel??t.cancel,i.wantType=i.wantType??t.wantType,i.sendDontHave=i.sendDontHave??t.sendDontHave),e.wantlist.set(s,i)}for(const[s,i]of t.blockPresences.entries())e.blockPresences.set(s,i);for(const[s,i]of t.blocks.entries())e.blocks.set(s,i);return t.full&&!e.full&&(e.full=!0),e}(i.options.message,t),void(await i.join({signal:null==s?void 0:s.signal}));await this.sendQueue.add(async t=>{var s,i;const r=null==t?void 0:t.message;if(null==r)throw new It("No message to send");this.log("sendMessage to %p",e),null==(s=null==t?void 0:t.onProgress)||s.call(t,new fe("bitswap:network:send-wantlist",e));const n=await this.libp2p.dialProtocol(e,Bi,t);await n.closeRead();try{await As(function*(e,t){const s=[...e.wantlist.values()],i=[...e.blockPresences.values()],r=[...e.blocks.values()];let n=0,o=0,a=0,l=!1;for(;;){const c={wantlist:{full:e.full??!1,entries:[]},blockPresences:[],blocks:[],pendingBytes:0};let h=Gi.encode(c).byteLength,{added:d,hasMore:u,newSize:g}=Ki(r,c.blocks,a,t,h,Qi);a+=d,h=g;const p=u;({added:d,hasMore:u,newSize:g}=Ki(i,c.blockPresences,o,t,h,Ji)),o+=d,h=g;const f=u;if(({added:d,hasMore:u,newSize:g}=Ki(s,c.wantlist.entries,n,t,h,Yi)),n+=d,h=g,l=!p&&!f&&!u,l||(c.wantlist.full=!1),yield Gi.encode(c),l)break}}(r,this.maxOutgoingMessageSize),e=>J(e),n),await n.close(t)}catch(o){null==(i=null==t?void 0:t.onProgress)||i.call(t,new fe("bitswap:network:send-wantlist:error",{peer:e,error:o})),this.log.error("error sending message to %p",e,o),n.abort(o)}this._updateSentStats(r.blocks)},{peerId:e,signal:null==s?void 0:s.signal,message:t})}async connectTo(e,t){var s;if(!this.running)throw new Ft("Network isn't running");null==(s=null==t?void 0:t.onProgress)||s.call(t,new fe("bitswap:network:dial",e));const[i]=await Promise.all([this.libp2p.dial(e,t),je(this.libp2p,"peer:identify",null==t?void 0:t.signal,{filter:t=>{if(!t.detail.peerId.equals(e))return!1;if(t.detail.protocols.includes(Bi))return!0;throw new Wt(`${e} did not support ${Bi}`)}})]);return i}_updateSentStats(e){var t,s;let i=0;for(const r of e.values())i+=r.data.byteLength;null==(t=this.metrics.dataSent)||t.increment(i),null==(s=this.metrics.blocksSent)||s.increment(e.size)}};class er{constructor(e=!1,t=0){B(this,"full"),B(this,"pendingBytes"),B(this,"wantlist"),B(this,"blocks"),B(this,"blockPresences"),this.full=e,this.wantlist=new Map,this.blocks=new Map,this.blockPresences=new Map,this.pendingBytes=0}addWantlistEntry(e,t){const s=Ee.encode(e.multihash.bytes);this.wantlist.set(s,t)}addBlockPresence(e,t){const s=Ee.encode(e.multihash.bytes);this.blockPresences.set(s,t)}addBlock(e,t){const s=Ee.encode(e.multihash.bytes);this.blocks.set(s,t)}}function tr(e){return function(e){let t=new Uint8Array(e.reduce((e,t)=>e+Ae(t),0)),s=0;for(const i of e)t=Ce(i,t,s),s+=Ae(i);return t}([e.version,e.code,e.multihash.code,e.multihash.digest.byteLength])}class sr{constructor(e,t){B(this,"peerId"),B(this,"blockstore"),B(this,"network"),B(this,"wants"),B(this,"exchangeCount"),B(this,"bytesSent"),B(this,"bytesReceived"),B(this,"lastExchange"),B(this,"maxSizeReplaceHasWithBlock"),B(this,"log"),this.peerId=e.peerId,this.blockstore=e.blockstore,this.network=e.network,this.wants=new Map,this.log=e.logger.forComponent(`helia:bitswap:ledger:${e.peerId}`),this.exchangeCount=0,this.bytesSent=0,this.bytesReceived=0,this.maxSizeReplaceHasWithBlock=t.maxSizeReplaceHasWithBlock??1024}sentBytes(e){this.exchangeCount++,this.lastExchange=(new Date).getTime(),this.bytesSent+=e}receivedBytes(e){this.exchangeCount++,this.lastExchange=(new Date).getTime(),this.bytesReceived+=e}debtRatio(){return this.bytesSent/(this.bytesReceived+1)}async sendBlocksToPeer(e){const t=new er,s=new Set;for(const[r,n]of this.wants.entries())try{const i=await this.blockstore.get(n.cid,e);n.wantType===Di.WantHave?i.byteLength<this.maxSizeReplaceHasWithBlock?(this.log("sending have and block for %c",n.cid),s.add(r),t.addBlock(n.cid,{data:i,prefix:tr(n.cid)})):(this.log("sending have for %c",n.cid),t.addBlockPresence(n.cid,{cid:n.cid.bytes,type:Hi.HaveBlock})):(this.log("sending block for %c",n.cid),s.add(r),t.addBlock(n.cid,{data:i,prefix:tr(n.cid)}))}catch(i){if("NotFoundError"!==i.name)throw i;if(this.log("do not have block for %c",n.cid),!n.sendDontHave)continue;if(!0===n.sentDoNotHave)continue;n.sentDoNotHave=!0,t.addBlockPresence(n.cid,{cid:n.cid.bytes,type:Hi.DoNotHaveBlock})}if(t.blocks.size>0||t.blockPresences.size>0){this.log("sending message"),await this.network.sendMessage(this.peerId,t,e),this.log("sent message"),this.sentBytes([...t.blocks.values()].reduce((e,t)=>e+t.data.byteLength,0));for(const e of s)this.wants.delete(e)}}}class ir{constructor(e,t={}){B(this,"blockstore"),B(this,"network"),B(this,"ledgerMap"),B(this,"maxSizeReplaceHasWithBlock"),B(this,"log"),B(this,"logger"),this.blockstore=e.blockstore,this.network=e.network,this.maxSizeReplaceHasWithBlock=t.maxSizeReplaceHasWithBlock,this.log=e.logger.forComponent("helia:bitswap:peer-want-lists"),this.logger=e.logger,this.ledgerMap=Ke({name:"helia_bitswap_ledger_map",metrics:e.metrics}),this.network.addEventListener("bitswap:message",e=>{this.receiveMessage(e.detail.peer,e.detail.message).catch(t=>{this.log.error("error receiving bitswap message from %p",e.detail.peer,t)})}),this.network.addEventListener("peer:disconnected",e=>{this.peerDisconnected(e.detail)})}ledgerForPeer(e){const t=this.ledgerMap.get(e);if(null!=t)return{peer:t.peerId,value:t.debtRatio(),sent:t.bytesSent,received:t.bytesReceived,exchanged:t.exchangeCount}}wantListForPeer(e){const t=this.ledgerMap.get(e);if(null!=t)return[...t.wants.values()]}peers(){return Array.from(this.ledgerMap.values()).map(e=>e.peerId)}async receiveMessage(e,t){var s;let i=this.ledgerMap.get(e);if(null==i&&(i=new sr({peerId:e,blockstore:this.blockstore,network:this.network,logger:this.logger},{maxSizeReplaceHasWithBlock:this.maxSizeReplaceHasWithBlock}),this.ledgerMap.set(e,i)),i.receivedBytes((null==(s=t.blocks)?void 0:s.reduce((e,t)=>e+t.data.byteLength,0))??0),null!=t.wantlist){!0===t.wantlist.full&&i.wants.clear();for(const s of t.wantlist.entries){const t=ue.decode(s.cid),r=St(t.multihash.bytes,"base64");!0===s.cancel?(this.log("peer %p cancelled want of block for %c",e,t),i.wants.delete(r)):(s.wantType===Di.WantHave?this.log("peer %p wanted block presence for %c",e,t):this.log("peer %p wanted block for %c",e,t),i.wants.set(r,{cid:t,priority:s.priority,wantType:s.wantType??Di.WantBlock,sendDontHave:s.sendDontHave??!1}))}}this.log("send blocks to peer"),await i.sendBlocksToPeer()}async receivedBlock(e,t){const s=St(e.multihash.bytes,"base64"),i=[];for(const r of this.ledgerMap.values())r.wants.has(s)&&i.push(r);await Promise.all(i.map(async e=>e.sendBlocksToPeer(t)))}peerDisconnected(e){this.ledgerMap.delete(e)}}class rr extends Ci{constructor(e,t){super(e,{...t,name:"helia:bitswap:session"}),B(this,"wantList"),B(this,"network"),B(this,"libp2p"),this.wantList=e.wantList,this.network=e.network,this.libp2p=e.libp2p}async queryProvider(e,t,s){this.log("sending WANT-BLOCK for %c to %p",e,t);const i=await this.wantList.wantSessionBlock(e,t,s);if(this.log("%p %s %c",t,i.has?"has":"does not have",e),i.has&&null!=i.block)return i.block;throw new Error("Provider did not have block")}async*findNewProviders(e,t={}){for await(const s of this.network.findProviders(e,t))yield s.id}toEvictionKey(e){return e.toMultihash().bytes}equals(e,t){return e.equals(t)}async convertToProvider(e,t){if(zt(e))return e;return(await this.libp2p.dial(e,t)).remotePeer}}class nr{constructor(e){var t,s,i,r;B(this,"blocksReceived"),B(this,"duplicateBlocksReceived"),B(this,"dataReceived"),B(this,"duplicateDataReceived"),this.blocksReceived=null==(t=e.metrics)?void 0:t.registerMetricGroup("helia_bitswap_received_blocks"),this.duplicateBlocksReceived=null==(s=e.metrics)?void 0:s.registerMetricGroup("helia_bitswap_duplicate_received_blocks"),this.dataReceived=null==(i=e.metrics)?void 0:i.registerMetricGroup("helia_bitswap_data_received_bytes"),this.duplicateDataReceived=null==(r=e.metrics)?void 0:r.registerMetricGroup("helia_bitswap_duplicate_data_received_bytes")}updateBlocksReceived(e=1,t){var s;const i={global:e};null!=t&&(i[t.toString()]=e),null==(s=this.blocksReceived)||s.increment(i)}updateDuplicateBlocksReceived(e=1,t){var s;const i={global:e};null!=t&&(i[t.toString()]=e),null==(s=this.duplicateBlocksReceived)||s.increment(i)}updateDataReceived(e,t){var s;const i={global:e};null!=t&&(i[t.toString()]=e),null==(s=this.dataReceived)||s.increment(i)}updateDuplicateDataReceived(e,t){var s;const i={global:e};null!=t&&(i[t.toString()]=e),null==(s=this.duplicateDataReceived)||s.increment(i)}}function or(e){if(!(e instanceof Uint8Array))throw new Error("arg needs to be a Uint8Array");const t=[];for(;e.length>0;){const s=Te(e);t.push(s),e=e.slice(Ae(s))}return t}class ar extends ze{constructor(e,t={}){super(),B(this,"peers"),B(this,"wants"),B(this,"network"),B(this,"log"),B(this,"sendMessagesDelay"),B(this,"sendMessagesTimeout"),B(this,"hashLoader"),B(this,"sendingMessages"),this.peers=Ke({name:"helia_bitswap_peers",metrics:e.metrics}),this.wants=Y({name:"helia_bitswap_wantlist",metrics:e.metrics}),this.network=e.network,this.sendMessagesDelay=t.sendMessagesDelay??10,this.log=e.logger.forComponent("helia:bitswap:wantlist"),this.hashLoader=t.hashLoader,this.network.addEventListener("bitswap:message",e=>{this.receiveMessage(e.detail.peer,e.detail.message).catch(t=>{this.log.error("error receiving bitswap message from %p",e.detail.peer,t)})}),this.network.addEventListener("peer:connected",e=>{this.peerConnected(e.detail).catch(t=>{this.log.error("error processing newly connected bitswap peer %p",e.detail,t)})}),this.network.addEventListener("peer:disconnected",e=>{this.peerDisconnected(e.detail)})}async addEntry(e,t){var s;const i=St(e.multihash.bytes,"base64");let r=this.wants.get(i);null==r&&(r={cid:e,priority:t.priority??1,wantType:t.wantType??Di.WantBlock,cancel:!1,sendDontHave:!0},this.wants.set(i,r)),r.wantType===Di.WantHave&&t.wantType===Di.WantBlock&&(r.wantType=Di.WantBlock),await this.sendMessagesDebounced();try{if(t.wantType===Di.WantBlock){return(await je(this,"block",null==t?void 0:t.signal,{filter:t=>ge(e.multihash.digest,t.detail.cid.multihash.digest),errorMessage:"Want was aborted"})).detail}return(await je(this,"presence",null==t?void 0:t.signal,{filter:t=>ge(e.multihash.digest,t.detail.cid.multihash.digest),errorMessage:"Want was aborted"})).detail}finally{!0===(null==(s=t.signal)?void 0:s.aborted)&&(this.log("want for %c was aborted, cancelling want",e),r.cancel=!0,await this.sendMessagesDebounced())}}async sendMessagesDebounced(){var e;await(null==(e=this.sendingMessages)?void 0:e.promise),clearTimeout(this.sendMessagesTimeout),this.sendMessagesTimeout=setTimeout(()=>{this.sendMessages().catch(e=>{this.log("error sending messages to peers",e)})},this.sendMessagesDelay)}async sendMessages(){this.sendingMessages=vt(),await Promise.all([...this.peers.entries()].map(async([e,t])=>{const s=new Set,i=new er;for(const[n,o]of this.wants.entries()){t.has(n)||o.cancel||(s.add(n),i.addWantlistEntry(o.cid,{cid:o.cid.bytes,priority:o.priority,wantType:o.wantType,cancel:o.cancel,sendDontHave:o.sendDontHave}))}if(0!==i.wantlist.size)try{await this.network.sendMessage(e,i);for(const e of s)t.add(e)}catch(r){this.log.error("error sending full wantlist to new peer",r)}})).catch(e=>{this.log.error("error sending messages",e)});for(const[e,t]of this.wants)if(t.cancel){this.wants.delete(e);for(const t of this.peers.values())t.delete(e)}this.sendingMessages.resolve()}has(e){const t=St(e.multihash.bytes,"base64");return this.wants.has(t)}async wantSessionPresence(e,t,s={}){const i=new er;i.addWantlistEntry(e,{cid:e.bytes,sendDontHave:!0,wantType:Di.WantHave,priority:1}),await this.network.sendMessage(t,i);return(await je(this,"presence",s.signal,{filter:s=>t.equals(s.detail.sender)&&ge(e.multihash.digest,s.detail.cid.multihash.digest)})).detail}async wantBlock(e,t={}){return this.addEntry(e,{...t,wantType:Di.WantBlock})}async wantSessionBlock(e,t,s={}){const i=new er;i.addWantlistEntry(e,{cid:e.bytes,sendDontHave:!0,wantType:Di.WantBlock,priority:1}),await this.network.sendMessage(t,i);return(await je(this,"presence",s.signal,{filter:s=>t.equals(s.detail.sender)&&ge(e.multihash.digest,s.detail.cid.multihash.digest)})).detail}async receivedBlock(e,t){const s=St(e.multihash.bytes,"base64"),i=this.wants.get(s);null!=i&&(i.cancel=!0,await this.sendMessagesDebounced())}async receiveMessage(e,t){var s;this.log("received message from %p with %d blocks",e,t.blocks.length);let i=!1;for(const r of t.blocks){if(null==r.prefix||null==r.data)continue;const t=or(r.prefix),n=t[0],o=t[1],a=t[2],l=a===ke.code?ke:await(null==(s=this.hashLoader)?void 0:s.getHasher(a));if(null==l){this.log.error("unknown hash algorithm",a);continue}let c=l.digest(r.data);null!=c.then&&(c=await c);const h=ue.create(0===n?0:1,o,c);this.log("received block from %p for %c",e,h),this.safeDispatchEvent("block",{detail:{sender:e,cid:h,block:r.data}}),this.safeDispatchEvent("presence",{detail:{sender:e,cid:h,has:!0,block:r.data}});const d=St(h.multihash.bytes,"base64"),u=this.wants.get(d);null!=u&&(u.cancel=!0,i=!0)}for(const{cid:r,type:n}of t.blockPresences){const t=ue.decode(r);this.log("received %s from %p for %c",n,e,t),this.safeDispatchEvent("presence",{detail:{sender:e,cid:t,has:n===Hi.HaveBlock}})}i&&await this.sendMessagesDebounced()}async peerConnected(e){const t=new Set,s=new er(!0);for(const[r,n]of this.wants.entries())n.cancel||(t.add(r),s.addWantlistEntry(n.cid,{cid:n.cid.bytes,priority:1,wantType:Di.WantBlock,cancel:!1,sendDontHave:!1}));if(0!==s.wantlist.size)try{await this.network.sendMessage(e,s),this.peers.set(e,t)}catch(i){this.log.error("error sending full wantlist to new peer %p",e,i)}else this.peers.set(e,t)}peerDisconnected(e){this.peers.delete(e)}start(){}stop(){this.peers.clear(),clearTimeout(this.sendMessagesTimeout)}}class lr{constructor(e,t={}){B(this,"log"),B(this,"logger"),B(this,"stats"),B(this,"network"),B(this,"blockstore"),B(this,"peerWantLists"),B(this,"wantList"),B(this,"libp2p"),this.logger=e.logger,this.log=e.logger.forComponent("helia:bitswap"),this.blockstore=e.blockstore,this.libp2p=e.libp2p,this.stats=new nr(e),this.network=new Xi(e,t),this.peerWantLists=new ir({...e,network:this.network},t),this.wantList=new ar({...e,network:this.network},t)}createSession(e={}){return t={wantList:this.wantList,network:this.network,logger:this.logger,libp2p:this.libp2p},new rr(t,e);var t}async want(e,t={}){const s=new AbortController,i=We([s.signal,t.signal]);qe(1/0,s.signal),this.network.findAndConnect(e,{...t,signal:i}).catch(t=>{s.signal.aborted||this.log.error("error during finding and connect for cid %c",e,t)});try{return(await this.wantList.wantBlock(e,{...t,signal:i})).block}finally{s.abort(),i.clear()}}async notify(e,t,s={}){await Promise.all([this.peerWantLists.receivedBlock(e,s),this.wantList.receivedBlock(e,s)])}getWantlist(){return[...this.wantList.wants.values()].filter(e=>!e.cancel).map(e=>({cid:e.cid,priority:e.priority,wantType:e.wantType}))}getPeerWantlist(e){return this.peerWantLists.wantListForPeer(e)}async start(){this.wantList.start(),await this.network.start()}async stop(){this.wantList.stop(),await this.network.stop()}}class cr{constructor(e,t={}){B(this,"bitswap"),B(this,"started");const{getHasher:s}=e;this.bitswap=((e,t={})=>new lr(e,t))(e,{hashLoader:{getHasher:async e=>s(e)},...t}),this.started=!1}isStarted(){return this.started}async start(){await this.bitswap.start(),this.started=!0}async stop(){await this.bitswap.stop(),this.started=!1}async announce(e,t,s){await this.bitswap.notify(e,t,s)}async retrieve(e,t={}){return this.bitswap.want(e,t)}createSession(e){const t=this.bitswap.createSession(e);return{announce:async(e,t,s)=>{await this.bitswap.notify(e,t,s)},retrieve:async(e,s)=>t.retrieve(e,s)}}}function hr(e={}){return t=>new cr(t,e)}function dr(e,t){return new Z(e).contains(t)}const ur=[Je,Ye,Ze,Xe,et];function gr(e){var t;return null==(t=fr("sni",e))?void 0:t.value}function pr(e){var t;const s=null==(t=fr("tcp",e))?void 0:t.value;return null==s?"":`:${s}`}function fr(e,t){return t.find(t=>t.name===e)}function mr(e){return e.some(({code:e})=>e===st)}function wr(e,t){const s=yr[e.name];if(null==s)throw new Error(`Can't interpret protocol ${e.name}`);const i=s(e,t);return e.code===tt?`[${i}]`:i}const yr={ip4:(e,t)=>e.value,ip6:(e,t)=>0===t.length?e.value:`[${e.value}]`,tcp:(e,t)=>{const s=t.pop();if(null==s)throw new Error("Unexpected end of multiaddr");return`tcp://${wr(s,t)}:${e.value}`},udp:(e,t)=>{const s=t.pop();if(null==s)throw new Error("Unexpected end of multiaddr");return`udp://${wr(s,t)}:${e.value}`},dnsaddr:(e,t)=>e.value,dns4:(e,t)=>e.value,dns6:(e,t)=>e.value,dns:(e,t)=>e.value,ipfs:(e,t)=>{const s=t.pop();if(null==s)throw new Error("Unexpected end of multiaddr");return`${wr(s,t)}`},p2p:(e,t)=>{const s=t.pop();if(null==s)throw new Error("Unexpected end of multiaddr");return`${wr(s,t)}`},http:(e,t)=>{const s=mr(t),i=gr(t),r=pr(t);if(s&&null!=i)return`https://${i}${r}`;const n=s?"https://":"http://",o=t.pop();if(null==o)throw new Error("Unexpected end of multiaddr");let a=wr(o,t);return a=null==a?void 0:a.replace("tcp://",""),`${n}${a}`},"http-path":(e,t)=>{const s=t.pop();if(null==s)throw new Error("Unexpected end of multiaddr");return`${wr(s,t)}${decodeURIComponent(e.value??"")}`},tls:(e,t)=>{const s=t.pop();if(null==s)throw new Error("Unexpected end of multiaddr");return wr(s,t)},sni:(e,t)=>{const s=t.pop();if(null==s)throw new Error("Unexpected end of multiaddr");return wr(s,t)},https:(e,t)=>{const s=t.pop();if(null==s)throw new Error("Unexpected end of multiaddr");let i=wr(s,t);return i=null==i?void 0:i.replace("tcp://",""),`https://${i}`},ws:(e,t)=>{const s=mr(t),i=gr(t),r=pr(t);if(s&&null!=i)return`wss://${i}${r}`;const n=s?"wss://":"ws://",o=t.pop();if(null==o)throw new Error("Unexpected end of multiaddr");let a=wr(o,t);return a=null==a?void 0:a.replace("tcp://",""),`${n}${a}`},wss:(e,t)=>{const s=t.pop();if(null==s)throw new Error("Unexpected end of multiaddr");let i=wr(s,t);return i=null==i?void 0:i.replace("tcp://",""),`wss://${i}`}};function vr(e,t){const s=Qe(e).getComponents(),i=s.pop();if(null==i)throw new Error("Unexpected end of multiaddr");const r=yr[i.name];if(null==r)throw new Error(`No interpreter found for ${i.name}`);let n=r(i,s)??"";return ur.includes(i.code)&&(n=n.replace(/^.*:\/\//,""),n="443"===i.value?`https://${n}`:`http://${n}`),(n.startsWith("http://")||n.startsWith("https://")||n.startsWith("ws://")||n.startsWith("wss://"))&&(n=new URL(n).toString(),n.endsWith("/")&&(n=n.substring(0,n.length-1))),n}function br(e,t,s){return e.filter(e=>{if(it.matches(e)||t&&rt.matches(e))return!!s||(!!nt.matches(e)||!1===X(e.toOptions().host));if(!t&&s){const{host:t}=e.toOptions();if("127.0.0.1"===t||"localhost"===t||t.endsWith(".localhost"))return!0}return!1})}async function*kr(e,t,s,i,r,n={}){for await(const o of t.findProviders(e,n)){const e=br(o.multiaddrs,i,r);if(0===e.length)continue;const t=vr(e[0]);yield new Er(t,{logger:s,transformRequestInit:n.transformRequestInit})}}class Er{constructor(e,{logger:t,transformRequestInit:s}){D(this,l),B(this,"url"),D(this,i,0),D(this,r,0),D(this,n,0),D(this,o,0),D(this,a,new Map),B(this,"log"),B(this,"transformRequestInit"),this.url=e instanceof URL?e:new URL(e),this.transformRequestInit=s,this.log=t.forComponent(`helia:trustless-gateway-block-broker:${this.url.hostname}`)}async getRawBlock(e,{signal:t,maxSize:s=xr}={}){const n=new URL(this.url.toString());if(n.pathname=`/ipfs/${e.toString()}`,n.search="?format=raw",!0===(null==t?void 0:t.aborted))throw new Error(`Signal to fetch raw block for CID ${e} from gateway ${this.url} was aborted prior to fetch`);const h=M(this,l,c).call(this,e),d=new AbortController,u=()=>{d.abort()};null==t||t.addEventListener("abort",u);try{let t=_(this,a).get(h);if(null==t){L(this,i)._++;const l={signal:d.signal,headers:{Accept:"application/vnd.ipld.raw"},cache:"force-cache"},c=null!=this.transformRequestInit?await this.transformRequestInit(l):l;t=fetch(n.toString(),c).then(async t=>{if(this.log("GET %s %d",n,t.status),!t.ok)throw L(this,r)._++,new Error(`unable to fetch raw block for CID ${e} from gateway ${this.url}`);const i=await async function(e,t,s){var i;const{signal:r,log:n}=s??{},o=e.headers.get("content-length");if(null!=o){const s=parseInt(o,10);if(s>t)throw null==n||n.error("content-length header (%d) is greater than the limit (%d)",s,t),null!=e.body&&await e.body.cancel().catch(e=>{null==n||n.error("error cancelling response body after content-length check - %e",e)}),new Error(`Content-Length header (${s}) is greater than the limit (${t}).`)}const a=null==(i=e.body)?void 0:i.getReader();if(null==a)throw new Error("Response body is not readable");const l=new Be;try{for(;;){if(!0===(null==r?void 0:r.aborted))throw new Error("Response body read was aborted.");const{done:e,value:s}=await a.read();if(e)break;if(l.append(s),l.byteLength>t)throw new Error(`Response body is greater than the limit (${t}), received ${l.byteLength} bytes.`)}}finally{a.cancel().catch(e=>{null==n||n.error("error cancelling reader - %e",e)}).finally(()=>{a.releaseLock()})}return l.subarray()}(t,s,{signal:d.signal,log:this.log});return L(this,o)._++,i}),_(this,a).set(h,t)}return await t}catch(g){if(!0===(null==t?void 0:t.aborted))throw new Error(`fetching raw block for CID ${e} from gateway ${this.url} was aborted`);throw L(this,r)._++,new Error(`unable to fetch raw block for CID ${e}`)}finally{null==t||t.removeEventListener("abort",u),_(this,a).delete(h)}}reliability(){return 0===_(this,i)?1:_(this,n)>0?-1/0:_(this,o)/(_(this,i)+3*_(this,r))}incrementInvalidBlocks(){L(this,n)._++}getStats(){return{attempts:_(this,i),errors:_(this,r),invalidBlocks:_(this,n),successes:_(this,o),pendingResponses:_(this,a).size}}}i=new WeakMap,r=new WeakMap,n=new WeakMap,o=new WeakMap,a=new WeakMap,l=new WeakSet,c=function(e){const t=e.multihash.bytes;return Ee.encode(t)};class Sr extends Ci{constructor(e,t){super(e,{...t,name:"helia:trustless-gateway:session"}),B(this,"routing"),B(this,"allowInsecure"),B(this,"allowLocal"),B(this,"transformRequestInit"),this.routing=e.routing,this.allowInsecure=t.allowInsecure??Pr,this.allowLocal=t.allowLocal??Rr,this.transformRequestInit=t.transformRequestInit}async queryProvider(e,t,s){var i;this.log("fetching BLOCK for %c from %s",e,t.url);const r=await t.getRawBlock(e,s);return this.log.trace("got block for %c from %s",e,t.url),await(null==(i=s.validateFn)?void 0:i.call(s,r)),r}async*findNewProviders(e,t={}){yield*kr(e,this.routing,this.logger,this.allowInsecure,this.allowLocal,{...t,transformRequestInit:this.transformRequestInit})}toEvictionKey(e){return e.url.toString()}equals(e,t){return e.url.toString()===t.url.toString()}async convertToProvider(e,t){if(zt(e))return;const s=br(Array.isArray(e)?e:[e],this.allowInsecure,this.allowLocal);if(0===s.length)return;const i=vr(s[0]);return new Er(i,{logger:this.logger,transformRequestInit:this.transformRequestInit})}}class Ir{constructor(e,t={}){B(this,"allowInsecure"),B(this,"allowLocal"),B(this,"transformRequestInit"),B(this,"routing"),B(this,"log"),B(this,"logger"),this.log=e.logger.forComponent("helia:trustless-gateway-block-broker"),this.logger=e.logger,this.routing=e.routing,this.allowInsecure=t.allowInsecure??Pr,this.allowLocal=t.allowLocal??Rr,this.transformRequestInit=t.transformRequestInit}async retrieve(e,t={}){var s,i;const r=[];for await(const o of kr(e,this.routing,this.logger,this.allowInsecure,this.allowLocal,{...t,transformRequestInit:this.transformRequestInit})){this.log("getting block for %c from %s",e,o.url);try{const i=await o.getRawBlock(e,t);this.log.trace("got block for %c from %s",e,o.url);try{await(null==(s=t.validateFn)?void 0:s.call(t,i))}catch(n){this.log.error("failed to validate block for %c from %s",e,o.url,n);continue}return i}catch(n){if(this.log.error("failed to get block for %c from %s",e,o.url,n),n instanceof Error?r.push(n):r.push(new Error(`Unable to fetch raw block for CID ${e} from gateway ${o.url}`)),!0===(null==(i=t.signal)?void 0:i.aborted)){this.log.trace("request aborted while fetching raw block for CID %c from gateway %s",e,o.url);break}}}throw r.length>0?new AggregateError(r,`Unable to fetch raw block for CID ${e} from any gateway`):new Error(`Unable to fetch raw block for CID ${e} from any gateway`)}createSession(e={}){return t={logger:this.logger,routing:this.routing},s={...e,allowLocal:this.allowLocal,allowInsecure:this.allowInsecure,transformRequestInit:this.transformRequestInit},new Sr(t,s);var t,s}}const Pr=!1,Rr=!1,xr=2097152;function Ar(e={}){return t=>new Ir(t,e)}async function*Cr(e,t={}){const s=e.getReader();try{for(;;){const e=await s.read();if(e.done)return;yield e.value}}finally{!0!==t.preventCancel&&await s.cancel(),s.releaseLock()}}class Tr extends Error{constructor(){super(...arguments),B(this,"name","InvalidMessageLengthError"),B(this,"code","ERR_INVALID_MESSAGE_LENGTH")}}async function*Br(e,t={}){const s=/\r?\n/,i=new TextDecoder("utf8");let r="";for await(let n of e){if("string"==typeof n&&(n=(new TextEncoder).encode(n)),Ne(n)&&(n=n.subarray()),r+=i.decode(n,{stream:!0}),r.length>((null==t?void 0:t.maxMessageLength)??r.length))throw new Tr("Incoming message too long");const e=r.split(s);r=e.pop()??"";for(let t=0;t<e.length;t++)yield JSON.parse(e[t])}r+=i.decode(),""!==r&&(yield JSON.parse(r))}class Nr extends Error{constructor(e="Invalid request"){super(e),this.name="InvalidRequestError"}}B(Nr,"name","InvalidRequestError");class _r extends Error{constructor(e="Bad response"){super(e),this.name="BadResponseError"}}B(_r,"name","BadResponseError");const Dr=me("/ipns/");function Mr(e){return ge(e.subarray(0,Dr.byteLength),Dr)}class Lr{constructor(e){B(this,"client"),this.client=e}async*findProviders(e,t={}){yield*vs(this.client.getProviders(e,t),e=>({id:e.ID,multiaddrs:e.Addrs??[]}))}async provide(){}async cancelReprovide(){}async put(e,t,s){if(!Mr(e))return;const i=Ts(e),r=ue.createV1(114,i),n=Bs(t);await this.client.putIPNS(r,n,s)}async get(e,t){if(!Mr(e))throw new Et("Not found");const s=Ts(e),i=ue.createV1(114,s);try{const e=await this.client.getIPNS(i,t);return Ns(e)}catch(r){if("BadResponseError"===r.name)throw new Et("Not found");throw r}}}class Or{constructor(e){B(this,"client"),this.client=e}async findPeer(e,t={}){const s=await bs(this.client.getPeers(e,t));if(null!=s)return{id:s.ID,multiaddrs:s.Addrs??[]};throw new Et("Not found")}async*getClosestPeers(e,t={}){}}const Ur=$("delegated-routing-v1-http-api-client"),$r={concurrentRequests:4,timeout:3e4,cacheTTL:3e5,cacheName:"delegated-routing-v1-cache"};class Vr{constructor(e,t={}){D(this,h),B(this,"started"),B(this,"httpQueue"),B(this,"shutDownController"),B(this,"clientUrl"),B(this,"timeout"),B(this,"contentRouting"),B(this,"peerRouting"),B(this,"filterAddrs"),B(this,"filterProtocols"),B(this,"inFlightRequests"),B(this,"cacheName"),B(this,"cache"),B(this,"cacheTTL"),this.started=!1,this.shutDownController=new AbortController,qe(1/0,this.shutDownController.signal),this.httpQueue=new U({concurrency:t.concurrentRequests??$r.concurrentRequests}),this.inFlightRequests=new Map,this.clientUrl=e instanceof URL?e:new URL(e),this.timeout=t.timeout??$r.timeout,this.filterAddrs=t.filterAddrs,this.filterProtocols=t.filterProtocols,this.contentRouting=new Lr(this),this.peerRouting=new Or(this),this.cacheName=t.cacheName??$r.cacheName,this.cacheTTL=t.cacheTTL??$r.cacheTTL}get[z](){return this.contentRouting}get[G](){return this.peerRouting}isStarted(){return this.started}async start(){var e;this.started||(this.started=!0,this.cacheTTL>0&&(this.cache=await(null==(e=globalThis.caches)?void 0:e.open(this.cacheName)),null!=this.cache&&Ur("cache enabled with ttl %d",this.cacheTTL)))}async stop(){var e;this.httpQueue.clear(),this.shutDownController.abort(),await(null==(e=globalThis.caches)?void 0:e.delete(this.cacheName)),this.started=!1}async*getProviders(e,t={}){Ur("getProviders starts: %c",e);const s=AbortSignal.timeout(this.timeout),i=We([this.shutDownController.signal,s,t.signal]),r=vt(),n=vt();this.httpQueue.add(async()=>(r.resolve(),n.promise));try{await r.promise;const s=new URL(`${this.clientUrl}routing/v1/providers/${e.toString()}`);M(this,h,u).call(this,s,t.filterAddrs,t.filterProtocols);const n={headers:{Accept:"application/x-ndjson"},signal:i},o=await M(this,h,g).call(this,s.toString(),n);if(null==o)throw new _r("No response received");if(!o.ok){if(404===o.status)throw new Et("No matching records found");if(422===o.status)throw new Nr("Request does not conform to schema or semantic constraints");throw new _r(`Unexpected status code: ${o.status}`)}if(null==o.body)throw new _r("Routing response had no body");const a=o.headers.get("Content-Type");if(null==a)throw new _r("No Content-Type header received");if(null==a?void 0:a.startsWith("application/json")){const e=await o.json();for(const t of e.Providers){const e=M(this,h,d).call(this,t);null!=e&&(yield e)}}else{if(!a.includes("application/x-ndjson"))throw new _r(`Unsupported Content-Type: ${a}`);for await(const e of Br(Cr(o.body))){const t=M(this,h,d).call(this,e);null!=t&&(yield t)}}}finally{i.clear(),n.resolve(),Ur("getProviders finished: %c",e)}}async*getPeers(e,t={}){Ur("getPeers starts: %c",e);const s=AbortSignal.timeout(this.timeout),i=We([this.shutDownController.signal,s,t.signal]),r=vt(),n=vt();this.httpQueue.add(async()=>(r.resolve(),n.promise));try{await r.promise;const s=new URL(`${this.clientUrl}routing/v1/peers/${e.toCID().toString()}`);M(this,h,u).call(this,s,t.filterAddrs,t.filterProtocols);const n={headers:{Accept:"application/x-ndjson"},signal:i},o=await M(this,h,g).call(this,s.toString(),n);if(404===o.status)throw new Et("No matching records found");if(422===o.status)throw new Nr("Request does not conform to schema or semantic constraints");if(null==o.body)throw new _r("Routing response had no body");if("application/json"===o.headers.get("Content-Type")){const e=await o.json();for(const t of e.Peers){const e=M(this,h,d).call(this,t);null!=e&&(yield e)}}else for await(const e of Br(Cr(o.body))){const t=M(this,h,d).call(this,e);null!=t&&(yield t)}}catch(o){Ur.error("getPeers errored:",o)}finally{i.clear(),n.resolve(),Ur("getPeers finished: %c",e)}}async getIPNS(e,t={}){Ur("getIPNS starts: %s",e);const s=AbortSignal.timeout(this.timeout),i=We([this.shutDownController.signal,s,t.signal]),r=vt(),n=vt();this.httpQueue.add(async()=>(r.resolve(),n.promise));const o=`${this.clientUrl}routing/v1/ipns/${e}`;try{await r.promise;const s={headers:{Accept:"application/vnd.ipfs.ipns-record"},signal:i},n=await M(this,h,g).call(this,o,s);if(Ur("getIPNS GET %s %d",o,n.status),404===n.status)throw new Et("No matching records found");if(422===n.status)throw new Nr("Request does not conform to schema or semantic constraints");if(null==n.body)throw new _r("GET ipns response had no body");const a=await n.arrayBuffer(),l=new Uint8Array(a,0,a.byteLength);return!1!==t.validate&&await _s(Ds(e.multihash),l),Bs(l)}catch(a){throw Ur.error("getIPNS GET %s error:",o,a),a}finally{i.clear(),n.resolve(),Ur("getIPNS finished: %s",e)}}async putIPNS(e,t,s={}){Ur("putIPNS starts: %c",e);const i=AbortSignal.timeout(this.timeout),r=We([this.shutDownController.signal,i,s.signal]),n=vt(),o=vt();this.httpQueue.add(async()=>(n.resolve(),o.promise));const a=`${this.clientUrl}routing/v1/ipns/${e}`;try{await n.promise;const e={method:"PUT",headers:{"Content-Type":"application/vnd.ipfs.ipns-record"},body:Ns(t),signal:r},s=await M(this,h,g).call(this,a,e);if(Ur("putIPNS PUT %s %d",a,s.status),200!==s.status)throw new _r("PUT ipns response had status other than 200")}catch(l){throw Ur.error("putIPNS PUT %s error:",a,l.stack),l}finally{r.clear(),o.resolve(),Ur("putIPNS finished: %c",e)}}}h=new WeakSet,d=function(e){var t;try{const s=[],i=(null==(t=e.Addrs)?void 0:t.map(Qe))??[];return null!=e.Protocols&&s.push(...e.Protocols),null!=e.Protocol&&(s.push(e.Protocol),delete e.Protocol),{...e,Schema:"peer",ID:Gt(e.ID),Addrs:i,Protocols:s}}catch(s){Ur.error("could not conform record to peer schema",s)}},u=function(e,t,s){var i,r;if(null!=t||null!=this.filterAddrs){const s=(null==t?void 0:t.join(","))??(null==(i=this.filterAddrs)?void 0:i.join(","))??"";""!==s&&e.searchParams.set("filter-addrs",s)}if(null!=s||null!=this.filterProtocols){const t=(null==s?void 0:s.join(","))??(null==(r=this.filterProtocols)?void 0:r.join(","))??"";""!==t&&e.searchParams.set("filter-protocols",t)}},g=async function(e,t){var s,i;const r=t.method??"GET",n=`${r}-${e}`;if("GET"===r){const t=await(null==(s=this.cache)?void 0:s.match(e));if(null!=t){if(parseInt(t.headers.get("x-cache-expires")??"0",10)>Date.now())return Ur("returning cached response for %s",n),t;await(null==(i=this.cache)?void 0:i.delete(e))}}const o=this.inFlightRequests.get(n);if(null!=o){const e=await o;return Ur("deduplicating outgoing request for %s",n),e.clone()}const a=fetch(e,t).then(async t=>{if(null!=this.cache&&t.ok&&"GET"===r){const s=Date.now()+this.cacheTTL,i=new Headers(t.headers);i.set("x-cache-expires",s.toString());const r=new Response(t.clone().body,{status:t.status,statusText:t.statusText,headers:i});await this.cache.put(e,r)}return t}).finally(()=>{this.inFlightRequests.delete(n)});this.inFlightRequests.set(n,a);return await a};const Hr="[a-fA-F\\d:]",Fr=e=>e&&e.includeBoundaries?`(?:(?<=\\s|^)(?=${Hr})|(?<=${Hr})(?=\\s|$))`:"",qr="(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]\\d|\\d)(?:\\.(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]\\d|\\d)){3}",Wr="[a-fA-F\\d]{1,4}",zr=`\n(?:\n(?:${Wr}:){7}(?:${Wr}|:)|                                    // 1:2:3:4:5:6:7::  1:2:3:4:5:6:7:8\n(?:${Wr}:){6}(?:${qr}|:${Wr}|:)|                             // 1:2:3:4:5:6::    1:2:3:4:5:6::8   1:2:3:4:5:6::8  1:2:3:4:5:6::1.2.3.4\n(?:${Wr}:){5}(?::${qr}|(?::${Wr}){1,2}|:)|                   // 1:2:3:4:5::      1:2:3:4:5::7:8   1:2:3:4:5::8    1:2:3:4:5::7:1.2.3.4\n(?:${Wr}:){4}(?:(?::${Wr}){0,1}:${qr}|(?::${Wr}){1,3}|:)| // 1:2:3:4::        1:2:3:4::6:7:8   1:2:3:4::8      1:2:3:4::6:7:1.2.3.4\n(?:${Wr}:){3}(?:(?::${Wr}){0,2}:${qr}|(?::${Wr}){1,4}|:)| // 1:2:3::          1:2:3::5:6:7:8   1:2:3::8        1:2:3::5:6:7:1.2.3.4\n(?:${Wr}:){2}(?:(?::${Wr}){0,3}:${qr}|(?::${Wr}){1,5}|:)| // 1:2::            1:2::4:5:6:7:8   1:2::8          1:2::4:5:6:7:1.2.3.4\n(?:${Wr}:){1}(?:(?::${Wr}){0,4}:${qr}|(?::${Wr}){1,6}|:)| // 1::              1::3:4:5:6:7:8   1::8            1::3:4:5:6:7:1.2.3.4\n(?::(?:(?::${Wr}){0,5}:${qr}|(?::${Wr}){1,7}|:))             // ::2:3:4:5:6:7:8  ::2:3:4:5:6:7:8  ::8             ::1.2.3.4\n)(?:%[0-9a-zA-Z]{1,})?                                             // %eth0            %1\n`.replace(/\s*\/\/.*$/gm,"").replace(/\n/g,"").trim(),Gr=new RegExp(`(?:^${qr}$)|(?:^${zr}$)`),jr=new RegExp(`^${qr}$`),Kr=new RegExp(`^${zr}$`),Qr=e=>e&&e.exact?Gr:new RegExp(`(?:${Fr(e)}${qr}${Fr(e)})|(?:${Fr(e)}${zr}${Fr(e)})`,"g");Qr.v4=e=>e&&e.exact?jr:new RegExp(`${Fr(e)}${qr}${Fr(e)}`,"g"),Qr.v6=e=>e&&e.exact?Kr:new RegExp(`${Fr(e)}${zr}${Fr(e)}`,"g");const{toString:Jr}=Object.prototype;const Yr={global:"g",ignoreCase:"i",multiline:"m",dotAll:"s",sticky:"y",unicode:"u"};function Zr(e,t={}){if(s=e,"[object RegExp]"!==Jr.call(s))throw new TypeError("Expected a RegExp instance");var s;const i=Object.keys(Yr).map(s=>("boolean"==typeof t[s]?t[s]:e[s])?Yr[s]:"").join(""),r=new RegExp(t.source||e.source,i);return r.lastIndex="number"==typeof t.lastIndex?t.lastIndex:e.lastIndex,r}function Xr(e,t,{timeout:s}={}){try{return function(e){const t=(...t)=>e(...t);return Object.defineProperty(t,"name",{value:`functionTimeout(${e.name||"<anonymous>"})`,configurable:!0}),t}(()=>Zr(e).test(t))()}catch(i){throw i}}const en={timeout:400};function tn(e){return!(e.length>45)&&Xr(Qr.v6({exact:!0}),e,en)}const sn={http:"80",https:"443",ws:"80",wss:"443"},rn=["http","https","ws","wss"];function nn(e,t){const s=(t=t??{}).defaultDnsType??"dns",{scheme:i,hostname:r,port:n,path:o}=function(e){const[t]=e.split(":");rn.includes(t)||(e="http"+e.substring(t.length));let s,{protocol:i,hostname:r,port:n,pathname:o,search:a}=new URL(e);if(null==n||""===n){const e=function(e){if(null==e||""===e||null==sn[e])return;return sn[e]}(t);null!=e&&(n=e),null==e&&"http:"===i&&(n="80")}null!=o&&""!==o&&"/"!==o&&(o.startsWith("/")&&(o=o.substring(1)),s=o);null!=a&&""!==a&&(s=s??"",s+=a);return{scheme:t,hostname:r,port:n,path:s}}(e),a=[on(r,s),an(n,i),ln(i)];null!=o&&a.push(function(e){if(null==e||""===e)return;return["http-path",encodeURIComponent(e)]}(o));const l="/"+a.filter(e=>Boolean(e)).reduce((e,t)=>e.concat(t),[]).join("/");return Qe(l)}function on(e,t){if(null!=e&&""!==e){if(!((s=e).length>15)&&Xr(Qr.v4({exact:!0}),s,en))return["ip4",e];var s;if(tn(e))return["ip6",e];if("["===e[0]){const t=e.substring(1,e.length-1);if(tn(t))return["ip6",t]}return[t,e]}}function an(e,t){if(null!=e&&""!==e)return"udp"===t?["udp",e]:["tcp",e]}function ln(e){if(null==e.match(/^tcp$|^udp$/))return"https"===e?["/tls/http"]:"wss"===e?["/tls/ws"]:[e]}const cn=["https://trustless-gateway.link","https://4everland.io"];class hn{constructor(e={}){B(this,"gateways"),B(this,"shuffle"),this.gateways=(e.gateways??cn).map(e=>function(e){return e=e.toString(),{id:jt(ue.createV1(2336,ve.digest(me(e)))),multiaddrs:[nn(e)]}}(e)),this.shuffle=e.shuffle??!0}async*findProviders(e,t){yield*(this.shuffle?this.gateways.toSorted(()=>Math.random()>.5?1:-1):this.gateways).map(e=>({...e,protocols:["transport-ipfs-gateway-http"]}))}}function dn(e={}){return new hn(e)}class un{constructor(e){B(this,"libp2p"),this.libp2p=e}async provide(e,t){await this.libp2p.contentRouting.provide(e,t)}async cancelReprovide(e,t){await this.libp2p.contentRouting.cancelReprovide(e,t)}async*findProviders(e,t){yield*this.libp2p.contentRouting.findProviders(e,t)}async put(e,t,s){await this.libp2p.contentRouting.put(e,t,s)}async get(e,t){return this.libp2p.contentRouting.get(e,t)}async findPeer(e,t){return this.libp2p.peerRouting.findPeer(e,t)}async*getClosestPeers(e,t){yield*this.libp2p.peerRouting.getClosestPeers(e,t)}}function gn(e){return new un(e)}class pn extends ui{constructor(){super(),B(this,"data"),this.data=new Map}put(e,t,s){var i;return null==(i=null==s?void 0:s.signal)||i.throwIfAborted(),this.data.set(_e.encode(e.multihash.bytes),t),e}get(e,t){var s;null==(s=null==t?void 0:t.signal)||s.throwIfAborted();const i=this.data.get(_e.encode(e.multihash.bytes));if(null==i)throw new W;return i}has(e,t){var s;return null==(s=null==t?void 0:t.signal)||s.throwIfAborted(),this.data.has(_e.encode(e.multihash.bytes))}async delete(e,t){var s;null==(s=null==t?void 0:t.signal)||s.throwIfAborted(),this.data.delete(_e.encode(e.multihash.bytes))}async*getAll(e){var t,s;null==(t=null==e?void 0:e.signal)||t.throwIfAborted();for(const[i,r]of this.data.entries())yield{cid:ue.createV1(ws,De(_e.decode(i))),block:r},null==(s=null==e?void 0:e.signal)||s.throwIfAborted()}}$("blockstore:core:tiered");function fn(e){return e>=55296&&e<=56319}function mn(e){return e>=56320&&e<=57343}new H("SHARDING"),$("datastore:core:tiered");function wn(e){return e>=55296&&e<=56319}function yn(e){return e>=56320&&e<=57343}var vn=function(e,t,s){if("string"!=typeof t)throw new Error("Input must be string");for(var i,r,n=t.length,o=0,a=0;a<n;a+=1){if(i=t.charCodeAt(a),r=t[a],fn(i)&&mn(t.charCodeAt(a+1))&&(r+=t[a+=1]),(o+=e(r))===s)return t.slice(0,a+1);if(o>s)return t.slice(0,a-r.length+1)}return t}.bind(null,function(e){if("string"!=typeof e)throw new Error("Input must be string");for(var t=e.length,s=0,i=null,r=null,n=0;n<t;n++)yn(i=e.charCodeAt(n))?null!=r&&wn(r)?s+=1:s+=3:i<=127?s+=1:i>=128&&i<=2047?s+=2:i>=2048&&i<=65535&&(s+=3),r=i;return s}),bn=/[\/\?<>\\:\*\|"]/g,kn=/[\x00-\x1f\x80-\x9f]/g,En=/^\.+$/,Sn=/^(con|prn|aux|nul|com[0-9]|lpt[0-9])(\..*)?$/i,In=/[\. ]+$/;function Pn(e,t){if("string"!=typeof e)throw new Error("Input must be string");var s=e.replace(bn,t).replace(kn,t).replace(En,t).replace(Sn,t).replace(In,t);return vn(s,255)}const Rn=Vs(function(e,t){var s=t&&t.replacement||"",i=Pn(e,s);return""===s?i:Pn(i,"")}),xn={alg:"A128GCM",ext:!0,k:"scm9jmO_4BJAgdwWGVulLg",key_ops:["encrypt","decrypt"],kty:"oct"};function An(e){const t="AES-GCM";let s=16;const i="SHA-256",r=32767,n=Kt.get();s*=8;return{encrypt:async function(e,o){const a=n.getRandomValues(new Uint8Array(16)),l=n.getRandomValues(new Uint8Array(12)),c={name:t,iv:l};let h;if("string"==typeof o&&(o=me(o)),0===o.length){h=await n.subtle.importKey("jwk",xn,{name:"AES-GCM"},!0,["encrypt"]);try{const e={name:"PBKDF2",salt:a,iterations:r,hash:{name:i}},l=await n.subtle.importKey("raw",o,{name:"PBKDF2"},!1,["deriveKey"]);h=await n.subtle.deriveKey(e,l,{name:t,length:s},!0,["encrypt"])}catch{h=await n.subtle.importKey("jwk",xn,{name:"AES-GCM"},!0,["encrypt"])}}else{const e={name:"PBKDF2",salt:a,iterations:r,hash:{name:i}},l=await n.subtle.importKey("raw",o,{name:"PBKDF2"},!1,["deriveKey"]);h=await n.subtle.deriveKey(e,l,{name:t,length:s},!0,["encrypt"])}const d=await n.subtle.encrypt(c,h,e);return Me([a,c.iv,new Uint8Array(d)])},decrypt:async function(e,o){const a=e.subarray(0,16),l=e.subarray(16,28),c=e.subarray(28),h={name:t,iv:l};let d;if("string"==typeof o&&(o=me(o)),0===o.length)try{const e={name:"PBKDF2",salt:a,iterations:r,hash:{name:i}},l=await n.subtle.importKey("raw",o,{name:"PBKDF2"},!1,["deriveKey"]);d=await n.subtle.deriveKey(e,l,{name:t,length:s},!0,["decrypt"])}catch{d=await n.subtle.importKey("jwk",xn,{name:"AES-GCM"},!0,["decrypt"])}else{const e={name:"PBKDF2",salt:a,iterations:r,hash:{name:i}},l=await n.subtle.importKey("raw",o,{name:"PBKDF2"},!1,["deriveKey"]);d=await n.subtle.deriveKey(e,l,{name:t,length:s},!0,["decrypt"])}const u=await n.subtle.decrypt(h,d,c);return new Uint8Array(u)}}}
/*!
 * MIT License
 * 
 * Copyright (c) 2017-2024 Peculiar Ventures, LLC
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 * 
 */class Cn{static isArrayBuffer(e){return"[object ArrayBuffer]"===Object.prototype.toString.call(e)}static toArrayBuffer(e){return this.isArrayBuffer(e)?e:e.byteLength===e.buffer.byteLength||0===e.byteOffset&&e.byteLength===e.buffer.byteLength?e.buffer:this.toUint8Array(e.buffer).slice(e.byteOffset,e.byteOffset+e.byteLength).buffer}static toUint8Array(e){return this.toView(e,Uint8Array)}static toView(e,t){if(e.constructor===t)return e;if(this.isArrayBuffer(e))return new t(e);if(this.isArrayBufferView(e))return new t(e.buffer,e.byteOffset,e.byteLength);throw new TypeError("The provided value is not of type '(ArrayBuffer or ArrayBufferView)'")}static isBufferSource(e){return this.isArrayBufferView(e)||this.isArrayBuffer(e)}static isArrayBufferView(e){return ArrayBuffer.isView(e)||e&&this.isArrayBuffer(e.buffer)}static isEqual(e,t){const s=Cn.toUint8Array(e),i=Cn.toUint8Array(t);if(s.length!==i.byteLength)return!1;for(let r=0;r<s.length;r++)if(s[r]!==i[r])return!1;return!0}static concat(...e){let t;t=!Array.isArray(e[0])||e[1]instanceof Function?Array.isArray(e[0])&&e[1]instanceof Function?e[0]:e[e.length-1]instanceof Function?e.slice(0,e.length-1):e:e[0];let s=0;for(const n of t)s+=n.byteLength;const i=new Uint8Array(s);let r=0;for(const n of t){const e=this.toUint8Array(n);i.set(e,r),r+=e.length}return e[e.length-1]instanceof Function?this.toView(i,e[e.length-1]):i.buffer}}const Tn="string",Bn=/^[0-9a-f\s]+$/i,Nn=/^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$/,_n=/^[a-zA-Z0-9-_]+$/;class Dn{static fromString(e){const t=unescape(encodeURIComponent(e)),s=new Uint8Array(t.length);for(let i=0;i<t.length;i++)s[i]=t.charCodeAt(i);return s.buffer}static toString(e){const t=Cn.toUint8Array(e);let s="";for(let i=0;i<t.length;i++)s+=String.fromCharCode(t[i]);return decodeURIComponent(escape(s))}}class Mn{static toString(e,t=!1){const s=Cn.toArrayBuffer(e),i=new DataView(s);let r="";for(let n=0;n<s.byteLength;n+=2){const e=i.getUint16(n,t);r+=String.fromCharCode(e)}return r}static fromString(e,t=!1){const s=new ArrayBuffer(2*e.length),i=new DataView(s);for(let r=0;r<e.length;r++)i.setUint16(2*r,e.charCodeAt(r),t);return s}}class Ln{static isHex(e){return typeof e===Tn&&Bn.test(e)}static isBase64(e){return typeof e===Tn&&Nn.test(e)}static isBase64Url(e){return typeof e===Tn&&_n.test(e)}static ToString(e,t="utf8"){const s=Cn.toUint8Array(e);switch(t.toLowerCase()){case"utf8":return this.ToUtf8String(s);case"binary":return this.ToBinary(s);case"hex":return this.ToHex(s);case"base64":return this.ToBase64(s);case"base64url":return this.ToBase64Url(s);case"utf16le":return Mn.toString(s,!0);case"utf16":case"utf16be":return Mn.toString(s);default:throw new Error(`Unknown type of encoding '${t}'`)}}static FromString(e,t="utf8"){if(!e)return new ArrayBuffer(0);switch(t.toLowerCase()){case"utf8":return this.FromUtf8String(e);case"binary":return this.FromBinary(e);case"hex":return this.FromHex(e);case"base64":return this.FromBase64(e);case"base64url":return this.FromBase64Url(e);case"utf16le":return Mn.fromString(e,!0);case"utf16":case"utf16be":return Mn.fromString(e);default:throw new Error(`Unknown type of encoding '${t}'`)}}static ToBase64(e){const t=Cn.toUint8Array(e);if("undefined"!=typeof btoa){const e=this.ToString(t,"binary");return btoa(e)}return Buffer.from(t).toString("base64")}static FromBase64(e){const t=this.formatString(e);if(!t)return new ArrayBuffer(0);if(!Ln.isBase64(t))throw new TypeError("Argument 'base64Text' is not Base64 encoded");return"undefined"!=typeof atob?this.FromBinary(atob(t)):new Uint8Array(Buffer.from(t,"base64")).buffer}static FromBase64Url(e){const t=this.formatString(e);if(!t)return new ArrayBuffer(0);if(!Ln.isBase64Url(t))throw new TypeError("Argument 'base64url' is not Base64Url encoded");return this.FromBase64(this.Base64Padding(t.replace(/\-/g,"+").replace(/\_/g,"/")))}static ToBase64Url(e){return this.ToBase64(e).replace(/\+/g,"-").replace(/\//g,"_").replace(/\=/g,"")}static FromUtf8String(e,t=Ln.DEFAULT_UTF8_ENCODING){switch(t){case"ascii":return this.FromBinary(e);case"utf8":return Dn.fromString(e);case"utf16":case"utf16be":return Mn.fromString(e);case"utf16le":case"usc2":return Mn.fromString(e,!0);default:throw new Error(`Unknown type of encoding '${t}'`)}}static ToUtf8String(e,t=Ln.DEFAULT_UTF8_ENCODING){switch(t){case"ascii":return this.ToBinary(e);case"utf8":return Dn.toString(e);case"utf16":case"utf16be":return Mn.toString(e);case"utf16le":case"usc2":return Mn.toString(e,!0);default:throw new Error(`Unknown type of encoding '${t}'`)}}static FromBinary(e){const t=e.length,s=new Uint8Array(t);for(let i=0;i<t;i++)s[i]=e.charCodeAt(i);return s.buffer}static ToBinary(e){const t=Cn.toUint8Array(e);let s="";for(let i=0;i<t.length;i++)s+=String.fromCharCode(t[i]);return s}static ToHex(e){const t=Cn.toUint8Array(e);let s="";const i=t.length;for(let r=0;r<i;r++){const e=t[r];e<16&&(s+="0"),s+=e.toString(16)}return s}static FromHex(e){let t=this.formatString(e);if(!t)return new ArrayBuffer(0);if(!Ln.isHex(t))throw new TypeError("Argument 'hexString' is not HEX encoded");t.length%2&&(t=`0${t}`);const s=new Uint8Array(t.length/2);for(let i=0;i<t.length;i+=2){const e=t.slice(i,i+2);s[i/2]=parseInt(e,16)}return s.buffer}static ToUtf16String(e,t=!1){return Mn.toString(e,t)}static FromUtf16String(e,t=!1){return Mn.fromString(e,t)}static Base64Padding(e){const t=4-e.length%4;if(t<4)for(let s=0;s<t;s++)e+="=";return e}static formatString(e){return(null==e?void 0:e.replace(/[\n\r\t ]/g,""))||""}}
/*!
 Copyright (c) Peculiar Ventures, LLC
*/
function On(e,t){let s=0;if(1===e.length)return e[0];for(let i=e.length-1;i>=0;i--)s+=e[e.length-1-i]*Math.pow(2,t*i);return s}function Un(e,t,s=-1){const i=s;let r=e,n=0,o=Math.pow(2,t);for(let a=1;a<8;a++){if(e<o){let e;if(i<0)e=new ArrayBuffer(a),n=a;else{if(i<a)return new ArrayBuffer(0);e=new ArrayBuffer(i),n=i}const s=new Uint8Array(e);for(let i=a-1;i>=0;i--){const e=Math.pow(2,i*t);s[n-i-1]=Math.floor(r/e),r-=s[n-i-1]*e}return e}o*=Math.pow(2,t)}return new ArrayBuffer(0)}function $n(...e){let t=0,s=0;for(const n of e)t+=n.length;const i=new ArrayBuffer(t),r=new Uint8Array(i);for(const n of e)r.set(n,s),s+=n.length;return r}function Vn(){const e=new Uint8Array(this.valueHex);if(this.valueHex.byteLength>=2){const t=255===e[0]&&128&e[1],s=0===e[0]&&!(128&e[1]);(t||s)&&this.warnings.push("Needlessly long format")}const t=new ArrayBuffer(this.valueHex.byteLength),s=new Uint8Array(t);for(let o=0;o<this.valueHex.byteLength;o++)s[o]=0;s[0]=128&e[0];const i=On(s,8),r=new ArrayBuffer(this.valueHex.byteLength),n=new Uint8Array(r);for(let o=0;o<this.valueHex.byteLength;o++)n[o]=e[o];n[0]&=127;return On(n,8)-i}function Hn(e,t){const s=e.toString(10);if(t<s.length)return"";const i=t-s.length,r=new Array(i);for(let n=0;n<i;n++)r[n]="0";return r.join("").concat(s)}
/*!
 * Copyright (c) 2014, GMO GlobalSign
 * Copyright (c) 2015-2022, Peculiar Ventures
 * All rights reserved.
 * 
 * Author 2014-2019, Yury Strozhevsky
 * 
 * Redistribution and use in source and binary forms, with or without modification,
 * are permitted provided that the following conditions are met:
 * 
 * * Redistributions of source code must retain the above copyright notice, this
 *   list of conditions and the following disclaimer.
 * 
 * * Redistributions in binary form must reproduce the above copyright notice, this
 *   list of conditions and the following disclaimer in the documentation and/or
 *   other materials provided with the distribution.
 * 
 * * Neither the name of the copyright holder nor the names of its
 *   contributors may be used to endorse or promote products derived from
 *   this software without specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR
 * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
 * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 * 
 */function Fn(){if("undefined"==typeof BigInt)throw new Error("BigInt is not defined. Your environment doesn't implement BigInt.")}function qn(e){let t=0,s=0;for(let r=0;r<e.length;r++){t+=e[r].byteLength}const i=new Uint8Array(t);for(let r=0;r<e.length;r++){const t=e[r];i.set(new Uint8Array(t),s),s+=t.byteLength}return i.buffer}function Wn(e,t,s,i){return t instanceof Uint8Array?t.byteLength?s<0?(e.error="Wrong parameter: inputOffset less than zero",!1):i<0?(e.error="Wrong parameter: inputLength less than zero",!1):!(t.byteLength-s-i<0)||(e.error="End of input reached before message was fully decoded (inconsistent offset and length values)",!1):(e.error="Wrong parameter: inputBuffer has zero length",!1):(e.error="Wrong parameter: inputBuffer must be 'Uint8Array'",!1)}Ln.DEFAULT_UTF8_ENCODING="utf8";class zn{constructor(){this.items=[]}write(e){this.items.push(e)}final(){return qn(this.items)}}const Gn=[new Uint8Array([1])],jn="0123456789",Kn="",Qn=new ArrayBuffer(0),Jn=new Uint8Array(0),Yn="EndOfContent",Zn="OCTET STRING",Xn="BIT STRING";function eo(e){var t;return(t=class extends e{get valueHex(){return this.valueHexView.slice().buffer}set valueHex(e){this.valueHexView=new Uint8Array(e)}constructor(...e){var t;super(...e);const s=e[0]||{};this.isHexOnly=null!==(t=s.isHexOnly)&&void 0!==t&&t,this.valueHexView=s.valueHex?Cn.toUint8Array(s.valueHex):Jn}fromBER(e,t,s){const i=e instanceof ArrayBuffer?new Uint8Array(e):e;if(!Wn(this,i,t,s))return-1;const r=t+s;return this.valueHexView=i.subarray(t,r),this.valueHexView.length?(this.blockLength=s,r):(this.warnings.push("Zero buffer length"),t)}toBER(e=!1){return this.isHexOnly?e?new ArrayBuffer(this.valueHexView.byteLength):this.valueHexView.byteLength===this.valueHexView.buffer.byteLength?this.valueHexView.buffer:this.valueHexView.slice().buffer:(this.error="Flag 'isHexOnly' is not set, abort",Qn)}toJSON(){return{...super.toJSON(),isHexOnly:this.isHexOnly,valueHex:Ln.ToHex(this.valueHexView)}}}).NAME="hexBlock",t}class to{static blockName(){return this.NAME}get valueBeforeDecode(){return this.valueBeforeDecodeView.slice().buffer}set valueBeforeDecode(e){this.valueBeforeDecodeView=new Uint8Array(e)}constructor({blockLength:e=0,error:t="",warnings:s=[],valueBeforeDecode:i=Jn}={}){this.blockLength=e,this.error=t,this.warnings=s,this.valueBeforeDecodeView=Cn.toUint8Array(i)}toJSON(){return{blockName:this.constructor.NAME,blockLength:this.blockLength,error:this.error,warnings:this.warnings,valueBeforeDecode:Ln.ToHex(this.valueBeforeDecodeView)}}}to.NAME="baseBlock";class so extends to{fromBER(e,t,s){throw TypeError("User need to make a specific function in a class which extends 'ValueBlock'")}toBER(e,t){throw TypeError("User need to make a specific function in a class which extends 'ValueBlock'")}}so.NAME="valueBlock";class io extends(eo(to)){constructor({idBlock:e={}}={}){var t,s,i,r;super(),e?(this.isHexOnly=null!==(t=e.isHexOnly)&&void 0!==t&&t,this.valueHexView=e.valueHex?Cn.toUint8Array(e.valueHex):Jn,this.tagClass=null!==(s=e.tagClass)&&void 0!==s?s:-1,this.tagNumber=null!==(i=e.tagNumber)&&void 0!==i?i:-1,this.isConstructed=null!==(r=e.isConstructed)&&void 0!==r&&r):(this.tagClass=-1,this.tagNumber=-1,this.isConstructed=!1)}toBER(e=!1){let t=0;switch(this.tagClass){case 1:t|=0;break;case 2:t|=64;break;case 3:t|=128;break;case 4:t|=192;break;default:return this.error="Unknown tag class",Qn}if(this.isConstructed&&(t|=32),this.tagNumber<31&&!this.isHexOnly){const s=new Uint8Array(1);if(!e){let e=this.tagNumber;e&=31,t|=e,s[0]=t}return s.buffer}if(!this.isHexOnly){const s=Un(this.tagNumber,7),i=new Uint8Array(s),r=s.byteLength,n=new Uint8Array(r+1);if(n[0]=31|t,!e){for(let e=0;e<r-1;e++)n[e+1]=128|i[e];n[r]=i[r-1]}return n.buffer}const s=new Uint8Array(this.valueHexView.byteLength+1);if(s[0]=31|t,!e){const e=this.valueHexView;for(let t=0;t<e.length-1;t++)s[t+1]=128|e[t];s[this.valueHexView.byteLength]=e[e.length-1]}return s.buffer}fromBER(e,t,s){const i=Cn.toUint8Array(e);if(!Wn(this,i,t,s))return-1;const r=i.subarray(t,t+s);if(0===r.length)return this.error="Zero buffer length",-1;switch(192&r[0]){case 0:this.tagClass=1;break;case 64:this.tagClass=2;break;case 128:this.tagClass=3;break;case 192:this.tagClass=4;break;default:return this.error="Unknown tag class",-1}this.isConstructed=!(32&~r[0]),this.isHexOnly=!1;const n=31&r[0];if(31!==n)this.tagNumber=n,this.blockLength=1;else{let e=1,t=this.valueHexView=new Uint8Array(255),s=255;for(;128&r[e];){if(t[e-1]=127&r[e],e++,e>=r.length)return this.error="End of input reached before message was fully decoded",-1;if(e===s){s+=255;const e=new Uint8Array(s);for(let s=0;s<t.length;s++)e[s]=t[s];t=this.valueHexView=new Uint8Array(s)}}this.blockLength=e+1,t[e-1]=127&r[e];const i=new Uint8Array(e);for(let r=0;r<e;r++)i[r]=t[r];t=this.valueHexView=new Uint8Array(e),t.set(i),this.blockLength<=9?this.tagNumber=On(t,7):(this.isHexOnly=!0,this.warnings.push("Tag too long, represented as hex-coded"))}if(1===this.tagClass&&this.isConstructed)switch(this.tagNumber){case 1:case 2:case 5:case 6:case 9:case 13:case 14:case 23:case 24:case 31:case 32:case 33:case 34:return this.error="Constructed encoding used for primitive type",-1}return t+this.blockLength}toJSON(){return{...super.toJSON(),tagClass:this.tagClass,tagNumber:this.tagNumber,isConstructed:this.isConstructed}}}io.NAME="identificationBlock";class ro extends to{constructor({lenBlock:e={}}={}){var t,s,i;super(),this.isIndefiniteForm=null!==(t=e.isIndefiniteForm)&&void 0!==t&&t,this.longFormUsed=null!==(s=e.longFormUsed)&&void 0!==s&&s,this.length=null!==(i=e.length)&&void 0!==i?i:0}fromBER(e,t,s){const i=Cn.toUint8Array(e);if(!Wn(this,i,t,s))return-1;const r=i.subarray(t,t+s);if(0===r.length)return this.error="Zero buffer length",-1;if(255===r[0])return this.error="Length block 0xFF is reserved by standard",-1;if(this.isIndefiniteForm=128===r[0],this.isIndefiniteForm)return this.blockLength=1,t+this.blockLength;if(this.longFormUsed=!!(128&r[0]),!1===this.longFormUsed)return this.length=r[0],this.blockLength=1,t+this.blockLength;const n=127&r[0];if(n>8)return this.error="Too big integer",-1;if(n+1>r.length)return this.error="End of input reached before message was fully decoded",-1;const o=t+1,a=i.subarray(o,o+n);return 0===a[n-1]&&this.warnings.push("Needlessly long encoded length"),this.length=On(a,8),this.longFormUsed&&this.length<=127&&this.warnings.push("Unnecessary usage of long length form"),this.blockLength=n+1,t+this.blockLength}toBER(e=!1){let t,s;if(this.length>127&&(this.longFormUsed=!0),this.isIndefiniteForm)return t=new ArrayBuffer(1),!1===e&&(s=new Uint8Array(t),s[0]=128),t;if(this.longFormUsed){const i=Un(this.length,8);if(i.byteLength>127)return this.error="Too big length",Qn;if(t=new ArrayBuffer(i.byteLength+1),e)return t;const r=new Uint8Array(i);s=new Uint8Array(t),s[0]=128|i.byteLength;for(let e=0;e<i.byteLength;e++)s[e+1]=r[e];return t}return t=new ArrayBuffer(1),!1===e&&(s=new Uint8Array(t),s[0]=this.length),t}toJSON(){return{...super.toJSON(),isIndefiniteForm:this.isIndefiniteForm,longFormUsed:this.longFormUsed,length:this.length}}}ro.NAME="lengthBlock";const no={};class oo extends to{constructor({name:e="",optional:t=!1,primitiveSchema:s,...i}={},r){super(i),this.name=e,this.optional=t,s&&(this.primitiveSchema=s),this.idBlock=new io(i),this.lenBlock=new ro(i),this.valueBlock=r?new r(i):new so(i)}fromBER(e,t,s){const i=this.valueBlock.fromBER(e,t,this.lenBlock.isIndefiniteForm?s:this.lenBlock.length);return-1===i?(this.error=this.valueBlock.error,i):(this.idBlock.error.length||(this.blockLength+=this.idBlock.blockLength),this.lenBlock.error.length||(this.blockLength+=this.lenBlock.blockLength),this.valueBlock.error.length||(this.blockLength+=this.valueBlock.blockLength),i)}toBER(e,t){const s=t||new zn;t||ao(this);const i=this.idBlock.toBER(e);if(s.write(i),this.lenBlock.isIndefiniteForm)s.write(new Uint8Array([128]).buffer),this.valueBlock.toBER(e,s),s.write(new ArrayBuffer(2));else{const t=this.valueBlock.toBER(e);this.lenBlock.length=t.byteLength;const i=this.lenBlock.toBER(e);s.write(i),s.write(t)}return t?Qn:s.final()}toJSON(){const e={...super.toJSON(),idBlock:this.idBlock.toJSON(),lenBlock:this.lenBlock.toJSON(),valueBlock:this.valueBlock.toJSON(),name:this.name,optional:this.optional};return this.primitiveSchema&&(e.primitiveSchema=this.primitiveSchema.toJSON()),e}toString(e="ascii"){return"ascii"===e?this.onAsciiEncoding():Ln.ToHex(this.toBER())}onAsciiEncoding(){return`${this.constructor.NAME} : ${Ln.ToHex(this.valueBlock.valueBeforeDecodeView)}`}isEqual(e){if(this===e)return!0;if(!(e instanceof this.constructor))return!1;return function(e,t){if(e.byteLength!==t.byteLength)return!1;const s=new Uint8Array(e),i=new Uint8Array(t);for(let r=0;r<s.length;r++)if(s[r]!==i[r])return!1;return!0}(this.toBER(),e.toBER())}}function ao(e){var t;if(e instanceof no.Constructed)for(const s of e.valueBlock.value)ao(s)&&(e.lenBlock.isIndefiniteForm=!0);return!!(null===(t=e.lenBlock)||void 0===t?void 0:t.isIndefiniteForm)}oo.NAME="BaseBlock";class lo extends oo{getValue(){return this.valueBlock.value}setValue(e){this.valueBlock.value=e}constructor({value:e="",...t}={},s){super(t,s),e&&this.fromString(e)}fromBER(e,t,s){const i=this.valueBlock.fromBER(e,t,this.lenBlock.isIndefiniteForm?s:this.lenBlock.length);return-1===i?(this.error=this.valueBlock.error,i):(this.fromBuffer(this.valueBlock.valueHexView),this.idBlock.error.length||(this.blockLength+=this.idBlock.blockLength),this.lenBlock.error.length||(this.blockLength+=this.lenBlock.blockLength),this.valueBlock.error.length||(this.blockLength+=this.valueBlock.blockLength),i)}onAsciiEncoding(){return`${this.constructor.NAME} : '${this.valueBlock.value}'`}}lo.NAME="BaseStringBlock";class co extends(eo(so)){constructor({isHexOnly:e=!0,...t}={}){super(t),this.isHexOnly=e}}var ho,uo,go,po,fo;co.NAME="PrimitiveValueBlock";class mo extends oo{constructor(e={}){super(e,co),this.idBlock.isConstructed=!1}}function wo(e,t=0,s=e.length){const i=t;let r=new oo({},so);const n=new to;if(!Wn(n,e,t,s))return r.error=n.error,{offset:-1,result:r};if(!e.subarray(t,t+s).length)return r.error="Zero buffer length",{offset:-1,result:r};let o=r.idBlock.fromBER(e,t,s);if(r.idBlock.warnings.length&&r.warnings.concat(r.idBlock.warnings),-1===o)return r.error=r.idBlock.error,{offset:-1,result:r};if(t=o,s-=r.idBlock.blockLength,o=r.lenBlock.fromBER(e,t,s),r.lenBlock.warnings.length&&r.warnings.concat(r.lenBlock.warnings),-1===o)return r.error=r.lenBlock.error,{offset:-1,result:r};if(t=o,s-=r.lenBlock.blockLength,!r.idBlock.isConstructed&&r.lenBlock.isIndefiniteForm)return r.error="Indefinite length form used for primitive encoding form",{offset:-1,result:r};let a=oo;if(1===r.idBlock.tagClass){if(r.idBlock.tagNumber>=37&&!1===r.idBlock.isHexOnly)return r.error="UNIVERSAL 37 and upper tags are reserved by ASN.1 standard",{offset:-1,result:r};switch(r.idBlock.tagNumber){case 0:if(r.idBlock.isConstructed&&r.lenBlock.length>0)return r.error="Type [UNIVERSAL 0] is reserved",{offset:-1,result:r};a=no.EndOfContent;break;case 1:a=no.Boolean;break;case 2:a=no.Integer;break;case 3:a=no.BitString;break;case 4:a=no.OctetString;break;case 5:a=no.Null;break;case 6:a=no.ObjectIdentifier;break;case 10:a=no.Enumerated;break;case 12:a=no.Utf8String;break;case 13:a=no.RelativeObjectIdentifier;break;case 14:a=no.TIME;break;case 15:return r.error="[UNIVERSAL 15] is reserved by ASN.1 standard",{offset:-1,result:r};case 16:a=no.Sequence;break;case 17:a=no.Set;break;case 18:a=no.NumericString;break;case 19:a=no.PrintableString;break;case 20:a=no.TeletexString;break;case 21:a=no.VideotexString;break;case 22:a=no.IA5String;break;case 23:a=no.UTCTime;break;case 24:a=no.GeneralizedTime;break;case 25:a=no.GraphicString;break;case 26:a=no.VisibleString;break;case 27:a=no.GeneralString;break;case 28:a=no.UniversalString;break;case 29:a=no.CharacterString;break;case 30:a=no.BmpString;break;case 31:a=no.DATE;break;case 32:a=no.TimeOfDay;break;case 33:a=no.DateTime;break;case 34:a=no.Duration;break;default:{const e=r.idBlock.isConstructed?new no.Constructed:new no.Primitive;e.idBlock=r.idBlock,e.lenBlock=r.lenBlock,e.warnings=r.warnings,r=e}}}else a=r.idBlock.isConstructed?no.Constructed:no.Primitive;return r=function(e,t){if(e instanceof t)return e;const s=new t;return s.idBlock=e.idBlock,s.lenBlock=e.lenBlock,s.warnings=e.warnings,s.valueBeforeDecodeView=e.valueBeforeDecodeView,s}(r,a),o=r.fromBER(e,t,r.lenBlock.isIndefiniteForm?s:r.lenBlock.length),r.valueBeforeDecodeView=e.subarray(i,i+r.blockLength),{offset:o,result:r}}function yo(e){if(!e.byteLength){const e=new oo({},so);return e.error="Input buffer has zero length",{offset:-1,result:e}}return wo(Cn.toUint8Array(e).slice(),0,e.byteLength)}function vo(e,t){return e?1:t}ho=mo,no.Primitive=ho,mo.NAME="PRIMITIVE";class bo extends so{constructor({value:e=[],isIndefiniteForm:t=!1,...s}={}){super(s),this.value=e,this.isIndefiniteForm=t}fromBER(e,t,s){const i=Cn.toUint8Array(e);if(!Wn(this,i,t,s))return-1;if(this.valueBeforeDecodeView=i.subarray(t,t+s),0===this.valueBeforeDecodeView.length)return this.warnings.push("Zero buffer length"),t;let r=t;for(;vo(this.isIndefiniteForm,s)>0;){const e=wo(i,r,s);if(-1===e.offset)return this.error=e.result.error,this.warnings.concat(e.result.warnings),-1;if(r=e.offset,this.blockLength+=e.result.blockLength,s-=e.result.blockLength,this.value.push(e.result),this.isIndefiniteForm&&e.result.constructor.NAME===Yn)break}return this.isIndefiniteForm&&(this.value[this.value.length-1].constructor.NAME===Yn?this.value.pop():this.warnings.push("No EndOfContent block encoded")),r}toBER(e,t){const s=t||new zn;for(let i=0;i<this.value.length;i++)this.value[i].toBER(e,s);return t?Qn:s.final()}toJSON(){const e={...super.toJSON(),isIndefiniteForm:this.isIndefiniteForm,value:[]};for(const t of this.value)e.value.push(t.toJSON());return e}}bo.NAME="ConstructedValueBlock";class ko extends oo{constructor(e={}){super(e,bo),this.idBlock.isConstructed=!0}fromBER(e,t,s){this.valueBlock.isIndefiniteForm=this.lenBlock.isIndefiniteForm;const i=this.valueBlock.fromBER(e,t,this.lenBlock.isIndefiniteForm?s:this.lenBlock.length);return-1===i?(this.error=this.valueBlock.error,i):(this.idBlock.error.length||(this.blockLength+=this.idBlock.blockLength),this.lenBlock.error.length||(this.blockLength+=this.lenBlock.blockLength),this.valueBlock.error.length||(this.blockLength+=this.valueBlock.blockLength),i)}onAsciiEncoding(){const e=[];for(const s of this.valueBlock.value)e.push(s.toString("ascii").split("\n").map(e=>`  ${e}`).join("\n"));const t=3===this.idBlock.tagClass?`[${this.idBlock.tagNumber}]`:this.constructor.NAME;return e.length?`${t} :\n${e.join("\n")}`:`${t} :`}}uo=ko,no.Constructed=uo,ko.NAME="CONSTRUCTED";class Eo extends so{fromBER(e,t,s){return t}toBER(e){return Qn}}Eo.override="EndOfContentValueBlock";class So extends oo{constructor(e={}){super(e,Eo),this.idBlock.tagClass=1,this.idBlock.tagNumber=0}}go=So,no.EndOfContent=go,So.NAME=Yn;class Io extends oo{constructor(e={}){super(e,so),this.idBlock.tagClass=1,this.idBlock.tagNumber=5}fromBER(e,t,s){return this.lenBlock.length>0&&this.warnings.push("Non-zero length of value block for Null type"),this.idBlock.error.length||(this.blockLength+=this.idBlock.blockLength),this.lenBlock.error.length||(this.blockLength+=this.lenBlock.blockLength),this.blockLength+=s,t+s>e.byteLength?(this.error="End of input reached before message was fully decoded (inconsistent offset and length values)",-1):t+s}toBER(e,t){const s=new ArrayBuffer(2);if(!e){const e=new Uint8Array(s);e[0]=5,e[1]=0}return t&&t.write(s),s}onAsciiEncoding(){return`${this.constructor.NAME}`}}po=Io,no.Null=po,Io.NAME="NULL";class Po extends(eo(so)){get value(){for(const e of this.valueHexView)if(e>0)return!0;return!1}set value(e){this.valueHexView[0]=e?255:0}constructor({value:e,...t}={}){super(t),t.valueHex?this.valueHexView=Cn.toUint8Array(t.valueHex):this.valueHexView=new Uint8Array(1),e&&(this.value=e)}fromBER(e,t,s){const i=Cn.toUint8Array(e);return Wn(this,i,t,s)?(this.valueHexView=i.subarray(t,t+s),s>1&&this.warnings.push("Boolean value encoded in more then 1 octet"),this.isHexOnly=!0,Vn.call(this),this.blockLength=s,t+s):-1}toBER(){return this.valueHexView.slice()}toJSON(){return{...super.toJSON(),value:this.value}}}Po.NAME="BooleanValueBlock";let Ro=class extends oo{getValue(){return this.valueBlock.value}setValue(e){this.valueBlock.value=e}constructor(e={}){super(e,Po),this.idBlock.tagClass=1,this.idBlock.tagNumber=1}onAsciiEncoding(){return`${this.constructor.NAME} : ${this.getValue}`}};fo=Ro,no.Boolean=fo,Ro.NAME="BOOLEAN";class xo extends(eo(bo)){constructor({isConstructed:e=!1,...t}={}){super(t),this.isConstructed=e}fromBER(e,t,s){let i=0;if(this.isConstructed){if(this.isHexOnly=!1,i=bo.prototype.fromBER.call(this,e,t,s),-1===i)return i;for(let e=0;e<this.value.length;e++){const t=this.value[e].constructor.NAME;if(t===Yn){if(this.isIndefiniteForm)break;return this.error="EndOfContent is unexpected, OCTET STRING may consists of OCTET STRINGs only",-1}if(t!==Zn)return this.error="OCTET STRING may consists of OCTET STRINGs only",-1}}else this.isHexOnly=!0,i=super.fromBER(e,t,s),this.blockLength=s;return i}toBER(e,t){return this.isConstructed?bo.prototype.toBER.call(this,e,t):e?new ArrayBuffer(this.valueHexView.byteLength):this.valueHexView.slice().buffer}toJSON(){return{...super.toJSON(),isConstructed:this.isConstructed}}}var Ao,Co,To,Bo,No,_o,Do,Mo,Lo;xo.NAME="OctetStringValueBlock";class Oo extends oo{constructor({idBlock:e={},lenBlock:t={},...s}={}){var i,r;null!==(i=s.isConstructed)&&void 0!==i||(s.isConstructed=!!(null===(r=s.value)||void 0===r?void 0:r.length)),super({idBlock:{isConstructed:s.isConstructed,...e},lenBlock:{...t,isIndefiniteForm:!!s.isIndefiniteForm},...s},xo),this.idBlock.tagClass=1,this.idBlock.tagNumber=4}fromBER(e,t,s){if(this.valueBlock.isConstructed=this.idBlock.isConstructed,this.valueBlock.isIndefiniteForm=this.lenBlock.isIndefiniteForm,0===s)return 0===this.idBlock.error.length&&(this.blockLength+=this.idBlock.blockLength),0===this.lenBlock.error.length&&(this.blockLength+=this.lenBlock.blockLength),t;if(!this.valueBlock.isConstructed){const i=(e instanceof ArrayBuffer?new Uint8Array(e):e).subarray(t,t+s);try{if(i.byteLength){const e=wo(i,0,i.byteLength);-1!==e.offset&&e.offset===s&&(this.valueBlock.value=[e.result])}}catch{}}return super.fromBER(e,t,s)}onAsciiEncoding(){if(this.valueBlock.isConstructed||this.valueBlock.value&&this.valueBlock.value.length)return ko.prototype.onAsciiEncoding.call(this);return`${this.constructor.NAME} : ${Ln.ToHex(this.valueBlock.valueHexView)}`}getValue(){if(!this.idBlock.isConstructed)return this.valueBlock.valueHexView.slice().buffer;const e=[];for(const t of this.valueBlock.value)t instanceof Ao&&e.push(t.valueBlock.valueHexView);return Cn.concat(e)}}Ao=Oo,no.OctetString=Ao,Oo.NAME=Zn;class Uo extends(eo(bo)){constructor({unusedBits:e=0,isConstructed:t=!1,...s}={}){super(s),this.unusedBits=e,this.isConstructed=t,this.blockLength=this.valueHexView.byteLength}fromBER(e,t,s){if(!s)return t;let i=-1;if(this.isConstructed){if(i=bo.prototype.fromBER.call(this,e,t,s),-1===i)return i;for(const e of this.value){const t=e.constructor.NAME;if(t===Yn){if(this.isIndefiniteForm)break;return this.error="EndOfContent is unexpected, BIT STRING may consists of BIT STRINGs only",-1}if(t!==Xn)return this.error="BIT STRING may consists of BIT STRINGs only",-1;const s=e.valueBlock;if(this.unusedBits>0&&s.unusedBits>0)return this.error='Using of "unused bits" inside constructive BIT STRING allowed for least one only',-1;this.unusedBits=s.unusedBits}return i}const r=Cn.toUint8Array(e);if(!Wn(this,r,t,s))return-1;const n=r.subarray(t,t+s);if(this.unusedBits=n[0],this.unusedBits>7)return this.error="Unused bits for BitString must be in range 0-7",-1;if(!this.unusedBits){const e=n.subarray(1);try{if(e.byteLength){const t=wo(e,0,e.byteLength);-1!==t.offset&&t.offset===s-1&&(this.value=[t.result])}}catch{}}return this.valueHexView=n.subarray(1),this.blockLength=n.length,t+s}toBER(e,t){if(this.isConstructed)return bo.prototype.toBER.call(this,e,t);if(e)return new ArrayBuffer(this.valueHexView.byteLength+1);if(!this.valueHexView.byteLength)return Qn;const s=new Uint8Array(this.valueHexView.length+1);return s[0]=this.unusedBits,s.set(this.valueHexView,1),s.buffer}toJSON(){return{...super.toJSON(),unusedBits:this.unusedBits,isConstructed:this.isConstructed}}}Uo.NAME="BitStringValueBlock";class $o extends oo{constructor({idBlock:e={},lenBlock:t={},...s}={}){var i,r;null!==(i=s.isConstructed)&&void 0!==i||(s.isConstructed=!!(null===(r=s.value)||void 0===r?void 0:r.length)),super({idBlock:{isConstructed:s.isConstructed,...e},lenBlock:{...t,isIndefiniteForm:!!s.isIndefiniteForm},...s},Uo),this.idBlock.tagClass=1,this.idBlock.tagNumber=3}fromBER(e,t,s){return this.valueBlock.isConstructed=this.idBlock.isConstructed,this.valueBlock.isIndefiniteForm=this.lenBlock.isIndefiniteForm,super.fromBER(e,t,s)}onAsciiEncoding(){if(this.valueBlock.isConstructed||this.valueBlock.value&&this.valueBlock.value.length)return ko.prototype.onAsciiEncoding.call(this);{const e=[],t=this.valueBlock.valueHexView;for(const i of t)e.push(i.toString(2).padStart(8,"0"));const s=e.join("");return`${this.constructor.NAME} : ${s.substring(0,s.length-this.valueBlock.unusedBits)}`}}}function Vo(e,t){const s=new Uint8Array([0]),i=new Uint8Array(e),r=new Uint8Array(t);let n=i.slice(0);const o=n.length-1,a=r.slice(0),l=a.length-1;let c=0;let h=0;for(let d=l<o?o:l;d>=0;d--,h++){if(!0==h<a.length)c=n[o-h]+a[l-h]+s[0];else c=n[o-h]+s[0];if(s[0]=c/10,!0==h>=n.length)n=$n(new Uint8Array([c%10]),n);else n[o-h]=c%10}return s[0]>0&&(n=$n(s,n)),n}function Ho(e){if(e>=Gn.length)for(let t=Gn.length;t<=e;t++){const e=new Uint8Array([0]);let s=Gn[t-1].slice(0);for(let t=s.length-1;t>=0;t--){const i=new Uint8Array([(s[t]<<1)+e[0]]);e[0]=i[0]/10,s[t]=i[0]%10}e[0]>0&&(s=$n(e,s)),Gn.push(s)}return Gn[e]}function Fo(e,t){let s=0;const i=new Uint8Array(e),r=new Uint8Array(t),n=i.slice(0),o=n.length-1,a=r.slice(0),l=a.length-1;let c,h=0;for(let d=l;d>=0;d--,h++)if(c=n[o-h]-a[l-h]-s,!0==c<0)s=1,n[o-h]=c+10;else s=0,n[o-h]=c;if(s>0)for(let d=o-l+1;d>=0;d--,h++){if(c=n[o-h]-s,!(c<0)){s=0,n[o-h]=c;break}s=1,n[o-h]=c+10}return n.slice()}Co=$o,no.BitString=Co,$o.NAME=Xn;class qo extends(eo(so)){setValueHex(){this.valueHexView.length>=4?(this.warnings.push("Too big Integer for decoding, hex only"),this.isHexOnly=!0,this._valueDec=0):(this.isHexOnly=!1,this.valueHexView.length>0&&(this._valueDec=Vn.call(this)))}constructor({value:e,...t}={}){super(t),this._valueDec=0,t.valueHex&&this.setValueHex(),void 0!==e&&(this.valueDec=e)}set valueDec(e){this._valueDec=e,this.isHexOnly=!1,this.valueHexView=new Uint8Array(function(e){const t=e<0?-1*e:e;let s=128;for(let i=1;i<8;i++){if(t<=s){if(e<0){const e=Un(s-t,8,i);return new Uint8Array(e)[0]|=128,e}let r=Un(t,8,i),n=new Uint8Array(r);if(128&n[0]){const e=r.slice(0),t=new Uint8Array(e);r=new ArrayBuffer(r.byteLength+1),n=new Uint8Array(r);for(let s=0;s<e.byteLength;s++)n[s+1]=t[s];n[0]=0}return r}s*=Math.pow(2,8)}return new ArrayBuffer(0)}(e))}get valueDec(){return this._valueDec}fromDER(e,t,s,i=0){const r=this.fromBER(e,t,s);if(-1===r)return r;const n=this.valueHexView;return 0===n[0]&&128&n[1]?this.valueHexView=n.subarray(1):0!==i&&n.length<i&&(i-n.length>1&&(i=n.length+1),this.valueHexView=n.subarray(i-n.length)),r}toDER(e=!1){const t=this.valueHexView;switch(!0){case!!(128&t[0]):{const e=new Uint8Array(this.valueHexView.length+1);e[0]=0,e.set(t,1),this.valueHexView=e}break;case 0===t[0]&&!(128&t[1]):this.valueHexView=this.valueHexView.subarray(1)}return this.toBER(e)}fromBER(e,t,s){const i=super.fromBER(e,t,s);return-1===i||this.setValueHex(),i}toBER(e){return e?new ArrayBuffer(this.valueHexView.length):this.valueHexView.slice().buffer}toJSON(){return{...super.toJSON(),valueDec:this.valueDec}}toString(){const e=8*this.valueHexView.length-1;let t,s=new Uint8Array(8*this.valueHexView.length/3),i=0;const r=this.valueHexView;let n="",o=!1;for(let a=r.byteLength-1;a>=0;a--){t=r[a];for(let r=0;r<8;r++){if(!(1&~t))if(i===e)s=Fo(Ho(i),s),n="-";else s=Vo(s,Ho(i));i++,t>>=1}}for(let a=0;a<s.length;a++)s[a]&&(o=!0),o&&(n+=jn.charAt(s[a]));return!1===o&&(n+=jn.charAt(0)),n}}To=qo,qo.NAME="IntegerValueBlock",Object.defineProperty(To.prototype,"valueHex",{set:function(e){this.valueHexView=new Uint8Array(e),this.setValueHex()},get:function(){return this.valueHexView.slice().buffer}});class Wo extends oo{constructor(e={}){super(e,qo),this.idBlock.tagClass=1,this.idBlock.tagNumber=2}toBigInt(){return Fn(),BigInt(this.valueBlock.toString())}static fromBigInt(e){Fn();const t=BigInt(e),s=new zn,i=t.toString(16).replace(/^-/,""),r=new Uint8Array(Ln.FromHex(i));if(t<0){const e=new Uint8Array(r.length+(128&r[0]?1:0));e[0]|=128;const i=BigInt(`0x${Ln.ToHex(e)}`)+t,n=Cn.toUint8Array(Ln.FromHex(i.toString(16)));n[0]|=128,s.write(n)}else 128&r[0]&&s.write(new Uint8Array([0])),s.write(r);return new Bo({valueHex:s.final()})}convertToDER(){const e=new Bo({valueHex:this.valueBlock.valueHexView});return e.valueBlock.toDER(),e}convertFromDER(){return new Bo({valueHex:0===this.valueBlock.valueHexView[0]?this.valueBlock.valueHexView.subarray(1):this.valueBlock.valueHexView})}onAsciiEncoding(){return`${this.constructor.NAME} : ${this.valueBlock.toString()}`}}Bo=Wo,no.Integer=Bo,Wo.NAME="INTEGER";class zo extends Wo{constructor(e={}){super(e),this.idBlock.tagClass=1,this.idBlock.tagNumber=10}}No=zo,no.Enumerated=No,zo.NAME="ENUMERATED";class Go extends(eo(so)){constructor({valueDec:e=-1,isFirstSid:t=!1,...s}={}){super(s),this.valueDec=e,this.isFirstSid=t}fromBER(e,t,s){if(!s)return t;const i=Cn.toUint8Array(e);if(!Wn(this,i,t,s))return-1;const r=i.subarray(t,t+s);this.valueHexView=new Uint8Array(s);for(let o=0;o<s&&(this.valueHexView[o]=127&r[o],this.blockLength++,128&r[o]);o++);const n=new Uint8Array(this.blockLength);for(let o=0;o<this.blockLength;o++)n[o]=this.valueHexView[o];return this.valueHexView=n,128&r[this.blockLength-1]?(this.error="End of input reached before message was fully decoded",-1):(0===this.valueHexView[0]&&this.warnings.push("Needlessly long format of SID encoding"),this.blockLength<=8?this.valueDec=On(this.valueHexView,7):(this.isHexOnly=!0,this.warnings.push("Too big SID for decoding, hex only")),t+this.blockLength)}set valueBigInt(e){Fn();let t=BigInt(e).toString(2);for(;t.length%7;)t="0"+t;const s=new Uint8Array(t.length/7);for(let i=0;i<s.length;i++)s[i]=parseInt(t.slice(7*i,7*i+7),2)+(i+1<s.length?128:0);this.fromBER(s.buffer,0,s.length)}toBER(e){if(this.isHexOnly){if(e)return new ArrayBuffer(this.valueHexView.byteLength);const t=this.valueHexView,s=new Uint8Array(this.blockLength);for(let e=0;e<this.blockLength-1;e++)s[e]=128|t[e];return s[this.blockLength-1]=t[this.blockLength-1],s.buffer}const t=Un(this.valueDec,7);if(0===t.byteLength)return this.error="Error during encoding SID value",Qn;const s=new Uint8Array(t.byteLength);if(!e){const e=new Uint8Array(t),i=t.byteLength-1;for(let t=0;t<i;t++)s[t]=128|e[t];s[i]=e[i]}return s}toString(){let e="";if(this.isHexOnly)e=Ln.ToHex(this.valueHexView);else if(this.isFirstSid){let t=this.valueDec;this.valueDec<=39?e="0.":this.valueDec<=79?(e="1.",t-=40):(e="2.",t-=80),e+=t.toString()}else e=this.valueDec.toString();return e}toJSON(){return{...super.toJSON(),valueDec:this.valueDec,isFirstSid:this.isFirstSid}}}Go.NAME="sidBlock";class jo extends so{constructor({value:e="",...t}={}){super(t),this.value=[],e&&this.fromString(e)}fromBER(e,t,s){let i=t;for(;s>0;){const t=new Go;if(i=t.fromBER(e,i,s),-1===i)return this.blockLength=0,this.error=t.error,i;0===this.value.length&&(t.isFirstSid=!0),this.blockLength+=t.blockLength,s-=t.blockLength,this.value.push(t)}return i}toBER(e){const t=[];for(let s=0;s<this.value.length;s++){const i=this.value[s].toBER(e);if(0===i.byteLength)return this.error=this.value[s].error,Qn;t.push(i)}return qn(t)}fromString(e){this.value=[];let t=0,s=0,i="",r=!1;do{if(s=e.indexOf(".",t),i=-1===s?e.substring(t):e.substring(t,s),t=s+1,r){const e=this.value[0];let t=0;switch(e.valueDec){case 0:break;case 1:t=40;break;case 2:t=80;break;default:return void(this.value=[])}const s=parseInt(i,10);if(isNaN(s))return;e.valueDec=s+t,r=!1}else{const e=new Go;if(i>Number.MAX_SAFE_INTEGER){Fn();const t=BigInt(i);e.valueBigInt=t}else if(e.valueDec=parseInt(i,10),isNaN(e.valueDec))return;this.value.length||(e.isFirstSid=!0,r=!0),this.value.push(e)}}while(-1!==s)}toString(){let e="",t=!1;for(let s=0;s<this.value.length;s++){t=this.value[s].isHexOnly;let i=this.value[s].toString();0!==s&&(e=`${e}.`),t?(i=`{${i}}`,this.value[s].isFirstSid?e=`2.{${i} - 80}`:e+=i):e+=i}return e}toJSON(){const e={...super.toJSON(),value:this.toString(),sidArray:[]};for(let t=0;t<this.value.length;t++)e.sidArray.push(this.value[t].toJSON());return e}}jo.NAME="ObjectIdentifierValueBlock";class Ko extends oo{getValue(){return this.valueBlock.toString()}setValue(e){this.valueBlock.fromString(e)}constructor(e={}){super(e,jo),this.idBlock.tagClass=1,this.idBlock.tagNumber=6}onAsciiEncoding(){return`${this.constructor.NAME} : ${this.valueBlock.toString()||"empty"}`}toJSON(){return{...super.toJSON(),value:this.getValue()}}}_o=Ko,no.ObjectIdentifier=_o,Ko.NAME="OBJECT IDENTIFIER";class Qo extends(eo(to)){constructor({valueDec:e=0,...t}={}){super(t),this.valueDec=e}fromBER(e,t,s){if(0===s)return t;const i=Cn.toUint8Array(e);if(!Wn(this,i,t,s))return-1;const r=i.subarray(t,t+s);this.valueHexView=new Uint8Array(s);for(let o=0;o<s&&(this.valueHexView[o]=127&r[o],this.blockLength++,128&r[o]);o++);const n=new Uint8Array(this.blockLength);for(let o=0;o<this.blockLength;o++)n[o]=this.valueHexView[o];return this.valueHexView=n,128&r[this.blockLength-1]?(this.error="End of input reached before message was fully decoded",-1):(0===this.valueHexView[0]&&this.warnings.push("Needlessly long format of SID encoding"),this.blockLength<=8?this.valueDec=On(this.valueHexView,7):(this.isHexOnly=!0,this.warnings.push("Too big SID for decoding, hex only")),t+this.blockLength)}toBER(e){if(this.isHexOnly){if(e)return new ArrayBuffer(this.valueHexView.byteLength);const t=this.valueHexView,s=new Uint8Array(this.blockLength);for(let e=0;e<this.blockLength-1;e++)s[e]=128|t[e];return s[this.blockLength-1]=t[this.blockLength-1],s.buffer}const t=Un(this.valueDec,7);if(0===t.byteLength)return this.error="Error during encoding SID value",Qn;const s=new Uint8Array(t.byteLength);if(!e){const e=new Uint8Array(t),i=t.byteLength-1;for(let t=0;t<i;t++)s[t]=128|e[t];s[i]=e[i]}return s.buffer}toString(){let e="";return e=this.isHexOnly?Ln.ToHex(this.valueHexView):this.valueDec.toString(),e}toJSON(){return{...super.toJSON(),valueDec:this.valueDec}}}Qo.NAME="relativeSidBlock";class Jo extends so{constructor({value:e="",...t}={}){super(t),this.value=[],e&&this.fromString(e)}fromBER(e,t,s){let i=t;for(;s>0;){const t=new Qo;if(i=t.fromBER(e,i,s),-1===i)return this.blockLength=0,this.error=t.error,i;this.blockLength+=t.blockLength,s-=t.blockLength,this.value.push(t)}return i}toBER(e,t){const s=[];for(let i=0;i<this.value.length;i++){const t=this.value[i].toBER(e);if(0===t.byteLength)return this.error=this.value[i].error,Qn;s.push(t)}return qn(s)}fromString(e){this.value=[];let t=0,s=0,i="";do{s=e.indexOf(".",t),i=-1===s?e.substring(t):e.substring(t,s),t=s+1;const r=new Qo;if(r.valueDec=parseInt(i,10),isNaN(r.valueDec))return!0;this.value.push(r)}while(-1!==s);return!0}toString(){let e="",t=!1;for(let s=0;s<this.value.length;s++){t=this.value[s].isHexOnly;let i=this.value[s].toString();0!==s&&(e=`${e}.`),t?(i=`{${i}}`,e+=i):e+=i}return e}toJSON(){const e={...super.toJSON(),value:this.toString(),sidArray:[]};for(let t=0;t<this.value.length;t++)e.sidArray.push(this.value[t].toJSON());return e}}Jo.NAME="RelativeObjectIdentifierValueBlock";class Yo extends oo{getValue(){return this.valueBlock.toString()}setValue(e){this.valueBlock.fromString(e)}constructor(e={}){super(e,Jo),this.idBlock.tagClass=1,this.idBlock.tagNumber=13}onAsciiEncoding(){return`${this.constructor.NAME} : ${this.valueBlock.toString()||"empty"}`}toJSON(){return{...super.toJSON(),value:this.getValue()}}}Do=Yo,no.RelativeObjectIdentifier=Do,Yo.NAME="RelativeObjectIdentifier";class Zo extends ko{constructor(e={}){super(e),this.idBlock.tagClass=1,this.idBlock.tagNumber=16}}Mo=Zo,no.Sequence=Mo,Zo.NAME="SEQUENCE";let Xo=class extends ko{constructor(e={}){super(e),this.idBlock.tagClass=1,this.idBlock.tagNumber=17}};Lo=Xo,no.Set=Lo,Xo.NAME="SET";class ea extends(eo(so)){constructor({...e}={}){super(e),this.isHexOnly=!0,this.value=Kn}toJSON(){return{...super.toJSON(),value:this.value}}}ea.NAME="StringValueBlock";class ta extends ea{}ta.NAME="SimpleStringValueBlock";class sa extends lo{constructor({...e}={}){super(e,ta)}fromBuffer(e){this.valueBlock.value=String.fromCharCode.apply(null,Cn.toUint8Array(e))}fromString(e){const t=e.length,s=this.valueBlock.valueHexView=new Uint8Array(t);for(let i=0;i<t;i++)s[i]=e.charCodeAt(i);this.valueBlock.value=e}}sa.NAME="SIMPLE STRING";class ia extends sa{fromBuffer(e){this.valueBlock.valueHexView=Cn.toUint8Array(e);try{this.valueBlock.value=Ln.ToUtf8String(e)}catch(t){this.warnings.push(`Error during "decodeURIComponent": ${t}, using raw string`),this.valueBlock.value=Ln.ToBinary(e)}}fromString(e){this.valueBlock.valueHexView=new Uint8Array(Ln.FromUtf8String(e)),this.valueBlock.value=e}}var ra,na,oa,aa,la,ca,ha,da,ua,ga,pa,fa,ma,wa,ya,va,ba,ka,Ea;ia.NAME="Utf8StringValueBlock";class Sa extends ia{constructor(e={}){super(e),this.idBlock.tagClass=1,this.idBlock.tagNumber=12}}ra=Sa,no.Utf8String=ra,Sa.NAME="UTF8String";class Ia extends sa{fromBuffer(e){this.valueBlock.value=Ln.ToUtf16String(e),this.valueBlock.valueHexView=Cn.toUint8Array(e)}fromString(e){this.valueBlock.value=e,this.valueBlock.valueHexView=new Uint8Array(Ln.FromUtf16String(e))}}Ia.NAME="BmpStringValueBlock";class Pa extends Ia{constructor({...e}={}){super(e),this.idBlock.tagClass=1,this.idBlock.tagNumber=30}}na=Pa,no.BmpString=na,Pa.NAME="BMPString";class Ra extends sa{fromBuffer(e){const t=ArrayBuffer.isView(e)?e.slice().buffer:e.slice(0),s=new Uint8Array(t);for(let i=0;i<s.length;i+=4)s[i]=s[i+3],s[i+1]=s[i+2],s[i+2]=0,s[i+3]=0;this.valueBlock.value=String.fromCharCode.apply(null,new Uint32Array(t))}fromString(e){const t=e.length,s=this.valueBlock.valueHexView=new Uint8Array(4*t);for(let i=0;i<t;i++){const t=Un(e.charCodeAt(i),8),r=new Uint8Array(t);if(r.length>4)continue;const n=4-r.length;for(let e=r.length-1;e>=0;e--)s[4*i+e+n]=r[e]}this.valueBlock.value=e}}Ra.NAME="UniversalStringValueBlock";class xa extends Ra{constructor({...e}={}){super(e),this.idBlock.tagClass=1,this.idBlock.tagNumber=28}}oa=xa,no.UniversalString=oa,xa.NAME="UniversalString";class Aa extends sa{constructor(e={}){super(e),this.idBlock.tagClass=1,this.idBlock.tagNumber=18}}aa=Aa,no.NumericString=aa,Aa.NAME="NumericString";class Ca extends sa{constructor(e={}){super(e),this.idBlock.tagClass=1,this.idBlock.tagNumber=19}}la=Ca,no.PrintableString=la,Ca.NAME="PrintableString";class Ta extends sa{constructor(e={}){super(e),this.idBlock.tagClass=1,this.idBlock.tagNumber=20}}ca=Ta,no.TeletexString=ca,Ta.NAME="TeletexString";class Ba extends sa{constructor(e={}){super(e),this.idBlock.tagClass=1,this.idBlock.tagNumber=21}}ha=Ba,no.VideotexString=ha,Ba.NAME="VideotexString";class Na extends sa{constructor(e={}){super(e),this.idBlock.tagClass=1,this.idBlock.tagNumber=22}}da=Na,no.IA5String=da,Na.NAME="IA5String";class _a extends sa{constructor(e={}){super(e),this.idBlock.tagClass=1,this.idBlock.tagNumber=25}}ua=_a,no.GraphicString=ua,_a.NAME="GraphicString";class Da extends sa{constructor(e={}){super(e),this.idBlock.tagClass=1,this.idBlock.tagNumber=26}}ga=Da,no.VisibleString=ga,Da.NAME="VisibleString";class Ma extends sa{constructor(e={}){super(e),this.idBlock.tagClass=1,this.idBlock.tagNumber=27}}pa=Ma,no.GeneralString=pa,Ma.NAME="GeneralString";class La extends sa{constructor(e={}){super(e),this.idBlock.tagClass=1,this.idBlock.tagNumber=29}}fa=La,no.CharacterString=fa,La.NAME="CharacterString";class Oa extends Da{constructor({value:e,valueDate:t,...s}={}){if(super(s),this.year=0,this.month=0,this.day=0,this.hour=0,this.minute=0,this.second=0,e){this.fromString(e),this.valueBlock.valueHexView=new Uint8Array(e.length);for(let t=0;t<e.length;t++)this.valueBlock.valueHexView[t]=e.charCodeAt(t)}t&&(this.fromDate(t),this.valueBlock.valueHexView=new Uint8Array(this.toBuffer())),this.idBlock.tagClass=1,this.idBlock.tagNumber=23}fromBuffer(e){this.fromString(String.fromCharCode.apply(null,Cn.toUint8Array(e)))}toBuffer(){const e=this.toString(),t=new ArrayBuffer(e.length),s=new Uint8Array(t);for(let i=0;i<e.length;i++)s[i]=e.charCodeAt(i);return t}fromDate(e){this.year=e.getUTCFullYear(),this.month=e.getUTCMonth()+1,this.day=e.getUTCDate(),this.hour=e.getUTCHours(),this.minute=e.getUTCMinutes(),this.second=e.getUTCSeconds()}toDate(){return new Date(Date.UTC(this.year,this.month-1,this.day,this.hour,this.minute,this.second))}fromString(e){const t=/(\d{2})(\d{2})(\d{2})(\d{2})(\d{2})(\d{2})Z/gi.exec(e);if(null===t)return void(this.error="Wrong input string for conversion");const s=parseInt(t[1],10);this.year=s>=50?1900+s:2e3+s,this.month=parseInt(t[2],10),this.day=parseInt(t[3],10),this.hour=parseInt(t[4],10),this.minute=parseInt(t[5],10),this.second=parseInt(t[6],10)}toString(e="iso"){if("iso"===e){const e=new Array(7);return e[0]=Hn(this.year<2e3?this.year-1900:this.year-2e3,2),e[1]=Hn(this.month,2),e[2]=Hn(this.day,2),e[3]=Hn(this.hour,2),e[4]=Hn(this.minute,2),e[5]=Hn(this.second,2),e[6]="Z",e.join("")}return super.toString(e)}onAsciiEncoding(){return`${this.constructor.NAME} : ${this.toDate().toISOString()}`}toJSON(){return{...super.toJSON(),year:this.year,month:this.month,day:this.day,hour:this.hour,minute:this.minute,second:this.second}}}ma=Oa,no.UTCTime=ma,Oa.NAME="UTCTime";class Ua extends Oa{constructor(e={}){var t;super(e),null!==(t=this.millisecond)&&void 0!==t||(this.millisecond=0),this.idBlock.tagClass=1,this.idBlock.tagNumber=24}fromDate(e){super.fromDate(e),this.millisecond=e.getUTCMilliseconds()}toDate(){const e=Date.UTC(this.year,this.month-1,this.day,this.hour,this.minute,this.second,this.millisecond);return new Date(e)}fromString(e){let t,s=!1,i="",r="",n=0,o=0,a=0;if("Z"===e[e.length-1])i=e.substring(0,e.length-1),s=!0;else{const t=new Number(e[e.length-1]);if(isNaN(t.valueOf()))throw new Error("Wrong input string for conversion");i=e}if(s){if(-1!==i.indexOf("+"))throw new Error("Wrong input string for conversion");if(-1!==i.indexOf("-"))throw new Error("Wrong input string for conversion")}else{let e=1,t=i.indexOf("+"),s="";if(-1===t&&(t=i.indexOf("-"),e=-1),-1!==t){if(s=i.substring(t+1),i=i.substring(0,t),2!==s.length&&4!==s.length)throw new Error("Wrong input string for conversion");let r=parseInt(s.substring(0,2),10);if(isNaN(r.valueOf()))throw new Error("Wrong input string for conversion");if(o=e*r,4===s.length){if(r=parseInt(s.substring(2,4),10),isNaN(r.valueOf()))throw new Error("Wrong input string for conversion");a=e*r}}}let l=i.indexOf(".");if(-1===l&&(l=i.indexOf(",")),-1!==l){const e=new Number(`0${i.substring(l)}`);if(isNaN(e.valueOf()))throw new Error("Wrong input string for conversion");n=e.valueOf(),r=i.substring(0,l)}else r=i;switch(!0){case 8===r.length:if(t=/(\d{4})(\d{2})(\d{2})/gi,-1!==l)throw new Error("Wrong input string for conversion");break;case 10===r.length:if(t=/(\d{4})(\d{2})(\d{2})(\d{2})/gi,-1!==l){let e=60*n;this.minute=Math.floor(e),e=60*(e-this.minute),this.second=Math.floor(e),e=1e3*(e-this.second),this.millisecond=Math.floor(e)}break;case 12===r.length:if(t=/(\d{4})(\d{2})(\d{2})(\d{2})(\d{2})/gi,-1!==l){let e=60*n;this.second=Math.floor(e),e=1e3*(e-this.second),this.millisecond=Math.floor(e)}break;case 14===r.length:if(t=/(\d{4})(\d{2})(\d{2})(\d{2})(\d{2})(\d{2})/gi,-1!==l){const e=1e3*n;this.millisecond=Math.floor(e)}break;default:throw new Error("Wrong input string for conversion")}const c=t.exec(r);if(null===c)throw new Error("Wrong input string for conversion");for(let h=1;h<c.length;h++)switch(h){case 1:this.year=parseInt(c[h],10);break;case 2:this.month=parseInt(c[h],10);break;case 3:this.day=parseInt(c[h],10);break;case 4:this.hour=parseInt(c[h],10)+o;break;case 5:this.minute=parseInt(c[h],10)+a;break;case 6:this.second=parseInt(c[h],10);break;default:throw new Error("Wrong input string for conversion")}if(!1===s){const e=new Date(this.year,this.month,this.day,this.hour,this.minute,this.second,this.millisecond);this.year=e.getUTCFullYear(),this.month=e.getUTCMonth(),this.day=e.getUTCDay(),this.hour=e.getUTCHours(),this.minute=e.getUTCMinutes(),this.second=e.getUTCSeconds(),this.millisecond=e.getUTCMilliseconds()}}toString(e="iso"){if("iso"===e){const e=[];return e.push(Hn(this.year,4)),e.push(Hn(this.month,2)),e.push(Hn(this.day,2)),e.push(Hn(this.hour,2)),e.push(Hn(this.minute,2)),e.push(Hn(this.second,2)),0!==this.millisecond&&(e.push("."),e.push(Hn(this.millisecond,3))),e.push("Z"),e.join("")}return super.toString(e)}toJSON(){return{...super.toJSON(),millisecond:this.millisecond}}}wa=Ua,no.GeneralizedTime=wa,Ua.NAME="GeneralizedTime";class $a extends Sa{constructor(e={}){super(e),this.idBlock.tagClass=1,this.idBlock.tagNumber=31}}ya=$a,no.DATE=ya,$a.NAME="DATE";class Va extends Sa{constructor(e={}){super(e),this.idBlock.tagClass=1,this.idBlock.tagNumber=32}}va=Va,no.TimeOfDay=va,Va.NAME="TimeOfDay";class Ha extends Sa{constructor(e={}){super(e),this.idBlock.tagClass=1,this.idBlock.tagNumber=33}}ba=Ha,no.DateTime=ba,Ha.NAME="DateTime";class Fa extends Sa{constructor(e={}){super(e),this.idBlock.tagClass=1,this.idBlock.tagNumber=34}}ka=Fa,no.Duration=ka,Fa.NAME="Duration";class qa extends Sa{constructor(e={}){super(e),this.idBlock.tagClass=1,this.idBlock.tagNumber=14}}Ea=qa,no.TIME=Ea,qa.NAME="TIME";const Wa=32,za=1e4;async function Ga(e,t){const s=An(),i=await s.encrypt(e,t);return Ee.encode(i)}async function ja(e,t,s){if("RSA"===e.type)return async function(e,t,s="pkcs-8"){if("pkcs-8"===s)return async function(e,t){const s=Kt.get(),i=new Zo({value:[new Wo({value:0}),new Zo({value:[new Ko({value:"1.2.840.113549.1.1.1"}),new Io]}),new Oo({valueHex:e.raw})]}).toBER(),r=new Uint8Array(i,0,i.byteLength),n=ee(16),o=await Ei(Ri,t,n,{c:za,dkLen:32}),a=ee(16),l=await s.subtle.importKey("raw",o,"AES-CBC",!1,["encrypt"]),c=await s.subtle.encrypt({name:"AES-CBC",iv:a},l,r),h=new Zo({value:[new Oo({valueHex:n}),new Wo({value:za}),new Wo({value:32}),new Zo({value:[new Ko({value:"1.2.840.113549.2.11"}),new Io]})]}),d=new Zo({value:[new Ko({value:"1.2.840.113549.1.5.13"}),new Zo({value:[new Zo({value:[new Ko({value:"1.2.840.113549.1.5.12"}),h]}),new Zo({value:[new Ko({value:"2.16.840.1.101.3.4.1.42"}),new Oo({valueHex:a})]})]})]}),u=new Zo({value:[d,new Oo({valueHex:c})]}).toBER(),g=new Uint8Array(u,0,u.byteLength);return["-----BEGIN ENCRYPTED PRIVATE KEY-----",...St(g,"base64pad").split(/(.{64})/).filter(Boolean),"-----END ENCRYPTED PRIVATE KEY-----"].join("\n")}(e,t);if("libp2p-key"===s)return Ga(Jt(e),t);throw new It("Export format is not supported")}(e,t,s);if("Ed25519"===e.type)return async function(e,t,s="libp2p-key"){if("libp2p-key"===s)return Ga(Jt(e),t);throw new It(`export format '${s}' is not supported`)}(e,t,s);if("secp256k1"===e.type)return async function(e,t,s="libp2p-key"){if("libp2p-key"===s)return Ga(Jt(e),t);throw new It("Export format is not supported")}(e,t,s);if("ECDSA"===e.type)return async function(e,t,s="libp2p-key"){if("libp2p-key"===s)return Ga(Jt(e),t);throw new It(`export format '${s}' is not supported`)}(e,t,s);throw new Qt}async function Ka(e,t){try{const s=await async function(e,t){const s=Ee.decode(e);return An().decrypt(s,t)}(e,t);return Yt(s)}catch{}if(!e.includes("BEGIN"))throw new It("Encrypted key was not a libp2p-key or a PEM file");return async function(e,t){const s=Kt.get();let i;if(e.includes("-----BEGIN ENCRYPTED PRIVATE KEY-----")){const r=me(e.replace("-----BEGIN ENCRYPTED PRIVATE KEY-----","").replace("-----END ENCRYPTED PRIVATE KEY-----","").replace(/\n/g,"").trim(),"base64pad"),{result:n}=yo(r),{iv:o,salt:a,iterations:l,keySize:c,cipherText:h}=function(e){const t=e.valueBlock.value[0];if("OBJECT IDENTIFIER : 1.2.840.113549.1.5.13"!==t.valueBlock.value[0].toString())throw new It("Only pkcs5PBES2 encrypted private keys are supported");const s=t.valueBlock.value[1].valueBlock.value[0];if("OBJECT IDENTIFIER : 1.2.840.113549.1.5.12"!==s.valueBlock.value[0].toString())throw new It("Only pkcs5PBKDF2 key derivation functions are supported");const i=s.valueBlock.value[1],r=Ja(i.valueBlock.value[0].getValue());let n=za,o=Wa;if(3===i.valueBlock.value.length)n=Number(i.valueBlock.value[1].toBigInt()),o=Number(i.valueBlock.value[2].toBigInt());else if(2===i.valueBlock.value.length)throw new It("Could not derive key size and iterations from PEM file - please use @libp2p/rsa to re-import your key");const a=t.valueBlock.value[1].valueBlock.value[1],l=a.valueBlock.value[0].toString();if("OBJECT IDENTIFIER : 1.2.840.113549.3.7"===l);else if("OBJECT IDENTIFIER : 1.3.14.3.2.7"===l);else if("OBJECT IDENTIFIER : 2.16.840.1.101.3.4.1.2"===l);else if("OBJECT IDENTIFIER : 2.16.840.1.101.3.4.1.22"===l);else if("OBJECT IDENTIFIER : 2.16.840.1.101.3.4.1.42"!==l)throw new It("Only AES-CBC encryption schemes are supported");const c=Ja(a.valueBlock.value[1].getValue());return{cipherText:Ja(e.valueBlock.value[1].getValue()),salt:r,iterations:n,keySize:o,iv:c}}(n),d=await Ei(Ri,t,a,{c:l,dkLen:c}),u=await s.subtle.importKey("raw",d,"AES-CBC",!1,["decrypt"]),g=Ja(await s.subtle.decrypt({name:"AES-CBC",iv:o},u,h)),{result:p}=yo(g);i=Qa(p)}else{if(!e.includes("-----BEGIN PRIVATE KEY-----"))throw new It("Could not parse private key from PEM data");{const t=me(e.replace("-----BEGIN PRIVATE KEY-----","").replace("-----END PRIVATE KEY-----","").replace(/\n/g,"").trim(),"base64pad"),{result:s}=yo(t);i=Qa(s)}}const r=Zt(i);if("RSA"!==r.type)throw new It("Could not parse RSA private key from PEM data");return r}(e,t)}function Qa(e){return Ja(e.valueBlock.value[2].getValue())}function Ja(e){return new Uint8Array(e,0,e.byteLength)}const Ya="/info/",Za=new WeakMap,Xa=14,el=16,tl=1e3,sl={dek:{keyLength:64,iterationCount:1e4,salt:"you should override this value with a crypto secure random number",hash:"sha2-512"}};function il(e){return null!=e&&("string"==typeof e&&(e===Rn(e.trim())&&e.length>0))}async function rl(){const e=800*Math.random()+200;await new Promise(t=>setTimeout(t,e))}function nl(e){return new H("/pkcs8/"+e)}function ol(e){return new H(Ya+e)}f=Symbol.toStringTag,p=ot;class al{constructor(e,t){var s,i,r,n,o,a,l,c,h,d;if(B(this,"components"),B(this,"init"),B(this,"log"),B(this,"self"),B(this,f,"@libp2p/keychain"),B(this,p,["@libp2p/keychain"]),this.components=e,this.log=e.logger.forComponent("libp2p:keychain"),this.init=Es(sl,t),this.self=t.selfKey??"self",null!=this.init.pass&&(null==(s=this.init.pass)?void 0:s.length)<20)throw new Error("pass must be least 20 characters");if(null!=(null==(i=this.init.dek)?void 0:i.keyLength)&&this.init.dek.keyLength<Xa)throw new Error(`dek.keyLength must be least ${Xa} bytes`);if(null!=(null==(n=null==(r=this.init.dek)?void 0:r.salt)?void 0:n.length)&&this.init.dek.salt.length<el)throw new Error(`dek.saltLength must be least ${el} bytes`);if(null!=(null==(o=this.init.dek)?void 0:o.iterationCount)&&this.init.dek.iterationCount<tl)throw new Error(`dek.iterationCount must be least ${tl}`);const u=null!=this.init.pass&&null!=(null==(a=this.init.dek)?void 0:a.salt)?Ai(this.init.pass,null==(l=this.init.dek)?void 0:l.salt,null==(c=this.init.dek)?void 0:c.iterationCount,null==(h=this.init.dek)?void 0:h.keyLength,null==(d=this.init.dek)?void 0:d.hash):"";Za.set(this,{dek:u})}static generateOptions(){const e=Object.assign({},sl),t=3*Math.ceil(el/3);return e.dek.salt=St(ee(t),"base64"),e}static get options(){return sl}async findKeyByName(e){if(!il(e))throw await rl(),new It(`Invalid key name '${e}'`);const t=ol(e);try{const e=await this.components.datastore.get(t);return JSON.parse(St(e))}catch(s){throw await rl(),this.log.error(s),new Et(`Key '${e}' does not exist.`)}}async findKeyById(e){try{const t={prefix:Ya};for await(const s of this.components.datastore.query(t)){const t=JSON.parse(St(s.value));if(t.id===e)return t}throw new It(`Key with id '${e}' does not exist.`)}catch(t){throw await rl(),t}}async importKey(e,t){if(!il(e))throw await rl(),new It(`Invalid key name '${e}'`);if(null==t)throw await rl(),new It("Key is required");const s=nl(e);if(await this.components.datastore.has(s))throw await rl(),new It(`Key '${e}' already exists`);let i,r;try{i=await async function(e){const t=Jt(e),s=await ke.digest(t);return Le.encode(s.bytes).substring(1)}(t);const e=Za.get(this);if(null==e)throw new It("dek missing");const s=e.dek;r=await ja(t,s,"RSA"===t.type?"pkcs-8":"libp2p-key")}catch(a){throw await rl(),a}const n={name:e,id:i},o=this.components.datastore.batch();return o.put(s,me(r)),o.put(ol(e),me(JSON.stringify(n))),await o.commit(),n}async exportKey(e){if(!il(e))throw await rl(),new It(`Invalid key name '${e}'`);const t=nl(e);try{const e=await this.components.datastore.get(t),s=St(e),i=Za.get(this);if(null==i)throw new It("dek missing");const r=i.dek;return await Ka(s,r)}catch(s){throw await rl(),s}}async removeKey(e){if(!il(e)||e===this.self)throw await rl(),new It(`Invalid key name '${e}'`);const t=nl(e),s=await this.findKeyByName(e),i=this.components.datastore.batch();return i.delete(t),i.delete(ol(e)),await i.commit(),s}async listKeys(){const e={prefix:Ya},t=[];for await(const s of this.components.datastore.query(e))t.push(JSON.parse(St(s.value)));return t}async renameKey(e,t){if(!il(e)||e===this.self)throw await rl(),new It(`Invalid old key name '${e}'`);if(!il(t)||t===this.self)throw await rl(),new It(`Invalid new key name '${t}'`);const s=nl(e),i=nl(t),r=ol(e),n=ol(t);if(await this.components.datastore.has(i))throw await rl(),new It(`Key '${t}' already exists`);try{const e=await this.components.datastore.get(s),o=await this.components.datastore.get(r),a=JSON.parse(St(o));a.name=t;const l=this.components.datastore.batch();return l.put(i,e),l.put(n,me(JSON.stringify(a))),l.delete(s),l.delete(r),await l.commit(),a}catch(o){throw await rl(),o}}async rotateKeychainPass(e,t){var s,i,r,n;if("string"!=typeof e)throw await rl(),new It(`Invalid old pass type '${typeof e}'`);if("string"!=typeof t)throw await rl(),new It(`Invalid new pass type '${typeof t}'`);if(t.length<20)throw await rl(),new It(`Invalid pass length ${t.length}`);this.log("recreating keychain");const o=Za.get(this);if(null==o)throw new It("dek missing");const a=o.dek;this.init.pass=t;const l=null!=t&&null!=(null==(s=this.init.dek)?void 0:s.salt)?Ai(t,this.init.dek.salt,null==(i=this.init.dek)?void 0:i.iterationCount,null==(r=this.init.dek)?void 0:r.keyLength,null==(n=this.init.dek)?void 0:n.hash):"";Za.set(this,{dek:l});const c=await this.listKeys();for(const h of c){const e=await this.components.datastore.get(nl(h.name)),t=St(e),s=await Ka(t,a),i=l.toString(),r=await ja(s,i,"RSA"===s.type?"pkcs-8":"libp2p-key"),n=this.components.datastore.batch(),o={name:h.name,id:h.id};n.put(nl(h.name),me(r)),n.put(ol(h.name),me(JSON.stringify(o))),await n.commit()}this.log("keychain reconstructed")}}function ll(e={}){return t=>new al(t,e)}function cl(e){if(null!=e){if("function"==typeof e[Symbol.iterator])return e[Symbol.iterator]();if("function"==typeof e[Symbol.asyncIterator])return e[Symbol.asyncIterator]();if("function"==typeof e.next)return e}throw new Error("argument is not an iterator or iterable")}class hl extends Error{constructor(e="The frame was invalid"){super(e),this.name="InvalidFrameError"}}B(hl,"name","InvalidFrameError");class dl extends Error{constructor(e="Unrequested ping error"){super(e),this.name="UnrequestedPingError"}}B(dl,"name","UnrequestedPingError");class ul extends Error{constructor(e="Unrequested ping error"){super(e),this.name="NotMatchingPingError"}}B(ul,"name","NotMatchingPingError");class gl extends Error{constructor(e="Invalid state"){super(e),this.name="InvalidStateError"}}B(gl,"name","InvalidStateError");class pl extends Error{constructor(e="Strean already exists"){super(e),this.name="StreamAlreadyExistsError"}}B(pl,"name","StreamAlreadyExistsError");class fl extends Error{constructor(e="Decode invalid version"){super(e),this.name="DecodeInvalidVersionError"}}B(fl,"name","DecodeInvalidVersionError");class ml extends Error{constructor(e="Both clients"){super(e),this.name="BothClientsError"}}B(ml,"name","BothClientsError");class wl extends Error{constructor(e="Receive window exceeded"){super(e),this.name="ReceiveWindowExceededError"}}B(wl,"name","ReceiveWindowExceededError");const yl=new Set([hl.name,dl.name,ul.name,pl.name,fl.name,ml.name,wl.name]),vl=262144,bl={enableKeepAlive:!0,keepAliveInterval:3e4,maxInboundStreams:1e3,maxOutboundStreams:1e3,initialStreamWindowSize:vl,maxStreamWindowSize:16777216,maxMessageSize:65536};var kl,El,Sl,Il;(El=kl||(kl={}))[El.Data=0]="Data",El[El.WindowUpdate=1]="WindowUpdate",El[El.Ping=2]="Ping",El[El.GoAway=3]="GoAway",(Il=Sl||(Sl={}))[Il.SYN=1]="SYN",Il[Il.ACK=2]="ACK",Il[Il.FIN=4]="FIN",Il[Il.RST=8]="RST",Object.values(Sl).filter(e=>"string"!=typeof e);var Pl,Rl;(Rl=Pl||(Pl={}))[Rl.NormalTermination=0]="NormalTermination",Rl[Rl.ProtocolError=1]="ProtocolError",Rl[Rl.InternalError=2]="InternalError";const xl=2**24;let Al=class{constructor(e){B(this,"source"),B(this,"buffer"),B(this,"frameInProgress"),this.source=function(e){if(void 0!==e[Symbol.iterator]){const t=e[Symbol.iterator]();return t.return=void 0,{[Symbol.iterator]:()=>t}}if(void 0!==e[Symbol.asyncIterator]){const t=e[Symbol.asyncIterator]();return t.return=void 0,{[Symbol.asyncIterator]:()=>t}}throw new Error("a source must be either an iterable or an async iterable")}(e),this.buffer=new Be,this.frameInProgress=!1}async*emitFrames(){for await(const e of this.source)for(this.buffer.append(e);;){const e=this.readHeader();if(void 0===e)break;const{type:t,length:s}=e;t===kl.Data?(this.frameInProgress=!0,yield{header:e,readData:this.readBytes.bind(this,s)}):yield{header:e}}}readHeader(){if(this.frameInProgress)throw new gl("decoding frame already in progress");if(this.buffer.length<12)return;const e=function(e){if(0!==e[0])throw new hl("Invalid frame version");return{type:e[1],flag:(e[2]<<8)+e[3],streamID:e[4]*xl+(e[5]<<16)+(e[6]<<8)+e[7],length:e[8]*xl+(e[9]<<16)+(e[10]<<8)+e[11]}}(this.buffer.subarray(0,12));return this.buffer.consume(12),e}async readBytes(e){if(this.buffer.length<e)for await(const s of this.source)if(this.buffer.append(s),this.buffer.length>=e)break;const t=this.buffer.sublist(0,e);return this.buffer.consume(e),this.frameInProgress=!1,t}};function Cl(e){const t=new Uint8Array(12);return t[1]=e.type,t[2]=e.flag>>>8,t[3]=e.flag,t[4]=e.streamID>>>24,t[5]=e.streamID>>>16,t[6]=e.streamID>>>8,t[7]=e.streamID,t[8]=e.length>>>24,t[9]=e.length>>>16,t[10]=e.length>>>8,t[11]=e.length,t}function Tl(e,t){var s,i;const r=null==(i=(s=cl(e)).return)?void 0:i.call(s);var n;null!=(n=r)&&"function"==typeof n.then&&"function"==typeof n.catch&&"function"==typeof n.finally&&r.catch(e=>{t.error("could not cause iterator to return",e)})}function Bl(e){return null!=e&&("function"==typeof e.then&&"function"==typeof e.catch&&"function"==typeof e.finally)}class Nl{constructor(e){B(this,"id"),B(this,"direction"),B(this,"timeline"),B(this,"protocol"),B(this,"metadata"),B(this,"source"),B(this,"status"),B(this,"readStatus"),B(this,"writeStatus"),B(this,"log"),B(this,"sinkController"),B(this,"sinkEnd"),B(this,"closed"),B(this,"endErr"),B(this,"streamSource"),B(this,"onEnd"),B(this,"onCloseRead"),B(this,"onCloseWrite"),B(this,"onReset"),B(this,"onAbort"),B(this,"sendCloseWriteTimeout"),B(this,"sendingData"),this.sinkController=new AbortController,this.sinkEnd=vt(),this.closed=vt(),this.log=e.log,this.status="open",this.readStatus="ready",this.writeStatus="ready",this.id=e.id,this.metadata=e.metadata??{},this.direction=e.direction,this.timeline={open:Date.now()},this.sendCloseWriteTimeout=e.sendCloseWriteTimeout??5e3,this.onEnd=e.onEnd,this.onCloseRead=e.onCloseRead,this.onCloseWrite=e.onCloseWrite,this.onReset=e.onReset,this.onAbort=e.onAbort,this.source=this.streamSource=bt({onEnd:e=>{null!=e?this.log.trace("source ended with error",e):this.log.trace("source ended"),this.onSourceEnd(e)}}),this.sink=this.sink.bind(this)}async sink(e){if("ready"!==this.writeStatus)throw new es(`writable end state is "${this.writeStatus}" not "ready"`);try{this.writeStatus="writing";const t={signal:this.sinkController.signal};if("outbound"===this.direction){const e=this.sendNewStream(t);Bl(e)&&await e}const s=()=>{Tl(e,this.log)};try{this.sinkController.signal.addEventListener("abort",s),this.log.trace("sink reading from source");for await(let s of e){s=s instanceof Uint8Array?new Be(s):s;const e=this.sendData(s,t);Bl(e)&&(this.sendingData=vt(),await e,this.sendingData.resolve(),this.sendingData=void 0)}}finally{this.sinkController.signal.removeEventListener("abort",s)}this.log.trace('sink finished reading from source, write status is "%s"',this.writeStatus),"writing"===this.writeStatus&&(this.writeStatus="closing",this.log.trace("send close write to remote"),await this.sendCloseWrite({signal:AbortSignal.timeout(this.sendCloseWriteTimeout)}),this.writeStatus="closed"),this.onSinkEnd()}catch(t){throw this.log.trace("sink ended with error, calling abort with error",t),this.abort(t),t}finally{this.log.trace("resolve sink end"),this.sinkEnd.resolve()}}onSourceEnd(e){var t;null==this.timeline.closeRead&&(this.timeline.closeRead=Date.now(),this.readStatus="closed",null!=e&&null==this.endErr&&(this.endErr=e),null==(t=this.onCloseRead)||t.call(this),null!=this.timeline.closeWrite?(this.log.trace("source and sink ended"),this.timeline.close=Date.now(),"aborted"!==this.status&&"reset"!==this.status&&(this.status="closed"),null!=this.onEnd&&this.onEnd(this.endErr),this.closed.resolve()):this.log.trace("source ended, waiting for sink to end"))}onSinkEnd(e){var t;null==this.timeline.closeWrite&&(this.timeline.closeWrite=Date.now(),this.writeStatus="closed",null!=e&&null==this.endErr&&(this.endErr=e),null==(t=this.onCloseWrite)||t.call(this),null!=this.timeline.closeRead?(this.log.trace("sink and source ended"),this.timeline.close=Date.now(),"aborted"!==this.status&&"reset"!==this.status&&(this.status="closed"),null!=this.onEnd&&this.onEnd(this.endErr),this.closed.resolve()):this.log.trace("sink ended, waiting for source to end"))}async close(e){"open"===this.status&&(this.log.trace("closing gracefully"),this.status="closing",await kt(Promise.all([this.closeWrite(e),this.closeRead(e),this.closed.promise]),null==e?void 0:e.signal),this.status="closed",this.log.trace("closed gracefully"))}async closeRead(e={}){if("closing"===this.readStatus||"closed"===this.readStatus)return;this.log.trace('closing readable end of stream with starting read status "%s"',this.readStatus);const t=this.readStatus;this.readStatus="closing","reset"!==this.status&&"aborted"!==this.status&&null==this.timeline.closeRead&&(this.log.trace("send close read to remote"),await this.sendCloseRead(e)),"ready"===t&&(this.log.trace("ending internal source queue with %d queued bytes",this.streamSource.readableLength),this.streamSource.end()),this.log.trace("closed readable end of stream")}async closeWrite(e={}){"closing"!==this.writeStatus&&"closed"!==this.writeStatus&&(this.log.trace('closing writable end of stream with starting write status "%s"',this.writeStatus),"ready"===this.writeStatus&&(this.log.trace("sink was never sunk, sink an empty array"),await kt(this.sink([]),e.signal)),"writing"===this.writeStatus&&(null!=this.sendingData&&await kt(this.sendingData.promise,e.signal),this.log.trace("aborting source passed to .sink"),this.sinkController.abort(),await kt(this.sinkEnd.promise,e.signal)),this.writeStatus="closed",this.log.trace("closed writable end of stream"))}abort(e){var t;if("closed"===this.status||"aborted"===this.status||"reset"===this.status)return;this.log("abort with error",e),this.log("try to send reset to remote");const s=this.sendReset();Bl(s)&&s.catch(e=>{this.log.error("error sending reset message",e)}),this.status="aborted",this.timeline.abort=Date.now(),this._closeSinkAndSource(e),null==(t=this.onAbort)||t.call(this,e)}reset(){var e;if("closed"===this.status||"aborted"===this.status||"reset"===this.status)return;const t=new ts("stream reset");this.status="reset",this.timeline.reset=Date.now(),this._closeSinkAndSource(t),null==(e=this.onReset)||e.call(this)}_closeSinkAndSource(e){this._closeSink(e),this._closeSource(e)}_closeSink(e){"writing"===this.writeStatus&&(this.log.trace("end sink source"),this.sinkController.abort()),this.onSinkEnd(e)}_closeSource(e){"closing"!==this.readStatus&&"closed"!==this.readStatus&&(this.log.trace("ending source with %d bytes to be read by consumer",this.streamSource.readableLength),this.readStatus="closing",this.streamSource.end(e))}remoteCloseWrite(){"closing"!==this.readStatus&&"closed"!==this.readStatus?(this.log.trace("remote close write"),this._closeSource()):this.log("received remote close write but local source is already closed")}remoteCloseRead(){"closing"!==this.writeStatus&&"closed"!==this.writeStatus?(this.log.trace("remote close read"),this._closeSink()):this.log("received remote close read but local sink is already closed")}destroy(){"closed"!==this.status&&"aborted"!==this.status&&"reset"!==this.status?(this.log.trace("stream destroyed"),this._closeSinkAndSource()):this.log("received destroy but we are already closed")}sourcePush(e){this.streamSource.push(e)}sourceReadableLength(){return this.streamSource.readableLength}}var _l,Dl;(Dl=_l||(_l={}))[Dl.Init=0]="Init",Dl[Dl.SYNSent=1]="SYNSent",Dl[Dl.SYNReceived=2]="SYNReceived",Dl[Dl.Established=3]="Established",Dl[Dl.Finished=4]="Finished";class Ml extends Nl{constructor(e){super({...e,onEnd:t=>{var s;this.state=_l.Finished,null==(s=e.onEnd)||s.call(e,t)}}),B(this,"name"),B(this,"state"),B(this,"config"),B(this,"_id"),B(this,"sendWindowCapacity"),B(this,"sendWindowCapacityUpdate"),B(this,"recvWindow"),B(this,"recvWindowCapacity"),B(this,"epochStart"),B(this,"getRTT"),B(this,"sendFrame"),this.config=e.config,this._id=parseInt(e.id,10),this.name=e.name,this.state=e.state,this.sendWindowCapacity=vl,this.recvWindow=this.config.initialStreamWindowSize,this.recvWindowCapacity=this.recvWindow,this.epochStart=Date.now(),this.getRTT=e.getRTT,this.sendFrame=e.sendFrame,this.source=Ps(this.source,()=>{this.sendWindowUpdate()})}async sendNewStream(){}async sendData(e,t={}){var s,i;for(e=e.sublist();0!==e.byteLength;){if(0===this.sendWindowCapacity&&(null==(s=this.log)||s.trace("wait for send window capacity, status %s",this.status),await this.waitForSendWindowCapacity(t),"closed"===this.status||"aborted"===this.status||"reset"===this.status))return void(null==(i=this.log)||i.trace("%s while waiting for send window capacity",this.status));const r=Math.min(this.sendWindowCapacity,this.config.maxMessageSize-12,e.length),n=this.getSendFlags();this.sendFrame({type:kl.Data,flag:n,streamID:this._id,length:r},e.sublist(0,r)),this.sendWindowCapacity-=r,e.consume(r)}}async sendReset(){this.sendFrame({type:kl.WindowUpdate,flag:Sl.RST,streamID:this._id,length:0})}async sendCloseWrite(){const e=this.getSendFlags()|Sl.FIN;this.sendFrame({type:kl.WindowUpdate,flag:e,streamID:this._id,length:0})}async sendCloseRead(){}async waitForSendWindowCapacity(e={}){var t,s;if(this.sendWindowCapacity>0)return;let i,r;const n=()=>{"open"===this.status||"closing"===this.status?r(new Ht("Stream aborted")):i()};null==(t=e.signal)||t.addEventListener("abort",n);try{await new Promise((e,t)=>{this.sendWindowCapacityUpdate=()=>{e()},r=t,i=e})}finally{null==(s=e.signal)||s.removeEventListener("abort",n)}}handleWindowUpdate(e){var t,s;null==(t=this.log)||t.trace("stream received window update id=%s",this._id),this.processFlags(e.flag);const i=this.sendWindowCapacity;this.sendWindowCapacity+=e.length,0===i&&e.length>0&&(null==(s=this.sendWindowCapacityUpdate)||s.call(this))}async handleData(e,t){var s;if(null==(s=this.log)||s.trace("stream received data id=%s",this._id),this.processFlags(e.flag),this.recvWindowCapacity<e.length)throw new wl("Receive window exceeded");const i=await t();this.recvWindowCapacity-=e.length,this.sourcePush(i)}processFlags(e){(e&Sl.ACK)===Sl.ACK&&this.state===_l.SYNSent&&(this.state=_l.Established),(e&Sl.FIN)===Sl.FIN&&this.remoteCloseWrite(),(e&Sl.RST)===Sl.RST&&this.reset()}getSendFlags(){switch(this.state){case _l.Init:return this.state=_l.SYNSent,Sl.SYN;case _l.SYNReceived:return this.state=_l.Established,Sl.ACK;default:return 0}}sendWindowUpdate(){const e=this.getSendFlags(),t=Date.now(),s=this.getRTT();if(0===e&&s>-1&&t-this.epochStart<4*s&&(this.recvWindow=Math.min(2*this.recvWindow,this.config.maxStreamWindowSize)),this.recvWindowCapacity>=this.recvWindow&&0===e)return;const i=this.recvWindow-this.recvWindowCapacity;this.recvWindowCapacity=this.recvWindow,this.epochStart=t,this.sendFrame({type:kl.WindowUpdate,flag:e,streamID:this._id,length:i})}}const Ll="/yamux/1.0.0";w=Symbol.toStringTag,m=ot;class Ol{constructor(e,t={}){B(this,"protocol",Ll),B(this,"_components"),B(this,"_init"),B(this,w,"@chainsafe/libp2p-yamux"),B(this,m,["@libp2p/stream-multiplexing"]),this._components=e,this._init=t}createStreamMuxer(e){return new Ul(this._components,{...this._init,...e})}}class Ul{constructor(e,t){var s;B(this,"protocol",Ll),B(this,"source"),B(this,"sink"),B(this,"config"),B(this,"log"),B(this,"logger"),B(this,"closeController"),B(this,"nextStreamID"),B(this,"_streams"),B(this,"nextPingID"),B(this,"activePing"),B(this,"rtt"),B(this,"client"),B(this,"localGoAway"),B(this,"remoteGoAway"),B(this,"numInboundStreams"),B(this,"numOutboundStreams"),B(this,"onIncomingStream"),B(this,"onStreamEnd"),this.client="outbound"===t.direction,this.config={...bl,...t},this.logger=e.logger,this.log=this.logger.forComponent("libp2p:yamux"),function(e){if(e.keepAliveInterval<=0)throw new It("keep-alive interval must be positive");if(e.maxInboundStreams<0)throw new It("max inbound streams must be larger or equal 0");if(e.maxOutboundStreams<0)throw new It("max outbound streams must be larger or equal 0");if(e.initialStreamWindowSize<vl)throw new It("InitialStreamWindowSize must be larger or equal 256 kB");if(e.maxStreamWindowSize<e.initialStreamWindowSize)throw new It("MaxStreamWindowSize must be larger than the InitialStreamWindowSize");if(e.maxStreamWindowSize>2**32-1)throw new It("MaxStreamWindowSize must be less than equal MAX_UINT32");if(e.maxMessageSize<1024)throw new It("MaxMessageSize must be greater than a kilobyte")}(this.config),this.closeController=new AbortController,qe(1/0,this.closeController.signal),this.onIncomingStream=t.onIncomingStream,this.onStreamEnd=t.onStreamEnd,this._streams=new Map,this.source=bt({onEnd:()=>{var e;null==(e=this.log)||e.trace("muxer source ended"),this._streams.forEach(e=>{e.destroy()})}}),this.sink=async e=>{var t,s,i;const r=()=>{const t=cl(e);if(null!=t.return){const e=t.return();null!=(s=e)&&"function"==typeof s.then&&e.catch(e=>{var t;null==(t=this.log)||t.call(this,"could not cause sink source to return",e)})}var s};let n,o;try{const t=new Al(e);try{this.closeController.signal.addEventListener("abort",r);for await(const e of t.emitFrames())await this.handleFrame(e.header,e.readData)}finally{this.closeController.signal.removeEventListener("abort",r)}n=Pl.NormalTermination}catch(a){yl.has(a.name)?(null==(t=this.log)||t.error("protocol error in sink",a),n=Pl.ProtocolError):(null==(s=this.log)||s.error("internal error in sink",a),n=Pl.InternalError),o=a}null==(i=this.log)||i.trace("muxer sink ended"),null!=o?this.abort(o,n):await this.close({reason:n})},this.numInboundStreams=0,this.numOutboundStreams=0,this.nextStreamID=this.client?1:2,this.nextPingID=0,this.rtt=-1,null==(s=this.log)||s.trace("muxer created"),this.config.enableKeepAlive&&this.keepAliveLoop().catch(e=>{var t;return null==(t=this.log)?void 0:t.error("keepalive error: %s",e)}),this.ping().catch(e=>{var t;return null==(t=this.log)?void 0:t.error("ping error: %s",e)})}get streams(){return Array.from(this._streams.values())}newStream(e){var t;if(void 0!==this.remoteGoAway)throw new ss("Muxer closed remotely");if(void 0!==this.localGoAway)throw new ss("Muxer closed locally");const s=this.nextStreamID;if(this.nextStreamID+=2,this.numOutboundStreams>=this.config.maxOutboundStreams)throw new is("max outbound streams exceeded");null==(t=this.log)||t.trace("new outgoing stream id=%s",s);const i=this._newStream(s,e,_l.Init,"outbound");return this._streams.set(s,i),this.numOutboundStreams++,i.sendWindowUpdate(),i}async ping(){if(void 0!==this.remoteGoAway)throw new ss("Muxer closed remotely");if(void 0!==this.localGoAway)throw new ss("Muxer closed locally");if(void 0===this.activePing){let e=()=>{};this.activePing={id:this.nextPingID++,promise:new Promise((t,s)=>{const i=()=>{s(new ss("Muxer closed locally"))};this.closeController.signal.addEventListener("abort",i,{once:!0}),e=()=>{this.closeController.signal.removeEventListener("abort",i),t()}}),resolve:e};const t=Date.now();this.sendPing(this.activePing.id);try{await this.activePing.promise}finally{delete this.activePing}const s=Date.now();this.rtt=s-t}else await this.activePing.promise;return this.rtt}getRTT(){return this.rtt}async close(e={}){var t;if(this.closeController.signal.aborted)return;const s=(null==e?void 0:e.reason)??Pl.NormalTermination;if(null==(t=this.log)||t.trace("muxer close reason=%s",s),null==e.signal){const t=AbortSignal.timeout(500);e={...e,signal:t}}try{await Promise.all([...this._streams.values()].map(async t=>t.close(e))),this.sendGoAway(s),this._closeMuxer()}catch(i){this.abort(i)}}abort(e,t){var s;if(!this.closeController.signal.aborted){t=t??Pl.InternalError,null==(s=this.log)||s.error("muxer abort reason=%s error=%s",t,e);for(const t of this._streams.values())t.abort(e);this.sendGoAway(t),this._closeMuxer()}}isClosed(){return this.closeController.signal.aborted}_closeMuxer(){this.closeController.abort(),this.source.end()}_newStream(e,t,s,i){if(null!=this._streams.get(e))throw new It("Stream already exists with that id");const r=new Ml({id:e.toString(),name:t,state:s,direction:i,sendFrame:this.sendFrame.bind(this),onEnd:()=>{var t;this.closeStream(e),null==(t=this.onStreamEnd)||t.call(this,r)},log:this.logger.forComponent(`libp2p:yamux:${i}:${e}`),config:this.config,getRTT:this.getRTT.bind(this)});return r}closeStream(e){this.client===(e%2==0)?this.numInboundStreams--:this.numOutboundStreams--,this._streams.delete(e)}async keepAliveLoop(){var e;for(null==(e=this.log)||e.trace("muxer keepalive enabled interval=%s",this.config.keepAliveInterval);;){let e;try{await kt(new Promise(t=>{e=setTimeout(t,this.config.keepAliveInterval)}),this.closeController.signal),this.ping().catch(e=>{var t;return null==(t=this.log)?void 0:t.error("ping error: %s",e)})}catch(t){return void clearInterval(e)}}}async handleFrame(e,t){var s;const{streamID:i,type:r,length:n}=e;if(null==(s=this.log)||s.trace("received frame %o",e),0===i)switch(r){case kl.Ping:return void this.handlePing(e);case kl.GoAway:return void this.handleGoAway(n);default:throw new hl("Invalid frame type")}else switch(e.type){case kl.Data:case kl.WindowUpdate:return void(await this.handleStreamMessage(e,t));default:throw new hl("Invalid frame type")}}handlePing(e){var t,s;if(e.flag===Sl.SYN)null==(t=this.log)||t.trace("received ping request pingId=%s",e.length),this.sendPing(e.length,Sl.ACK);else{if(e.flag!==Sl.ACK)throw new hl("Invalid frame flag");null==(s=this.log)||s.trace("received ping response pingId=%s",e.length),this.handlePingResponse(e.length)}}handlePingResponse(e){if(void 0===this.activePing)throw new dl("ping not requested");if(this.activePing.id!==e)throw new ul("ping doesn't match our id");this.activePing.resolve()}handleGoAway(e){var t;null==(t=this.log)||t.trace("received GoAway reason=%s",Pl[e]??"unknown"),this.remoteGoAway=e;for(const s of this._streams.values())s.reset();this._closeMuxer()}async handleStreamMessage(e,t){var s,i;const{streamID:r,flag:n,type:o}=e;(n&Sl.SYN)===Sl.SYN&&this.incomingStream(r);const a=this._streams.get(r);if(void 0!==a)switch(o){case kl.WindowUpdate:return void a.handleWindowUpdate(e);case kl.Data:if(void 0===t)throw new Error("unreachable");return void(await a.handleData(e,t));default:throw new Error("unreachable")}else if(o===kl.Data){if(null==(s=this.log)||s.call(this,"discarding data for stream id=%s",r),void 0===t)throw new Error("unreachable");await t()}else null==(i=this.log)||i.trace("frame for missing stream id=%s",r)}incomingStream(e){var t,s,i;if(this.client!==(e%2==0))throw new It("Both endpoints are clients");if(this._streams.has(e))return;if(null==(t=this.log)||t.trace("new incoming stream id=%s",e),void 0!==this.localGoAway)return void this.sendFrame({type:kl.WindowUpdate,flag:Sl.RST,streamID:e,length:0});if(this.numInboundStreams>=this.config.maxInboundStreams)return null==(s=this.log)||s.call(this,"maxIncomingStreams exceeded, forcing stream reset"),void this.sendFrame({type:kl.WindowUpdate,flag:Sl.RST,streamID:e,length:0});const r=this._newStream(e,void 0,_l.SYNReceived,"inbound");this.numInboundStreams++,this._streams.set(e,r),null==(i=this.onIncomingStream)||i.call(this,r)}sendFrame(e,t){var s;if(null==(s=this.log)||s.trace("sending frame %o",e),e.type===kl.Data){if(void 0===t)throw new hl("Invalid frame");this.source.push(new Be(Cl(e),t))}else this.source.push(Cl(e))}sendPing(e,t=Sl.SYN){var s,i;t===Sl.SYN?null==(s=this.log)||s.trace("sending ping request pingId=%s",e):null==(i=this.log)||i.trace("sending ping response pingId=%s",e),this.sendFrame({type:kl.Ping,flag:t,streamID:0,length:e})}sendGoAway(e=Pl.NormalTermination){var t;null==(t=this.log)||t.call(this,"sending GoAway reason=%s",Pl[e]),this.localGoAway=e,this.sendFrame({type:kl.GoAway,flag:0,streamID:0,length:e})}}function $l(e={}){return t=>new Ol(t,e)}var Vl;!function(e){var t;let s;var i,r;let n;var o;let a;(t=e.MessageType||(e.MessageType={})).DIAL="DIAL",t.DIAL_RESPONSE="DIAL_RESPONSE",(i=s||(s={}))[i.DIAL=0]="DIAL",i[i.DIAL_RESPONSE=1]="DIAL_RESPONSE",function(e){e.codec=()=>Se(s)}(e.MessageType||(e.MessageType={})),(r=e.ResponseStatus||(e.ResponseStatus={})).OK="OK",r.E_DIAL_ERROR="E_DIAL_ERROR",r.E_DIAL_REFUSED="E_DIAL_REFUSED",r.E_BAD_REQUEST="E_BAD_REQUEST",r.E_INTERNAL_ERROR="E_INTERNAL_ERROR",(o=n||(n={}))[o.OK=0]="OK",o[o.E_DIAL_ERROR=100]="E_DIAL_ERROR",o[o.E_DIAL_REFUSED=101]="E_DIAL_REFUSED",o[o.E_BAD_REQUEST=200]="E_BAD_REQUEST",o[o.E_INTERNAL_ERROR=300]="E_INTERNAL_ERROR",function(e){e.codec=()=>Se(n)}(e.ResponseStatus||(e.ResponseStatus={})),function(e){let t;e.codec=()=>(null==t&&(t=Ie((e,t,s={})=>{if(!1!==s.lengthDelimited&&t.fork(),null!=e.id&&(t.uint32(10),t.bytes(e.id)),null!=e.addrs)for(const i of e.addrs)t.uint32(18),t.bytes(i);!1!==s.lengthDelimited&&t.ldelim()},(e,t,s={})=>{var i;const r={addrs:[]},n=null==t?e.len:e.pos+t;for(;e.pos<n;){const t=e.uint32();switch(t>>>3){case 1:r.id=e.bytes();break;case 2:if(null!=(null==(i=s.limits)?void 0:i.addrs)&&r.addrs.length===s.limits.addrs)throw new Ge('Decode error - map field "addrs" had too many elements');r.addrs.push(e.bytes());break;default:e.skipType(7&t)}}return r})),t),e.encode=t=>Pe(t,e.codec()),e.decode=(t,s)=>Re(t,e.codec(),s)}(e.PeerInfo||(e.PeerInfo={})),function(t){let s;t.codec=()=>(null==s&&(s=Ie((t,s,i={})=>{!1!==i.lengthDelimited&&s.fork(),null!=t.peer&&(s.uint32(10),e.PeerInfo.codec().encode(t.peer,s)),!1!==i.lengthDelimited&&s.ldelim()},(t,s,i={})=>{var r;const n={},o=null==s?t.len:t.pos+s;for(;t.pos<o;){const s=t.uint32();if(s>>>3==1)n.peer=e.PeerInfo.codec().decode(t,t.uint32(),{limits:null==(r=i.limits)?void 0:r.peer});else t.skipType(7&s)}return n})),s),t.encode=e=>Pe(e,t.codec()),t.decode=(e,s)=>Re(e,t.codec(),s)}(e.Dial||(e.Dial={})),function(t){let s;t.codec=()=>(null==s&&(s=Ie((t,s,i={})=>{!1!==i.lengthDelimited&&s.fork(),null!=t.status&&(s.uint32(8),e.ResponseStatus.codec().encode(t.status,s)),null!=t.statusText&&(s.uint32(18),s.string(t.statusText)),null!=t.addr&&(s.uint32(26),s.bytes(t.addr)),!1!==i.lengthDelimited&&s.ldelim()},(t,s,i={})=>{const r={},n=null==s?t.len:t.pos+s;for(;t.pos<n;){const s=t.uint32();switch(s>>>3){case 1:r.status=e.ResponseStatus.codec().decode(t);break;case 2:r.statusText=t.string();break;case 3:r.addr=t.bytes();break;default:t.skipType(7&s)}}return r})),s),t.encode=e=>Pe(e,t.codec()),t.decode=(e,s)=>Re(e,t.codec(),s)}(e.DialResponse||(e.DialResponse={})),e.codec=()=>(null==a&&(a=Ie((t,s,i={})=>{!1!==i.lengthDelimited&&s.fork(),null!=t.type&&(s.uint32(8),e.MessageType.codec().encode(t.type,s)),null!=t.dial&&(s.uint32(18),e.Dial.codec().encode(t.dial,s)),null!=t.dialResponse&&(s.uint32(26),e.DialResponse.codec().encode(t.dialResponse,s)),!1!==i.lengthDelimited&&s.ldelim()},(t,s,i={})=>{var r,n;const o={},a=null==s?t.len:t.pos+s;for(;t.pos<a;){const s=t.uint32();switch(s>>>3){case 1:o.type=e.MessageType.codec().decode(t);break;case 2:o.dial=e.Dial.codec().decode(t,t.uint32(),{limits:null==(r=i.limits)?void 0:r.dial});break;case 3:o.dialResponse=e.DialResponse.codec().decode(t,t.uint32(),{limits:null==(n=i.limits)?void 0:n.dialResponse});break;default:t.skipType(7&s)}}return o})),a),e.encode=t=>Pe(t,e.codec()),e.decode=(t,s)=>Re(t,e.codec(),s)}(Vl||(Vl={}));class Hl{constructor(e,t){B(this,"components"),B(this,"protocol"),B(this,"timeout"),B(this,"maxInboundStreams"),B(this,"maxOutboundStreams"),B(this,"maxMessageSize"),B(this,"started"),B(this,"log"),B(this,"topologyId"),B(this,"dialResults"),B(this,"findPeers"),B(this,"addressFilter"),B(this,"connectionThreshold"),B(this,v,"@libp2p/autonat"),B(this,y,["@libp2p/autonat"]),this.components=e,this.log=e.logger.forComponent("libp2p:auto-nat"),this.started=!1,this.protocol=`/${t.protocolPrefix??"libp2p"}/autonat/1.0.0`,this.timeout=t.timeout??3e4,this.maxInboundStreams=t.maxInboundStreams??2,this.maxOutboundStreams=t.maxOutboundStreams??20,this.connectionThreshold=t.connectionThreshold??80,this.maxMessageSize=t.maxMessageSize??8192,this.dialResults=Y({name:"libp2p_autonat_dial_results",metrics:e.metrics}),this.findPeers=function(e,t,s){let i,r,n=!1;function o(){const a={signal:r.signal};if(null!=(null==s?void 0:s.timeout)){const e=We([r.signal,AbortSignal.timeout(s.timeout)]);a.signal=e}n=!0,Promise.resolve().then(async()=>{await e(a)}).catch(()=>{}).finally(()=>{n=!1,r.signal.aborted||(i=setTimeout(o,t))})}const a=at(o,(null==s?void 0:s.debounce)??100);let l=!1;return{setInterval:e=>{t!==e&&(t=e,null!=i&&(clearTimeout(i),i=setTimeout(o,t)))},setTimeout:e=>{s??(s={}),s.timeout=e},run:()=>{n||(clearTimeout(i),a())},start:()=>{l||(l=!0,r=new AbortController,qe(1/0,r.signal),!0===(null==s?void 0:s.runImmediately)?queueMicrotask(()=>{o()}):i=setTimeout(o,t))},stop:()=>{clearTimeout(i),null==r||r.abort(),l=!1}}}(this.findRandomPeers.bind(this),6e4),this.addressFilter=yt(1024)}get[(v=Symbol.toStringTag,y=ot,lt)](){return["@libp2p/identify"]}isStarted(){return this.started}async start(){this.started||(await this.components.registrar.handle(this.protocol,e=>{this.handleIncomingAutonatStream(e).catch(e=>{this.log.error("error handling incoming autonat stream - %e",e)})},{maxInboundStreams:this.maxInboundStreams,maxOutboundStreams:this.maxOutboundStreams}),this.topologyId=await this.components.registrar.register(this.protocol,{onConnect:(e,t)=>{this.verifyExternalAddresses(t).catch(e=>{this.log.error("could not verify addresses - %e",e)})}}),this.findPeers.start(),this.started=!0)}async stop(){await this.components.registrar.unhandle(this.protocol),null!=this.topologyId&&await this.components.registrar.unhandle(this.topologyId),this.dialResults.clear(),this.findPeers.stop(),this.started=!1}allAddressesAreVerified(){return this.components.addressManager.getAddressesWithMetadata().every(e=>e.expires>Date.now()||e.verified)}async findRandomPeers(e){if(this.allAddressesAreVerified())return;const t=We([AbortSignal.timeout(1e4),null==e?void 0:e.signal]);try{this.log("starting random walk to find peers to run AutoNAT");for await(const e of this.components.randomWalk.walk({signal:t}))if(await this.components.connectionManager.isDialable(e.multiaddrs)){try{this.log.trace("dial random peer %p",e.id),await this.components.connectionManager.openConnection(e.multiaddrs,{signal:t})}catch{}if(this.allAddressesAreVerified())return void this.log("stopping random walk, all addresses are verified");if(!this.hasConnectionCapacity())return void this.log("stopping random walk, too close to max connections")}else this.log.trace("random peer %p was not dialable %s",e.id,e.multiaddrs.map(e=>e.toString()).join(", "))}catch{}}async handleIncomingAutonatStream(e){const t=AbortSignal.timeout(this.timeout),s=Rs(e.stream,{maxDataLength:this.maxMessageSize}).pb(Vl);try{const i=await s.read({signal:t}),r=await this.handleAutonatMessage(i,e.connection,{signal:t});await s.write(r,{signal:t}),await s.unwrap().unwrap().close({signal:t})}catch(i){this.log.error("error handling incoming autonat stream - %e",i),e.stream.abort(i)}}async handleAutonatMessage(e,t,s){const i=this.components.addressManager.getAddresses().map(e=>e.toOptions().host),r=e.dial;if(null==r)return this.log.error("dial was missing from message"),{type:Vl.MessageType.DIAL_RESPONSE,dialResponse:{status:Vl.ResponseStatus.E_BAD_REQUEST,statusText:"No Dial message found in message"}};let n;const o=r.peer;if(null==(null==o?void 0:o.id))return this.log.error("PeerId missing from message"),{type:Vl.MessageType.DIAL_RESPONSE,dialResponse:{status:Vl.ResponseStatus.E_BAD_REQUEST,statusText:"missing peer info"}};try{const e=De(o.id);n=rs(e)}catch(h){return this.log.error("invalid PeerId - %e",h),{type:Vl.MessageType.DIAL_RESPONSE,dialResponse:{status:Vl.ResponseStatus.E_BAD_REQUEST,statusText:"bad peer id"}}}if(this.log("incoming request from %p",n),!t.remotePeer.equals(n))return this.log("target peer %p did not equal sending peer %p",n,t.remotePeer),{type:Vl.MessageType.DIAL_RESPONSE,dialResponse:{status:Vl.ResponseStatus.E_BAD_REQUEST,statusText:"peer id mismatch"}};const a=o.addrs.map(e=>Qe(e)).filter(e=>{const s=e.toOptions();return!te(e)&&(s.host!==t.remoteAddr.toOptions().host?(this.log.trace("not dialing %a - target host did not match remote host %a",e,t.remoteAddr),!1):!i.includes(s.host)&&(null!=this.components.transportManager.dialTransportForMultiaddr(e)||(this.log.trace("not dialing %a - transport unsupported",e),!1)))}).map(e=>(null==e.getPeerId()&&(e=e.encapsulate(`/p2p/${n.toString()}`)),e));if(0===a.length)return this.log("refused to dial all multiaddrs for %p from message",n),{type:Vl.MessageType.DIAL_RESPONSE,dialResponse:{status:Vl.ResponseStatus.E_DIAL_REFUSED,statusText:"no dialable addresses"}};this.log("dial multiaddrs %s for peer %p",a.map(e=>e.toString()).join(", "),n);let l="",c=a[0];for(const d of a){let e;c=d;try{if(e=await this.components.connectionManager.openConnection(d,s),!e.remoteAddr.equals(d))throw this.log.error("tried to dial %a but dialed %a",d,e.remoteAddr),new Error("Unexpected remote address");return this.log("successfully dialed %p via %a",n,d),{type:Vl.MessageType.DIAL_RESPONSE,dialResponse:{status:Vl.ResponseStatus.OK,addr:e.remoteAddr.decapsulateCode(ct("p2p").code).bytes}}}catch(h){this.log.error("could not dial %p - %e",n,h),l=h.message}finally{null!=e&&await e.close()}}return{type:Vl.MessageType.DIAL_RESPONSE,dialResponse:{status:Vl.ResponseStatus.E_DIAL_ERROR,statusText:l,addr:c.bytes}}}getFirstUnverifiedMultiaddr(e,t){var s,i;const r=this.components.addressManager.getAddressesWithMetadata().sort((e,t)=>"observed"===e.type&&"observed"!==t.type?1:"observed"===t.type&&"observed"!==e.type?-1:0).filter(e=>{if(!(e.expires<Date.now()))return!1;if(6===e.multiaddr.toOptions().family){if(!t)return!1;if(!function(e){try{for(const{code:t,value:s}of e.getComponents())if(null!=s&&t===tt)return dr("2000::/3",s)}catch{}return!1}(e.multiaddr))return!1}return!te(e.multiaddr)});for(const n of r){const t=n.multiaddr.toString();let r=this.dialResults.get(t);if(null!=r){if(r.networkSegments.includes(e)){this.log.trace("%a already has a network segment result from %s",r.multiaddr,e);continue}if(r.queue.size>10){this.log.trace("%a already has enough peers queued",r.multiaddr);continue}}if(null==r){const e=n.expires<Date.now();if(e&&(null==(i=(s=this.addressFilter).remove)||i.call(s,t)),this.addressFilter.has(t))continue;this.addressFilter.add(t),this.log.trace("creating dial result %s %s",e?"to revalidate":"for",t),r={multiaddr:n.multiaddr,success:0,failure:0,networkSegments:[],verifyingPeers:se(),queue:new Fe({concurrency:3,maxSize:50}),type:n.type,lastVerified:n.lastVerified},this.dialResults.set(t,r)}return r}}removeOutdatedMultiaddrResults(){const e=new Set(this.components.addressManager.getAddressesWithMetadata().filter(({expires:e})=>e<Date.now()).map(({multiaddr:e})=>e.toString()));for(const t of this.dialResults.keys())e.has(t)||(this.log.trace("remove results for %a",t),this.dialResults.delete(t))}async verifyExternalAddresses(e){if(!this.isStarted())return;this.removeOutdatedMultiaddrResults();const t=(await this.components.peerStore.get(e.remotePeer)).addresses.some(({multiaddr:e})=>6===e.toOptions().family),s=this.getNetworkSegment(e.remoteAddr),i=this.getFirstUnverifiedMultiaddr(s,t);null!=i?this.hasConnectionCapacity()?i.queue.add(async t=>{await this.askPeerToVerify(e,s,t)},{peerId:e.remotePeer,multiaddr:i.multiaddr}).catch(t=>{null==(null==i?void 0:i.result)&&this.log.error("error from %p verifying address %a - %e",e.remotePeer,null==i?void 0:i.multiaddr,t)}):null!=i.lastVerified?(this.log("automatically re-verifying %a because we are too close to the connection limit",i.multiaddr),this.confirmAddress(i)):this.log("skipping verifying %a because we are too close to the connection limit",i.multiaddr):this.log.trace("no unverified public addresses found for peer %p to verify, not requesting verification",e.remotePeer)}async askPeerToVerify(e,t,s){let i=this.dialResults.get(s.multiaddr.toString());if(null==i)return void this.log("%a was verified while %p was queued",s.multiaddr,e.remotePeer);const r=AbortSignal.timeout(this.timeout);this.log.trace("asking %p to verify multiaddr %s",e.remotePeer,s.multiaddr);const n=await e.newStream(this.protocol,{signal:r});try{const o=Rs(n).pb(Vl),[,a]=await Promise.all([o.write({type:Vl.MessageType.DIAL,dial:{peer:{id:this.components.peerId.toMultihash().bytes,addrs:[s.multiaddr.bytes]}}},{signal:r}),o.read({signal:r})]);if(a.type!==Vl.MessageType.DIAL_RESPONSE||null==a.dialResponse)return void this.log("invalid autonat response from %p - %j",e.remotePeer,a);const l=a.dialResponse.status;if(this.log.trace("autonat response from %p for %a is %s",e.remotePeer,s.multiaddr,l),l!==Vl.ResponseStatus.OK&&l!==Vl.ResponseStatus.E_DIAL_ERROR)return;if(i=this.dialResults.get(s.multiaddr.toString()),null==i)return void this.log.trace("peer reported %a as %s but there is no result object",s.multiaddr,a.dialResponse.status);if(i.networkSegments.includes(t))return void this.log.trace("%a results included network segment %s",s.multiaddr,t);if(null!=i.result)return void this.log.trace("already resolved result for %a, ignoring response from",s.multiaddr,e.remotePeer);if(i.verifyingPeers.has(e.remotePeer))return void this.log.trace("peer %p has already verified %a, ignoring response",e.remotePeer,s.multiaddr);if(i.verifyingPeers.add(e.remotePeer),i.networkSegments.push(t),l===Vl.ResponseStatus.OK){if(i.success++,"observed"!==i.type)return void this.confirmAddress(i)}else l===Vl.ResponseStatus.E_DIAL_ERROR&&i.failure++;this.log("%a success %d failure %d",i.multiaddr,i.success,i.failure),4===i.success&&this.confirmAddress(i),8===i.failure&&this.unconfirmAddress(i)}finally{try{await n.close({signal:r})}catch(o){n.abort(o)}}}hasConnectionCapacity(){return this.components.connectionManager.getConnections().length/this.components.connectionManager.getMaxConnections()*100<this.connectionThreshold}confirmAddress(e){this.log("%s address %a is externally dialable",e.type,e.multiaddr),this.components.addressManager.confirmObservedAddr(e.multiaddr),this.dialResults.delete(e.multiaddr.toString()),e.result=!0,e.queue.abort()}unconfirmAddress(e){this.log("%s address %a is not externally dialable",e.type,e.multiaddr),this.components.addressManager.removeObservedAddr(e.multiaddr),this.dialResults.delete(e.multiaddr.toString()),e.result=!1,e.queue.abort()}getNetworkSegment(e){const t=e.toOptions();if(4===t.family){return t.host.split(".")[0].padStart(3,"0")}return t.host.split(":")[0].padStart(4,"0")}}function Fl(e={}){return t=>new Hl(t,e)}var ql;function Wl(e,t){if(ht.matches(e))return!1;return null!=t.dialTransportForMultiaddr(e)&&(!!nt.matches(e)||!!dt.matches(e)&&!1===X(e.toOptions().host))}!function(e){var t;let s;var i;let r;(t=e.Type||(e.Type={})).UNUSED="UNUSED",t.CONNECT="CONNECT",t.SYNC="SYNC",(i=s||(s={}))[i.UNUSED=0]="UNUSED",i[i.CONNECT=100]="CONNECT",i[i.SYNC=300]="SYNC",function(e){e.codec=()=>Se(s)}(e.Type||(e.Type={})),e.codec=()=>(null==r&&(r=Ie((t,s,i={})=>{if(!1!==i.lengthDelimited&&s.fork(),null!=t.type&&(s.uint32(8),e.Type.codec().encode(t.type,s)),null!=t.observedAddresses)for(const e of t.observedAddresses)s.uint32(18),s.bytes(e);!1!==i.lengthDelimited&&s.ldelim()},(t,s,i={})=>{var r;const n={observedAddresses:[]},o=null==s?t.len:t.pos+s;for(;t.pos<o;){const s=t.uint32();switch(s>>>3){case 1:n.type=e.Type.codec().decode(t);break;case 2:if(null!=(null==(r=i.limits)?void 0:r.observedAddresses)&&n.observedAddresses.length===i.limits.observedAddresses)throw new Ge('Decode error - map field "observedAddresses" had too many elements');n.observedAddresses.push(t.bytes());break;default:t.skipType(7&s)}}return n})),r),e.encode=t=>Pe(t,e.codec()),e.decode=(t,s)=>Re(t,e.codec(),s)}(ql||(ql={}));const zl=5e3,Gl=3,jl=1,Kl=1;k=Symbol.toStringTag,b=lt;class Ql{constructor(e,t){B(this,"started"),B(this,"timeout"),B(this,"retries"),B(this,"maxInboundStreams"),B(this,"maxOutboundStreams"),B(this,"peerStore"),B(this,"registrar"),B(this,"connectionManager"),B(this,"addressManager"),B(this,"transportManager"),B(this,"topologyId"),B(this,"log"),B(this,k,"@libp2p/dcutr"),B(this,b,["@libp2p/identify"]),this.log=e.logger.forComponent("libp2p:dcutr"),this.started=!1,this.peerStore=e.peerStore,this.registrar=e.registrar,this.addressManager=e.addressManager,this.connectionManager=e.connectionManager,this.transportManager=e.transportManager,this.timeout=t.timeout??zl,this.retries=t.retries??Gl,this.maxInboundStreams=t.maxInboundStreams??jl,this.maxOutboundStreams=t.maxOutboundStreams??Kl}isStarted(){return this.started}async start(){this.started||(this.topologyId=await this.registrar.register(Jl,{notifyOnLimitedConnection:!0,onConnect:(e,t)=>{ht.exactMatch(t.remoteAddr)&&"inbound"===t.direction&&this.upgradeInbound(t).catch(e=>{this.log.error("error during outgoing DCUtR attempt",e)})}}),await this.registrar.handle(Jl,e=>{this.handleIncomingUpgrade(e.stream,e.connection).catch(t=>{this.log.error("error during incoming DCUtR attempt",t),e.stream.abort(t)})},{maxInboundStreams:this.maxInboundStreams,maxOutboundStreams:this.maxOutboundStreams,runOnLimitedConnection:!0}),this.started=!0)}async stop(){await this.registrar.unhandle(Jl),null!=this.topologyId&&this.registrar.unregister(this.topologyId),this.started=!1}async upgradeInbound(e){if(await this.attemptUnilateralConnectionUpgrade(e))return;let t;for(let i=0;i<this.retries;i++){const r={signal:AbortSignal.timeout(this.timeout)};try{t=await e.newStream([Jl],{signal:r.signal,runOnLimitedConnection:!0});const s=Rs(t,{maxDataLength:4096}).pb(ql);this.log("B sending connect to %p",e.remotePeer);const i=Date.now();await s.write({type:ql.Type.CONNECT,observedAddresses:this.addressManager.getAddresses().map(e=>e.bytes)},r),this.log("B receiving connect from %p",e.remotePeer);const n=await s.read(r);if(n.type!==ql.Type.CONNECT)throw this.log("A sent wrong message type"),new ns("DCUtR message type was incorrect");const o=this.getDialableMultiaddrs(n.observedAddresses);if(0===o.length)throw this.log("A did not have any dialable multiaddrs"),new ns("DCUtR connect message had no multiaddrs");const a=Date.now()-i;this.log("A sending sync, rtt %dms",a),await s.write({type:ql.Type.SYNC,observedAddresses:[]},r),this.log("A waiting for half RTT"),await ie(a/2),this.log("B dialing",o);const l=await this.connectionManager.openConnection(o,{signal:r.signal,priority:100,force:!0,initiator:!1});this.log("DCUtR to %p succeeded to address %a, closing relayed connection",e.remotePeer,l.remoteAddr),await e.close(r);break}catch(s){if(this.log.error("error while attempting DCUtR on attempt %d of %d",i+1,this.retries,s),null==t||t.abort(s),i===this.retries)throw s}finally{null!=t&&await t.close(r)}}}async attemptUnilateralConnectionUpgrade(e){const t=(await this.peerStore.get(e.remotePeer)).addresses.map(t=>{const s=t.multiaddr;return null==s.getPeerId()?s.encapsulate(`/p2p/${e.remotePeer}`):s}).filter(e=>Wl(e,this.transportManager));if(t.length>0){const i=AbortSignal.timeout(this.timeout);try{this.log("attempting unilateral connection upgrade to %a",t);const s=await this.connectionManager.openConnection(t,{signal:i,force:!0});if(ht.exactMatch(s.remoteAddr))throw new Error("Could not open a new, non-limited, connection");return this.log("unilateral connection upgrade to %p succeeded via %a, closing relayed connection",e.remotePeer,s.remoteAddr),await e.close({signal:i}),!0}catch(s){this.log.error("unilateral connection upgrade to %p on addresses %a failed",e.remotePeer,t,s)}}else this.log("peer %p has no public addresses, not attempting unilateral connection upgrade",e.remotePeer);return!1}async handleIncomingUpgrade(e,t){const s={signal:AbortSignal.timeout(this.timeout)};try{const i=Rs(e,{maxDataLength:4096}).pb(ql);this.log("A receiving connect");const r=await i.read(s);if(r.type!==ql.Type.CONNECT)throw this.log("B sent wrong message type"),new ns("DCUtR message type was incorrect");if(0===r.observedAddresses.length)throw this.log("B sent no multiaddrs"),new ns("DCUtR connect message had no multiaddrs");const n=this.getDialableMultiaddrs(r.observedAddresses);if(0===n.length)throw this.log("B had no dialable multiaddrs"),new ns("DCUtR connect message had no dialable multiaddrs");this.log("A sending connect"),await i.write({type:ql.Type.CONNECT,observedAddresses:this.addressManager.getAddresses().map(e=>e.bytes)}),this.log("A receiving sync");if((await i.read(s)).type!==ql.Type.SYNC)throw new ns("DCUtR message type was incorrect");this.log("A dialing",n);const o=await this.connectionManager.openConnection(n,{signal:s.signal,priority:100,force:!0});this.log("DCUtR to %p succeeded via %a, closing relayed connection",t.remotePeer,o.remoteAddr),await t.close(s)}catch(i){this.log.error("incoming DCUtR from %p failed",t.remotePeer,i),e.abort(i)}finally{await e.close(s)}}getDialableMultiaddrs(e){const t=[];for(const s of e)if(null!=s&&0!==s.length)try{const e=Qe(s);if(!Wl(e,this.transportManager))continue;t.push(e)}catch{}return t}}const Jl="/libp2p/dcutr";function Yl(e={}){return t=>new Ql(t,e)}const Zl=36e5,Xl=36*Zl,ec=48*Zl,tc=Zl,sc=Zl,ic=`${ut}-kad-dht`;class rc extends Error{constructor(e="Query error"){super(e),this.name="QueryError"}}class nc extends Error{constructor(e="Invalid record"){super(e),this.name="InvalidRecordError"}}class oc extends Error{constructor(e="No selector function configured for prefix"){super(e),this.name="MissingSelectorError"}}var ac,lc,cc,hc,dc,uc,gc,pc,fc,mc,wc;function yc(e,t={}){var s;const i={...e,name:"SEND_QUERY",type:0,messageName:e.type,messageType:e.type};return null==(s=t.onProgress)||s.call(t,new CustomEvent("kad-dht:query:send-query",{detail:i})),i}function vc(e,t={}){var s;const i={...e,name:"PEER_RESPONSE",type:1,messageName:e.messageType,closer:e.closer??[],providers:e.providers??[]};return null==(s=t.onProgress)||s.call(t,new CustomEvent("kad-dht:query:peer-response",{detail:i})),i}function bc(e,t={}){var s;const i={...e,name:"FINAL_PEER",type:2};return null==(s=t.onProgress)||s.call(t,new CustomEvent("kad-dht:query:final-peer",{detail:i})),i}function kc(e,t={}){var s;const i={...e,name:"QUERY_ERROR",type:3};return null==(s=t.onProgress)||s.call(t,new CustomEvent("kad-dht:query:query-error",{detail:i})),i}function Ec(e,t={}){var s;const i={...e,name:"PROVIDER",type:4};return null==(s=t.onProgress)||s.call(t,new CustomEvent("kad-dht:query:provider",{detail:i})),i}function Sc(e,t={}){var s;const i={...e,name:"VALUE",type:5};return null==(s=t.onProgress)||s.call(t,new CustomEvent("kad-dht:query:value",{detail:i})),i}function Ic(e,t={}){var s;const i={...e,name:"DIAL_PEER",type:7};return null==(s=t.onProgress)||s.call(t,new CustomEvent("kad-dht:query:dial-peer",{detail:i})),i}!function(e){let t;e.codec=()=>(null==t&&(t=Ie((e,t,s={})=>{!1!==s.lengthDelimited&&t.fork(),null!=e.key&&(t.uint32(10),t.bytes(e.key)),null!=e.value&&(t.uint32(18),t.bytes(e.value)),null!=e.author&&(t.uint32(26),t.bytes(e.author)),null!=e.signature&&(t.uint32(34),t.bytes(e.signature)),null!=e.timeReceived&&(t.uint32(42),t.string(e.timeReceived)),!1!==s.lengthDelimited&&t.ldelim()},(e,t,s={})=>{const i={},r=null==t?e.len:e.pos+t;for(;e.pos<r;){const t=e.uint32();switch(t>>>3){case 1:i.key=e.bytes();break;case 2:i.value=e.bytes();break;case 3:i.author=e.bytes();break;case 4:i.signature=e.bytes();break;case 5:i.timeReceived=e.string();break;default:e.skipType(7&t)}}return i})),t),e.encode=t=>Pe(t,e.codec()),e.decode=(t,s)=>Re(t,e.codec(),s)}(ac||(ac={})),(cc=lc||(lc={})).PUT_VALUE="PUT_VALUE",cc.GET_VALUE="GET_VALUE",cc.ADD_PROVIDER="ADD_PROVIDER",cc.GET_PROVIDERS="GET_PROVIDERS",cc.FIND_NODE="FIND_NODE",cc.PING="PING",(dc=hc||(hc={}))[dc.PUT_VALUE=0]="PUT_VALUE",dc[dc.GET_VALUE=1]="GET_VALUE",dc[dc.ADD_PROVIDER=2]="ADD_PROVIDER",dc[dc.GET_PROVIDERS=3]="GET_PROVIDERS",dc[dc.FIND_NODE=4]="FIND_NODE",dc[dc.PING=5]="PING",(lc||(lc={})).codec=()=>Se(hc),(gc=uc||(uc={})).NOT_CONNECTED="NOT_CONNECTED",gc.CONNECTED="CONNECTED",gc.CAN_CONNECT="CAN_CONNECT",gc.CANNOT_CONNECT="CANNOT_CONNECT",(fc=pc||(pc={}))[fc.NOT_CONNECTED=0]="NOT_CONNECTED",fc[fc.CONNECTED=1]="CONNECTED",fc[fc.CAN_CONNECT=2]="CAN_CONNECT",fc[fc.CANNOT_CONNECT=3]="CANNOT_CONNECT",(uc||(uc={})).codec=()=>Se(pc),function(e){let t;e.codec=()=>(null==t&&(t=Ie((e,t,s={})=>{if(!1!==s.lengthDelimited&&t.fork(),null!=e.id&&e.id.byteLength>0&&(t.uint32(10),t.bytes(e.id)),null!=e.multiaddrs)for(const i of e.multiaddrs)t.uint32(18),t.bytes(i);null!=e.connection&&(t.uint32(24),uc.codec().encode(e.connection,t)),!1!==s.lengthDelimited&&t.ldelim()},(e,t,s={})=>{var i;const r={id:xe(0),multiaddrs:[]},n=null==t?e.len:e.pos+t;for(;e.pos<n;){const t=e.uint32();switch(t>>>3){case 1:r.id=e.bytes();break;case 2:if(null!=(null==(i=s.limits)?void 0:i.multiaddrs)&&r.multiaddrs.length===s.limits.multiaddrs)throw new Ge('Decode error - map field "multiaddrs" had too many elements');r.multiaddrs.push(e.bytes());break;case 3:r.connection=uc.codec().decode(e);break;default:e.skipType(7&t)}}return r})),t),e.encode=t=>Pe(t,e.codec()),e.decode=(t,s)=>Re(t,e.codec(),s)}(mc||(mc={})),function(e){let t;e.codec=()=>(null==t&&(t=Ie((e,t,s={})=>{if(!1!==s.lengthDelimited&&t.fork(),null!=e.type&&0!==hc[e.type]&&(t.uint32(8),lc.codec().encode(e.type,t)),null!=e.clusterLevel&&(t.uint32(80),t.int32(e.clusterLevel)),null!=e.key&&(t.uint32(18),t.bytes(e.key)),null!=e.record&&(t.uint32(26),t.bytes(e.record)),null!=e.closer)for(const i of e.closer)t.uint32(66),mc.codec().encode(i,t);if(null!=e.providers)for(const i of e.providers)t.uint32(74),mc.codec().encode(i,t);!1!==s.lengthDelimited&&t.ldelim()},(e,t,s={})=>{var i,r,n,o;const a={type:lc.PUT_VALUE,closer:[],providers:[]},l=null==t?e.len:e.pos+t;for(;e.pos<l;){const t=e.uint32();switch(t>>>3){case 1:a.type=lc.codec().decode(e);break;case 10:a.clusterLevel=e.int32();break;case 2:a.key=e.bytes();break;case 3:a.record=e.bytes();break;case 8:if(null!=(null==(i=s.limits)?void 0:i.closer)&&a.closer.length===s.limits.closer)throw new Ge('Decode error - map field "closer" had too many elements');a.closer.push(mc.codec().decode(e,e.uint32(),{limits:null==(r=s.limits)?void 0:r.closer$}));break;case 9:if(null!=(null==(n=s.limits)?void 0:n.providers)&&a.providers.length===s.limits.providers)throw new Ge('Decode error - map field "providers" had too many elements');a.providers.push(mc.codec().decode(e,e.uint32(),{limits:null==(o=s.limits)?void 0:o.providers$}));break;default:e.skipType(7&t)}}return a})),t),e.encode=t=>Pe(t,e.codec()),e.decode=(t,s)=>Re(t,e.codec(),s)}(wc||(wc={}));const Pc={pk:function(e,t){return 0}};async function Rc(e,t,s){const i=t.key,r=St(i).split("/");if(r.length<3)return;const n=e[r[1].toString()];if(null==n)throw new It(`No validator available for key type "${r[1]}"`);await n(i,t.value,s)}const xc={pk:async(e,t,s)=>{if(!(e instanceof Uint8Array))throw new It('"key" must be a Uint8Array');if(e.byteLength<5)throw new It("Invalid public key record");if("/pk/"!==St(e.subarray(0,4)))throw new It("key was not prefixed with /pk/");const i=os(t),r=e.slice(4);if(!ge(r,i.toMultihash().bytes))throw new It("public key does not match passed in key")}},Ac=me("/pk/");function Cc(e){return{...e,multiaddrs:e.multiaddrs.filter(e=>{const[[t,s]]=e.stringTuples();if(53===t||54===t||55===t)return"localhost"!==s;if(4!==t&&6!==t)return!1;if(null==s)return!1;const i=X(s);return null==i||!i})}}async function Tc(e,t){var s;const i=await ke.digest(e);return null==(s=null==t?void 0:t.signal)||s.throwIfAborted(),i.digest}async function Bc(e,t){return Tc(e.toMultihash().bytes,t)}function Nc(e,t){return new H(`${e}/${St(t,"base32")}`,!1)}function _c(e,t){return new Ms(e,t,new Date).serialize()}function Dc(e){const t=e.toString().split("/"),s=t.pop(),i=t.pop();if(null==s||null==i)throw new Error(`incorrectly formatted provider entry key in datastore: ${e.toString()}`);return{cid:ue.createV1(ws,De(me(i,"base32"))),peerId:Gt(s)}}function Mc(e,t,s){const i=[e,"string"==typeof t?t:St(t.multihash.bytes,"base32")];return null!=s&&i.push(s.toString()),new H(i.join("/"))}function Lc(e){return new Date(Te(e))}function Oc(e,t,s){return async function*(...i){var r,n,o,a,l;const c=null==(r=t.queryTime)?void 0:r.timer(s),h=null==(n=t.errorTime)?void 0:n.timer(s);let d=!1;try{null==(o=t.queries)||o.increment({[s]:!0}),yield*e(...i)}catch(u){throw d=!0,null==h||h(),null==(a=t.errors)||a.increment({[s]:!0}),u}finally{null==(l=t.queries)||l.decrement({[s]:!0}),d||null==c||c()}}}function Uc(e,t,s){return async function(...i){var r,n,o,a,l;const c=null==(r=null==t?void 0:t.queryTime)?void 0:r.timer(s),h=null==(n=null==t?void 0:t.errorTime)?void 0:n.timer(s);let d=!1;try{return null==(o=t.queries)||o.increment({[s]:!0}),await e(...i)}catch(u){throw d=!0,null==h||h(),null==(a=t.errors)||a.increment({[s]:!0}),u}finally{null==(l=t.queries)||l.decrement({[s]:!0}),d||null==c||c()}}}class $c{constructor(e,t){var s,i;B(this,"log"),B(this,"components"),B(this,"validators"),B(this,"selectors"),B(this,"peerRouting"),B(this,"queryManager"),B(this,"network"),B(this,"datastorePrefix");const{validators:r,selectors:n,peerRouting:o,queryManager:a,network:l,logPrefix:c}=t;this.components=e,this.log=e.logger.forComponent(`${c}:content-fetching`),this.datastorePrefix=`${t.datastorePrefix}/record`,this.validators=r,this.selectors=n,this.peerRouting=o,this.queryManager=a,this.network=l,this.get=(null==(s=e.metrics)?void 0:s.traceFunction("libp2p.kadDHT.get",this.get.bind(this),{optionsIndex:1}))??this.get,this.put=(null==(i=e.metrics)?void 0:i.traceFunction("libp2p.kadDHT.put",this.put.bind(this),{optionsIndex:2}))??this.put}async getLocal(e,t){this.log("getLocal %b",e);const s=Nc(this.datastorePrefix,e);this.log("fetching record for key %k",s);const i=await this.components.datastore.get(s,t);this.log("found %k in local datastore",s);const r=Ms.deserialize(i);return await Rc(this.validators,r,t),r}async*sendCorrectionRecord(e,t,s,i){this.log("sendCorrection for %b",e);const r=_c(e,s);for(const{value:o,from:a}of t){if(ge(o,s)){this.log("record was ok");continue}if(this.components.peerId.equals(a)){try{const t=Nc(this.datastorePrefix,e);this.log(`Storing corrected record for key ${t.toString()}`),await this.components.datastore.put(t,r.subarray(),i)}catch(n){this.log.error("Failed error correcting self",n)}continue}let t=!1;const l={type:lc.PUT_VALUE,key:e,record:r};for await(const e of this.network.sendRequest(a,l,i))"PEER_RESPONSE"===e.name&&null!=e.record&&ge(e.record.value,Ms.deserialize(r).value)&&(t=!0),yield e;if(!t)throw new rc("Could not send correction");this.log.error("Failed error correcting entry")}}async*put(e,t,s){this.log("put key %b value %b",e,t);const i=_c(e,t),r=Nc(this.datastorePrefix,e);this.log(`storing record for key ${r.toString()}`),await this.components.datastore.put(r,i.subarray(),s),yield*As(this.peerRouting.getClosestPeers(e,{...s,signal:s.signal}),t=>vs(t,t=>async()=>{if("FINAL_PEER"!==t.name)return[t];const r=[],n={type:lc.PUT_VALUE,key:e,record:i};this.log("send put to %p",t.peer.id);for await(const e of this.network.sendRequest(t.peer.id,n,{...s,path:t.path}))r.push(e),"PEER_RESPONSE"===e.name&&(null!=e.record&&ge(e.record.value,Ms.deserialize(i).value)||r.push(kc({from:t.peer.id,error:new rc("Value not put correctly"),path:e.path},s)));return r}),e=>Ss(e,{ordered:!1,concurrency:10}),async function*(e){for await(const t of e)yield*t})}async*get(e,t){this.log("get %b",e);const s=[];for await(const a of this.getMany(e,t))"VALUE"!==a.name?yield a:s.push(a);if(0===s.length)return;const i=s.map(e=>e.value);let r=0;try{r=function(e,t,s){if(0===s.length)throw new It("No records given");const i=St(t).split("/");if(i.length<3)throw new It("Record key does not have a selector function");const r=e[i[1].toString()];if(null==r)throw new oc(`No selector function configured for key type "${i[1]}"`);return 1===s.length?0:r(t,s)}(this.selectors,e,i)}catch(o){if("InvalidParametersError"!==o.name)throw o}const n=i[r];if(this.log("GetValue %b %b",e,n),null==n)throw new Et("Best value was not found");yield*this.sendCorrectionRecord(e,s,n,{...t,path:{index:-1,queued:0,running:0,total:0}}),yield s[r]}async*getMany(e,t={}){this.log("getMany values for %b",e);try{const s=await this.getLocal(e,t);yield Sc({value:s.value,from:this.components.peerId,path:{index:-1,running:0,queued:0,total:0}},t)}catch(i){this.log("error getting local value for %b",e,i)}const s=this;yield*this.queryManager.run(e,async function*({peer:i,signal:r,path:n}){for await(const o of s.peerRouting.getValueOrPeers(i.id,e,{...t,signal:r,path:n}))yield o,"PEER_RESPONSE"===o.name&&null!=o.record&&(yield Sc({from:i.id,value:o.record.value,path:n},t))},t)}}function Vc(e){if(null==e.id)throw new Error("Invalid peer in message");const t=De(e.id);return{id:rs(t),multiaddrs:(e.multiaddrs??[]).map(e=>Qe(e))}}class Hc{constructor(e,t){var s,i;B(this,"log"),B(this,"components"),B(this,"network"),B(this,"peerRouting"),B(this,"queryManager"),B(this,"routingTable"),B(this,"providers");const{network:r,peerRouting:n,queryManager:o,routingTable:a,providers:l,logPrefix:c}=t;this.components=e,this.log=e.logger.forComponent(`${c}:content-routing`),this.network=r,this.peerRouting=n,this.queryManager=o,this.routingTable=a,this.providers=l,this.findProviders=(null==(s=e.metrics)?void 0:s.traceFunction("libp2p.kadDHT.findProviders",this.findProviders.bind(this),{optionsIndex:1,getAttributesFromYieldedValue:(e,t)=>("PROVIDER"===e.name&&(t.providers??(t.providers=[]),t.providers.push(...e.providers.map(e=>e.id.toString()))),t)}))??this.findProviders,this.provide=(null==(i=e.metrics)?void 0:i.traceFunction("libp2p.kadDHT.provide",this.provide.bind(this),{optionsIndex:1,getAttributesFromYieldedValue:(e,t)=>("PEER_RESPONSE"===e.name&&"ADD_PROVIDER"===e.messageName&&(t.providers??(t.providers=[]),t.providers.push(e.from.toString())),t)}))??this.provide}async*provide(e,t,s={}){this.log("provide %s",e);const i=e.multihash.bytes;await this.providers.addProvider(e,this.components.peerId,s);const r={type:lc.ADD_PROVIDER,key:i,providers:[(n={id:this.components.peerId,multiaddrs:t},{id:n.id.toMultihash().bytes,multiaddrs:(n.multiaddrs??[]).map(e=>e.bytes),connection:o})]};var n,o;let a=0;const l=this;const c=bt({objectMode:!0}),h=new $e({concurrency:10});h.addEventListener("idle",()=>{c.end()}),h.addEventListener("error",e=>{this.log.error("error publishing provider record to peer - %e",e)}),h.add(async()=>{const t=[];for await(const e of this.peerRouting.getClosestPeers(i,s))c.push(e),"FINAL_PEER"===e.name&&t.push(e);t.forEach(t=>{h.add(async()=>{for await(const i of async function*(t){try{l.log("sending provider record for %s to %p",e,t.peer.id);for await(const i of l.network.sendMessage(t.peer.id,r,{...s,path:t.path}))"PEER_RESPONSE"===i.name&&(l.log("sent provider record for %s to %p",e,t.peer.id),a++),yield i}catch(i){l.log.error("error sending provide record to peer %p",t.peer.id,i),yield kc({from:t.peer.id,error:i,path:t.path},s)}}(t))c.push(i)}).catch(e=>{this.log.error("error publishing provider record to peer - %e",e)})})}).catch(e=>{c.end(e)}),yield*c,this.log("sent provider records to %d peers",a)}async*findProviders(e,t){const s=this.routingTable.kBucketSize;let i=0;const r=e.multihash.bytes,n=this;this.log("findProviders %c",e);const o=await this.providers.getProviders(e,t);if(o.length>0){const e=[];for(const i of o.slice(0,s))try{const s=await this.components.peerStore.get(i,t);e.push({id:i,multiaddrs:s.addresses.map(({multiaddr:e})=>e)})}catch(c){if("NotFoundError"!==c.name)throw c;this.log("no peer store entry for %p",i)}if(yield vc({from:this.components.peerId,messageType:lc.GET_PROVIDERS,providers:e,path:{index:-1,queued:0,running:0,total:0}},t),yield Ec({from:this.components.peerId,providers:e,path:{index:-1,queued:0,running:0,total:0}},t),i+=e.length,i>=s)return}const a=async function*({peer:e,signal:s,path:i}){const o={type:lc.GET_PROVIDERS,key:r};yield*n.network.sendRequest(e.id,o,{...t,signal:s,path:i})},l=new re(o);for await(const h of this.queryManager.run(r,a,t))if(yield h,"PEER_RESPONSE"===h.name){this.log("Found %d provider entries for %c and %d closer peers",h.providers.length,e,h.closer.length);const r=[];for(const e of h.providers)l.has(e.id)||(l.add(e.id),r.push(e));if(r.length>0&&(yield Ec({from:h.from,providers:r,path:h.path},t),i+=r.length,i>=s))return}}}class Fc extends ze{constructor(e,t){var s,i,r,n;super(),B(this,"log"),B(this,"protocol"),B(this,"running"),B(this,"components"),B(this,"timeout"),B(this,"metrics"),this.components=e,this.log=e.logger.forComponent(`${t.logPrefix}:network`),this.running=!1,this.protocol=t.protocol,this.timeout=new ne({...t.timeout??{},metrics:e.metrics,metricName:`${t.metricsPrefix}_network_message_send_times_milliseconds`}),this.metrics={operations:null==(s=e.metrics)?void 0:s.registerCounterGroup(`${t.metricsPrefix}_outbound_rpc_requests_total`),errors:null==(i=e.metrics)?void 0:i.registerCounterGroup(`${t.metricsPrefix}_outbound_rpc_errors_total`)},this.sendRequest=(null==(r=e.metrics)?void 0:r.traceFunction("libp2p.kadDHT.sendRequest",this.sendRequest.bind(this),{optionsIndex:2,getAttributesFromArgs:([e,t],s)=>({...s,to:e.toString(),"message type":`${t.type}`}),getAttributesFromYieldedValue:(e,t)=>("PEER_RESPONSE"===e.name&&(e.providers.length>0&&e.providers.forEach((e,s)=>{t[`providers-${s}`]=e.id.toString()}),e.closer.length>0&&e.closer.forEach((e,s)=>{t[`closer-${s}`]=e.id.toString()})),t)}))??this.sendRequest,this.sendMessage=(null==(n=e.metrics)?void 0:n.traceFunction("libp2p.kadDHT.sendMessage",this.sendMessage.bind(this),{optionsIndex:2,getAttributesFromArgs:([e,t],s)=>({...s,to:e.toString(),"message type":`${t.type}`}),getAttributesFromYieldedValue:(e,t)=>("PEER_RESPONSE"===e.name&&(e.providers.length>0&&e.providers.forEach((e,s)=>{t[`providers-${s}`]=e.id.toString()}),e.closer.length>0&&e.closer.forEach((e,s)=>{t[`closer-${s}`]=e.id.toString()})),t)}))??this.sendMessage}async start(){this.running||(this.running=!0)}async stop(){this.running=!1}isStarted(){return this.running}async*sendRequest(e,t,s){var i,r,n;if(!this.running)return;const o=t.type;if(null==o)throw new It("Message type was missing");let a;const l=this.timeout.getTimeoutSignal(s);s={...s,signal:l};try{null==(i=this.metrics.operations)||i.increment({[o]:!0}),this.log("dialling %p",e),yield Ic({peer:e,path:s.path},s);const r=await this.components.connectionManager.openConnection(e,s);a=await r.newStream(this.protocol,s),this.log("sending %s to %p",t.type,e),yield yc({to:e,type:o,path:s.path},s);const n=await this._writeReadMessage(a,t,s);a.close(s).catch(t=>{this.log.error("error closing stream to %p",e,t),null==a||a.abort(t)}),yield vc({from:e,messageType:n.type,closer:n.closer.map(Vc),providers:n.providers.map(Vc),record:null==n.record?void 0:Ms.deserialize(n.record),path:s.path},s)}catch(c){null==(r=this.metrics.errors)||r.increment({[o]:!0}),null==a||a.abort(c),!0!==(null==(n=s.signal)?void 0:n.aborted)&&this.log.error("could not send %s to %p - %e",t.type,e,c),yield kc({from:e,error:c,path:s.path},s)}finally{this.timeout.cleanUp(l)}}async*sendMessage(e,t,s){var i,r;if(!this.running)return;const n=t.type;if(null==n)throw new It("Message type was missing");let o;const a=this.timeout.getTimeoutSignal(s);s={...s,signal:a};try{null==(i=this.metrics.operations)||i.increment({[n]:!0}),this.log("dialling %p",e),yield Ic({peer:e,path:s.path},s);const r=await this.components.connectionManager.openConnection(e,s);o=await r.newStream(this.protocol,s),this.log("sending %s to %p",t.type,e),yield yc({to:e,type:n,path:s.path},s),await this._writeMessage(o,t,s),o.close(s).catch(t=>{this.log.error("error closing stream to %p",e,t),null==o||o.abort(t)}),yield vc({from:e,messageType:n,path:s.path},s)}catch(l){null==(r=this.metrics.errors)||r.increment({[n]:!0}),null==o||o.abort(l),yield kc({from:e,error:l,path:s.path},s)}finally{this.timeout.cleanUp(a)}}async _writeMessage(e,t,s){const i=Rs(e);await i.write(t,wc,s)}async _writeReadMessage(e,t,s){const i=Rs(e);await i.write(t,wc,s);const r=await i.read(wc,s);return r.closer.forEach(e=>{this.safeDispatchEvent("peer",{detail:Vc(e)})}),r.providers.forEach(e=>{this.safeDispatchEvent("peer",{detail:Vc(e)})}),r}}function qc(e,t){if(e.length!==t.length)throw new Error("Inputs should have the same length");const s=Oe(e.length);for(let i=0;i<e.length;i++)s[i]=e[i]^t[i];return Ue(s)}function Wc(e,t){if(e.byteLength!==t.byteLength)throw new Error("Inputs should have the same length");for(let s=0;s<e.byteLength;s++)if(e[s]!==t[s])return e[s]<t[s]?-1:1;return 0}class zc{constructor(e,t){B(this,"originDhtKey"),B(this,"capacity"),B(this,"peerDistances"),this.originDhtKey=e,this.capacity=t,this.peerDistances=[]}get length(){return this.peerDistances.length}get peers(){return[...this.peerDistances]}async add(e,t={index:-1,queued:0,running:0,total:0},s){const i=await Bc(e.id,s);this.addWithKadId(e,i,t)}addWithKadId(e,t,s={index:-1,queued:0,running:0,total:0}){if(null!=this.peerDistances.find(t=>t.peer.id.equals(e.id)))return;const i={peer:e,distance:qc(this.originDhtKey,t),path:s};if(this.peerDistances.length===this.capacity){const e=this.peerDistances[this.peerDistances.length-1];if(null!=e&&-1!==Wc(i.distance,e.distance))return}let r=!1;for(let n=0;n<this.peerDistances.length;n++){const e=Wc(this.peerDistances[n].distance,i.distance);if(0===e||1===e){r=!0,this.peerDistances.splice(n,0,i);break}}r||this.peerDistances.push(i),this.peerDistances=this.peerDistances.slice(0,this.capacity)}async isCloser(e,t){if(0===this.length)return!0;return-1===Wc(qc(await Bc(e,t),this.originDhtKey),this.peerDistances[this.peerDistances.length-1].distance)}async anyCloser(e,t){return 0!==e.length&&Promise.any(e.map(async e=>this.isCloser(e,t)))}}class Gc{constructor(e,t){var s,i;B(this,"log"),B(this,"routingTable"),B(this,"network"),B(this,"validators"),B(this,"queryManager"),B(this,"components"),this.routingTable=t.routingTable,this.network=t.network,this.validators=t.validators,this.queryManager=t.queryManager,this.components=e,this.log=e.logger.forComponent(`${t.logPrefix}:peer-routing`),this.findPeer=(null==(s=e.metrics)?void 0:s.traceFunction("libp2p.kadDHT.findPeer",this.findPeer.bind(this),{optionsIndex:1}))??this.findPeer,this.getClosestPeers=(null==(i=e.metrics)?void 0:i.traceFunction("libp2p.kadDHT.getClosestPeers",this.getClosestPeers.bind(this),{optionsIndex:1}))??this.getClosestPeers}async findPeerLocal(e,t){let s;const i=await this.routingTable.find(e,t);if(null!=i){this.log("findPeerLocal found %p in routing table",e);try{s=await this.components.peerStore.get(i,t)}catch(r){if("NotFoundError"!==r.name)throw r}}if(null==s)try{s=await this.components.peerStore.get(e,t)}catch(r){if("NotFoundError"!==r.name)throw r}if(null!=s)return this.log("findPeerLocal found %p in peer store",e),{id:s.id,multiaddrs:s.addresses.map(e=>e.multiaddr)}}async*_getValueSingle(e,t,s){const i={type:lc.GET_VALUE,key:t};yield*this.network.sendRequest(e,i,s)}async*getPublicKeyFromNode(e,t={}){const s=Me([Ac,e.toMultihash().bytes]);const i={index:-1,queued:0,running:0,total:0};for await(const r of this._getValueSingle(e,s,{...t,path:i}))if(yield r,"PEER_RESPONSE"===r.name&&null!=r.record){const s=os(r.record.value),n=as(s);if(!n.equals(e))throw new ls("public key does not match id");if(null==n.publicKey)throw new ls("public key missing");yield Sc({from:e,value:r.record.value,path:i},t)}throw new rc(`Node not responding with its public key: ${e.toString()}`)}async*findPeer(e,t={}){if(this.log("findPeer %p",e),!1!==t.useCache){const s=await this.findPeerLocal(e,t);if(null!=s)return this.log("found local"),void(yield bc({from:this.components.peerId,peer:s,path:{index:-1,queued:0,running:0,total:0}},t))}let s=!1;if(!1!==t.useNetwork){const i=this,r=async function*({peer:s,signal:r,path:n}){const o={type:lc.FIND_NODE,key:e.toMultihash().bytes};for await(const a of i.network.sendRequest(s.id,o,{...t,signal:r,path:n}))if(yield a,"PEER_RESPONSE"===a.name){const s=a.closer.find(t=>t.id.equals(e));null!=s&&(yield bc({from:a.from,peer:s,path:a.path},t))}};for await(const n of this.queryManager.run(e.toMultihash().bytes,r,t))"FINAL_PEER"===n.name&&(s=!0),yield n}if(!s)throw new Et("Not found")}async*getClosestPeers(e,t={}){this.log("getClosestPeers to %b",e);const s=await Tc(e,t),i=new zc(s,this.routingTable.kBucketSize),r=this;yield*this.queryManager.run(e,async function*({peer:s,path:n,peerKadId:o,signal:a}){r.log("getClosestPeers asking %p",s.id);const l={type:lc.FIND_NODE,key:e};yield*r.network.sendRequest(s.id,l,{...t,signal:a,path:n}),i.addWithKadId(s,o,n)},t),this.log("found %d peers close to %b",i.length,e);for(let{peer:n,path:o}of i.peers)try{if(0===n.multiaddrs.length&&(n=await r.components.peerStore.getInfo(n.id,t)),0===n.multiaddrs.length)continue;yield bc({from:this.components.peerId,peer:await r.components.peerStore.getInfo(n.id,t),path:{index:o.index,queued:0,running:0,total:0}},t)}catch{continue}}async*getValueOrPeers(e,t,s){for await(const r of this._getValueSingle(e,t,s)){if("PEER_RESPONSE"===r.name&&null!=r.record)try{await this._verifyRecordOnline(r.record,s)}catch(i){const e="invalid record received, discarded";this.log(e),yield kc({from:r.from,error:new rc(e),path:s.path},s);continue}yield r}}async _verifyRecordOnline(e,t){if(null==e.timeReceived)throw new nc("invalid record received");await Rc(this.validators,new Ms(e.key,e.value,e.timeReceived),t)}async getClosestPeersOffline(e,t){const s=[];try{const i=De(e),r=rs(i),n=await this.components.peerStore.get(r,t);s.push({id:n.id,multiaddrs:n.addresses.map(({multiaddr:e})=>e)})}catch{}const i=await Tc(e,t),r=this.routingTable.closestPeers(i,t);for(const o of r)try{s.push(await this.components.peerStore.getInfo(o,t))}catch(n){if("NotFoundError"!==n.name)throw n}return s.length>0?this.log("getClosestPeersOffline returning the %d closest peer(s) %b we know",s.length,e):this.log("getClosestPeersOffline could not any peers close to %b with %d peers in the routing table",e,this.routingTable.size),s}}class jc{constructor(e,t){B(this,"log"),B(this,"datastore"),B(this,"datastorePrefix"),this.log=e.logger.forComponent(`${t.logPrefix}:providers`),this.datastorePrefix=`${t.datastorePrefix}/provider`,this.datastore=e.datastore}async addProvider(e,t,s){this.log.trace("%p provides %s",t,e),await this.writeProviderEntry(e,t,s)}async removeProvider(e,t,s){const i=Mc(this.datastorePrefix,e,t);this.log.trace("%p no longer provides %s",t,e),await this.datastore.delete(i,s)}async getProviders(e,t){this.log.trace("get providers for %c",e);const s=await this.loadProviders(e,t);return this.log.trace("got %d providers for %c",s.size,e),[...s.keys()]}async writeProviderEntry(e,t,s){var i;const r=Mc(this.datastorePrefix,e,t),n=Ce((null==(i=null==s?void 0:s.time)?void 0:i.getTime())??Date.now());await this.datastore.put(r,n,s)}async loadProviders(e,t){const s=new gt,i=Mc(this.datastorePrefix,e);for await(const r of this.datastore.query({prefix:i.toString()},t)){const{peerId:e}=Dc(r.key);s.set(e,Lc(r.value))}return s}}function Kc(e,t,s){let i;const r=new Promise((r,n)=>{var o;if(!((s={rejectionEvents:["error"],multiArgs:!1,resolveImmediately:!1,...s}).count>=0)||s.count!==Number.POSITIVE_INFINITY&&!Number.isInteger(s.count))throw new TypeError("The `count` option should be at least 0 or more");null==(o=s.signal)||o.throwIfAborted();const a=[t].flat(),l=[],{addListener:c,removeListener:h}=(e=>{const t=e.addEventListener||e.on||e.addListener,s=e.removeEventListener||e.off||e.removeListener;if(!t||!s)throw new TypeError("Emitter is not compatible");return{addListener:t.bind(e),removeListener:s.bind(e)}})(e),d=(...e)=>{const t=s.multiArgs?e:e[0];s.filter&&!s.filter(t)||(l.push(t),s.count===l.length&&(i(),r(l)))},u=e=>{i(),n(e)};i=()=>{for(const e of a)h(e,d);for(const e of s.rejectionEvents)h(e,u)};for(const e of a)c(e,d);for(const e of s.rejectionEvents)c(e,u);s.signal&&s.signal.addEventListener("abort",()=>{u(s.signal.reason)},{once:!0}),s.resolveImmediately&&r(l)});if(r.cancel=i,"number"==typeof s.timeout){const e=V(r,{milliseconds:s.timeout});return e.cancel=i,e}return r}async function*Qc(e){const{key:t,startingPeers:s,ourPeerId:i,query:r,alpha:n,path:o,numPaths:a,log:l,peersSeen:c,connectionManager:h,signal:d}=e,u=bt({objectMode:!0}),g=new $e({concurrency:n,sort:(e,t)=>Wc(e.options.distance,t.options.distance)});g.addEventListener("idle",()=>{u.push(function(e,t={}){var s;const i={...e,name:"PATH_ENDED",type:8};return null==(s=t.onProgress)||s.call(t,new CustomEvent("kad-dht:query:path-ended",{detail:i})),i}({path:{index:o,queued:g.queued,running:g.running,total:g.size}},e)),u.end()}),g.addEventListener("error",e=>{l.error("error during query - %e",e.detail)});const p=()=>{g.abort(),u.end(new Ht)};d.addEventListener("abort",p);try{let n=function(s,f){if(null==s)return;c.add(s.id.toMultihash().bytes);const m=qc(f,p);g.add(async()=>{try{for await(const w of r({...e,key:t,peer:s,path:{index:o,queued:g.queued,running:g.running,total:g.size},numPaths:a,peerKadId:f,signal:d})){if("PEER_RESPONSE"===w.name)for(const e of w.closer){if(c.has(e.id.toMultihash().bytes)){l("already seen %p in query",e.id);continue}if(i.equals(e.id)){l("not querying ourselves");continue}if(!(await h.isDialable(e.multiaddrs))){l("not querying undialable peer");continue}const r=await Bc(e.id,{signal:d});-1===Wc(qc(r,p),m)?(l("querying closer peer %p",e.id),n(e,r)):l("skipping %p as they are not closer to %b than %p",e.id,t,s)}u.push({...w,path:{index:o,queued:g.queued,running:g.running,total:g.size}})}}catch(w){u.push(kc({from:s.id,error:w,path:{index:o,queued:g.queued,running:g.running-1,total:g.size-1}},e))}},{distance:m}).catch(e=>{l.error("error during query - %e",e)})};const p=await Tc(t,{signal:d});await Promise.all(s.map(async e=>{n({id:e,multiaddrs:[]},await Bc(e,{signal:d}))})),yield*u}finally{d.removeEventListener("abort",p)}}class Jc{constructor(e,t){B(this,"disjointPaths"),B(this,"alpha"),B(this,"shutDownController"),B(this,"running"),B(this,"logger"),B(this,"peerId"),B(this,"connectionManager"),B(this,"routingTable"),B(this,"initialQuerySelfHasRun"),B(this,"logPrefix"),B(this,"allowQueryWithZeroPeers"),this.logPrefix=t.logPrefix,this.disjointPaths=t.disjointPaths??20,this.alpha=t.alpha??10,this.initialQuerySelfHasRun=t.initialQuerySelfHasRun,this.routingTable=t.routingTable,this.logger=e.logger,this.peerId=e.peerId,this.connectionManager=e.connectionManager,this.allowQueryWithZeroPeers=t.allowQueryWithZeroPeers??!1,this.shutDownController=new AbortController,qe(1/0,this.shutDownController.signal),this.running=!1}isStarted(){return this.running}async start(){this.running||(this.running=!0,this.shutDownController=new AbortController,qe(1/0,this.shutDownController.signal))}async stop(){this.running=!1,this.shutDownController.abort()}async*run(e,t,s={}){if(!this.running)throw new Error("QueryManager not started");if(null==s.signal){const e=AbortSignal.timeout(18e4);s={...s,signal:e}}const i=new AbortController,r=We([this.shutDownController.signal,i.signal,s.signal]);qe(1/0,r,i.signal);const n=this.logger.forComponent(`${this.logPrefix}:query:`+St(e,"base58btc"));let o=!1;try{0!==this.routingTable.size||this.allowQueryWithZeroPeers||(n("routing table was empty, waiting for some peers before running%s query",!0===s.isSelfQuery?" self":""),await function(e,t,s){"function"==typeof s&&(s={filter:s});const i=Kc(e,t,s={...s,count:1,resolveImmediately:!1}),r=i.then(e=>e[0]);return r.cancel=i.cancel,r}(this.routingTable,"peer:add",{signal:r,filter:e=>!this.peerId.equals(e.detail)}),n("routing table has peers, continuing with%s query",!0===s.isSelfQuery?" self":"")),!0!==s.isSelfQuery&&null!=this.initialQuerySelfHasRun&&(n("waiting for initial self query before continuing"),await kt(this.initialQuerySelfHasRun.promise,r),this.initialQuerySelfHasRun=void 0),n("query:start");const i=await Tc(e,{signal:r}),a=this.routingTable.closestPeers(i,{count:this.routingTable.kBucketSize}),l=a.sort(()=>Math.random()>.5?1:-1).reduce((e,t,s)=>(e[s%this.disjointPaths].push(t),e),new Array(this.disjointPaths).fill(0).map(()=>[])).filter(e=>e.length>0);if(0===a.length)return void n.error("running query with no peers");const c=yt(1024),h=l.map((i,o)=>Qc({...s,key:e,startingPeers:i,ourPeerId:this.peerId,signal:r,query:t,path:o,numPaths:l.length,alpha:this.alpha,log:n,peersSeen:c,onProgress:s.onProgress,connectionManager:this.connectionManager}));for await(const e of wt(...h)){if("QUERY_ERROR"===e.name&&n.error("query error",e.error),"PEER_RESPONSE"===e.name)for(const t of[...e.closer,...e.providers])await this.connectionManager.isDialable(t.multiaddrs,{signal:r})&&await this.routingTable.add(t.id,{signal:r});r.throwIfAborted(),yield e}o=!0}catch(a){if(this.running)throw a}finally{o||(n("query exited early"),i.abort()),r.clear(),n("query finished")}}}function Yc(e){if(null!=e[Symbol.asyncIterator])return(async()=>{let t=0;for await(const s of e)t++;return t})();{let t=0;for(const s of e)t++;return t}}class Zc{constructor(e,t){B(this,"log"),B(this,"peerId"),B(this,"peerRouting"),B(this,"events"),B(this,"count"),B(this,"interval"),B(this,"initialInterval"),B(this,"queryTimeout"),B(this,"running"),B(this,"timeoutId"),B(this,"controller"),B(this,"initialQuerySelfHasRun"),B(this,"querySelfPromise"),this.peerId=e.peerId,this.log=e.logger.forComponent(`${t.logPrefix}:query-self`),this.events=e.events,this.running=!1,this.peerRouting=t.peerRouting,this.count=t.count??20,this.interval=t.interval??3e5,this.initialInterval=t.initialInterval??1e3,this.queryTimeout=t.queryTimeout??5e3,this.initialQuerySelfHasRun=t.initialQuerySelfHasRun,this.querySelf=Uc(this.querySelf.bind(this),t.operationMetrics,"SELF_QUERY")}isStarted(){return this.running}start(){this.running||(this.running=!0,clearTimeout(this.timeoutId),this.timeoutId=setTimeout(()=>{this.querySelf().catch(e=>{this.log.error("error running self-query",e)})},this.initialInterval))}stop(){this.running=!1,null!=this.timeoutId&&clearTimeout(this.timeoutId),null!=this.controller&&this.controller.abort()}async querySelf(){if(this.running){if(null!=this.querySelfPromise)return this.log("joining existing self query"),this.querySelfPromise.promise;if(this.querySelfPromise=vt(),this.running){this.controller=new AbortController;const t=[this.controller.signal];if(null==this.initialQuerySelfHasRun){const e=AbortSignal.timeout(this.queryTimeout);t.push(e)}const s=We(t);qe(1/0,s,this.controller.signal);try{this.log("run self-query, look for %d peers timing out after %dms",this.count,this.queryTimeout);const e=Date.now(),t=await As(this.peerRouting.getClosestPeers(this.peerId.toMultihash().bytes,{signal:s,isSelfQuery:!0}),e=>Q(e,this.count),async e=>Yc(e));null==s||s.throwIfAborted();const i=Date.now()-e;this.log("self-query found %d peers in %dms",t,i),this.events.dispatchEvent(new CustomEvent("kad-dht:query:self",{detail:{peers:t,duration:i}}))}catch(e){this.log.error("self-query error",e)}finally{s.clear(),null!=this.initialQuerySelfHasRun&&(this.initialQuerySelfHasRun.resolve(),this.initialQuerySelfHasRun=void 0)}}this.querySelfPromise.resolve(),this.querySelfPromise=void 0,this.running&&(this.timeoutId=setTimeout(()=>{this.querySelf().catch(e=>{this.log.error("error running self-query",e)})},this.interval))}else this.log("skip self-query because we are not started")}}class Xc extends ze{constructor(e,t){super(),B(this,"log"),B(this,"reprovideQueue"),B(this,"maxQueueSize"),B(this,"datastore"),B(this,"timeout"),B(this,"reprovideTimeout"),B(this,"running"),B(this,"shutdownController"),B(this,"reprovideThreshold"),B(this,"contentRouting"),B(this,"datastorePrefix"),B(this,"addressManager"),B(this,"validity"),B(this,"interval"),B(this,"peerId"),this.log=e.logger.forComponent(`${t.logPrefix}:reprovider`),this.peerId=e.peerId,this.reprovideQueue=new $e({concurrency:t.concurrency??10,metrics:e.metrics,metricName:`${t.metricsPrefix}_reprovide_queue`}),this.reprovideTimeout=new ne({...t.timeout??{},metrics:e.metrics,metricName:`${t.metricsPrefix}_reprovide_timeout_milliseconds`}),this.datastore=e.datastore,this.addressManager=e.addressManager,this.datastorePrefix=`${t.datastorePrefix}/provider`,this.reprovideThreshold=t.threshold??864e5,this.maxQueueSize=t.maxQueueSize??16384,this.validity=t.validity??ec,this.interval=t.interval??tc,this.contentRouting=t.contentRouting,this.running=!1,this.reprovide=Uc(this.reprovide.bind(this),t.operationMetrics,"PROVIDE")}start(){this.running||(this.running=!0,this.shutdownController=new AbortController,qe(1/0,this.shutdownController.signal),this.timeout=setTimeout(()=>{this.cleanUp({signal:AbortSignal.timeout(sc)}).catch(e=>{this.log.error("error running reprovide/cleanup - %e",e)})},this.interval))}stop(){var e;this.running=!1,this.reprovideQueue.clear(),clearTimeout(this.timeout),null==(e=this.shutdownController)||e.abort()}async cleanUp(e){try{this.safeDispatchEvent("reprovide:start");for await(const s of this.datastore.query({prefix:this.datastorePrefix},e))try{const{cid:t,peerId:i}=Dc(s.key),r=Lc(s.value).getTime(),n=r+this.validity,o=Date.now(),a=o>n;this.log.trace("comparing: %d < %d = %s %s",r,o-this.validity,a,a?"(expired)":""),a&&await this.datastore.delete(s.key,e),this.peerId.equals(i)&&o-n<this.reprovideThreshold&&this.queueReprovide(t).catch(e=>{this.log.error("could not reprovide %c - %e",t,e)})}catch(t){this.log.error("error processing datastore key %s - %e",s.key,t.message)}this.log("reprovide/cleanup successful")}finally{this.safeDispatchEvent("reprovide:end"),this.running&&(this.timeout=setTimeout(()=>{this.cleanUp({signal:AbortSignal.timeout(sc)}).catch(e=>{this.log.error("error running re-provide - %e",e)})},this.interval))}}async queueReprovide(e,t){var s;if(!this.running)return;this.log.trace("waiting for queue capacity before adding %c to re-provide queue",e),await this.reprovideQueue.onSizeLessThan(this.maxQueueSize,t);const i=this.reprovideQueue.queue.find(t=>t.options.cid.equals(e));if(null!=i)return this.log.trace("not adding %c to re-provide queue - already in queue",e),i.join();this.log.trace("adding %c to re-provide queue",e),this.reprovideQueue.add(async t=>{var s;if(null==(s=t.signal)||s.throwIfAborted(),!this.running)return;this.log.trace("re-providing %c",e);const i=this.reprovideTimeout.getTimeoutSignal(t);try{await this.reprovide(t.cid,t)}finally{this.reprovideTimeout.cleanUp(i)}this.log.trace("re-provided %c",e)},{signal:null==(s=this.shutdownController)?void 0:s.signal,cid:e}).catch(t=>{this.log.error("could not re-provide key %c - %e",e,t)})}async reprovide(e,t){await j(this.contentRouting.provide(e,this.addressManager.getAddresses(),t))}}class eh{constructor(e,t){B(this,"routingTable"),B(this,"components"),B(this,"closestPeers"),B(this,"newPeers"),B(this,"refreshInterval"),B(this,"peerSetSize"),B(this,"timeout"),B(this,"closeTagName"),B(this,"closeTagValue"),B(this,"log"),B(this,"running"),this.components=e,this.log=e.logger.forComponent(`${t.logPrefix}:routing-table`),this.routingTable=t.routingTable,this.refreshInterval=t.refreshInterval??5e3,this.peerSetSize=t.peerSetSize??20,this.closeTagName=t.closeTagName??"kad-close",this.closeTagValue=t.closeTagValue??50,this.closestPeers=new re,this.onPeerPing=this.onPeerPing.bind(this),this.running=!1}async start(){if(this.running)return;this.running=!0;const e=await Bc(this.components.peerId);this.newPeers=new zc(e,this.peerSetSize),this.routingTable.addEventListener("peer:ping",this.onPeerPing),this.timeout=setInterval(()=>{this.updatePeerTags().catch(e=>{this.log.error("error updating peer tags - %e",e)})},this.refreshInterval)}stop(){this.running=!1,this.routingTable.removeEventListener("peer:ping",this.onPeerPing),clearTimeout(this.timeout)}onPeerPing(e){var t;null==(t=this.newPeers)||t.add({id:e.detail,multiaddrs:[]}).catch(e=>{this.log.error("error adding peer to distance list - %e",e)})}async updatePeerTags(){var e;const t=new re(null==(e=this.newPeers)?void 0:e.peers.map(({peer:e})=>e.id)),s=t.difference(this.closestPeers),i=this.closestPeers.difference(t);this.closestPeers=t,await Promise.all([...[...s].map(async e=>{await this.components.peerStore.merge(e,{tags:{[this.closeTagName]:{value:this.closeTagValue},[ic]:{value:1}}})}),...[...i].map(async e=>{await this.components.peerStore.merge(e,{tags:{[this.closeTagName]:void 0,[ic]:void 0}})})])}}function th(e){return Array.isArray(null==e?void 0:e.peers)}class sh{constructor(e,t){B(this,"peerId"),B(this,"root"),B(this,"localPeer"),B(this,"prefixLength"),B(this,"splitThreshold"),B(this,"kBucketSize"),B(this,"numberOfNodesToPing"),B(this,"lastPingThreshold"),B(this,"ping"),B(this,"verify"),B(this,"onAdd"),B(this,"onRemove"),B(this,"onMove"),B(this,"addingPeerMap"),this.peerId=e.peerId,this.prefixLength=t.prefixLength??rh,this.kBucketSize=t.kBucketSize??ih,this.splitThreshold=t.splitThreshold??this.kBucketSize,this.numberOfNodesToPing=t.numberOfOldContactsToPing??nh,this.lastPingThreshold=t.lastPingThreshold??ah,this.ping=t.ping,this.verify=t.verify,this.onAdd=t.onAdd,this.onRemove=t.onRemove,this.addingPeerMap=Ke({name:`${t.metricsPrefix}_adding_peer_map`,metrics:e.metrics}),this.root={prefix:"",depth:0,peers:[]}}async start(){await this.addSelfPeer(this.peerId)}stop(){this.addingPeerMap.clear(),this.root={prefix:"",depth:0,peers:[]}}async addSelfPeer(e,t){this.localPeer={peerId:e,kadId:await Bc(e,t),lastPing:Date.now()}}async add(e,t){const s={peerId:e,kadId:await Bc(e,t),lastPing:0},i=this.addingPeerMap.get(e);if(null!=i)return i;try{const i=this._add(s,t);this.addingPeerMap.set(e,i),await i}finally{this.addingPeerMap.delete(e)}}async _add(e,t){var s;const i=this._determineBucket(e.kadId);if(this._indexOf(i,e.kadId)>-1)return;if(i.peers.length===this.splitThreshold&&i.depth<this.prefixLength)return await this._split(i,t),void(await this._add(e,t));if(i.peers.length<this.kBucketSize){if(!function(e,t){return e.lastPing<Date.now()-t}(e,this.lastPingThreshold))return i.peers.push(e),void(await(null==(s=this.onAdd)?void 0:s.call(this,e,i,t)));return void(await this.verify(e,t)&&(e.lastPing=Date.now(),await this._add(e,t)))}const r=i.peers.filter(e=>{var t;return!e.peerId.equals(null==(t=this.localPeer)?void 0:t.peerId)&&!(e.lastPing>Date.now()-this.lastPingThreshold)}).sort((e,t)=>e.lastPing<t.lastPing?-1:e.lastPing>t.lastPing?1:0).slice(0,this.numberOfNodesToPing);let n=!1;for await(const o of this.ping(r,t))n=!0,await this.remove(o.kadId,t);n&&await this._add(e,t)}*closest(e,t){var s;const i=new zc(e,(null==t?void 0:t.count)??this.kBucketSize);for(const r of this.toIterable())!0!==(null==(s=null==t?void 0:t.exclude)?void 0:s.some(e=>e.equals(r.peerId)))&&i.addWithKadId({id:r.peerId,multiaddrs:[]},r.kadId);yield*vs(i.peers,({peer:e})=>e.id)}count(){return function e(t){if(th(t))return t.peers.length;let s=0;return null!=t.left&&(s+=e(t.left)),null!=t.right&&(s+=e(t.right)),s}(this.root)}get(e){const t=this._determineBucket(e),s=this._indexOf(t,e);return t.peers[s]}async remove(e,t){var s;const i=this._determineBucket(e),r=this._indexOf(i,e);if(r>-1){const e=i.peers.splice(r,1)[0];await(null==(s=this.onRemove)?void 0:s.call(this,e,i,t))}}*toIterable(){yield*function*e(t){th(t)?yield*t.peers:(yield*e(t.left),yield*e(t.right))}(this.root)}distance(e,t){return BigInt("0x"+St(qc(e,t),"base16"))}_determineBucket(e){const t=St(e,"base2");return function e(s,i=0){return th(s)?s:e("0"===t[i]?s.left:s.right,i+1)}(this.root)}_indexOf(e,t){return e.peers.findIndex(e=>ge(e.kadId,t))}async _split(e,t){var s,i;const r={prefix:"0",depth:e.depth+1,peers:[]},n={prefix:"1",depth:e.depth+1,peers:[]};for(const o of e.peers){"0"===St(o.kadId,"base2")[e.depth]?(r.peers.push(o),await(null==(s=this.onMove)?void 0:s.call(this,o,e,r,t))):(n.peers.push(o),await(null==(i=this.onMove)?void 0:i.call(this,o,e,n,t)))}!function(e,t,s){delete e.peers,e.left=t,e.right=s,""===e.prefix&&(delete e.depth,delete e.prefix)}(e,r,n)}}const ih=20,rh=6,nh=3,oh="kad-peer",ah=6e5;class lh extends ze{constructor(e,t){super(),B(this,"kBucketSize"),B(this,"kb"),B(this,"network"),B(this,"closestPeerTagger"),B(this,"log"),B(this,"components"),B(this,"running"),B(this,"pingNewContactTimeout"),B(this,"pingNewContactQueue"),B(this,"pingOldContactTimeout"),B(this,"pingOldContactQueue"),B(this,"populateFromDatastoreOnStart"),B(this,"populateFromDatastoreLimit"),B(this,"protocol"),B(this,"peerTagName"),B(this,"peerTagValue"),B(this,"metrics"),B(this,"shutdownController"),this.components=e,this.log=e.logger.forComponent(`${t.logPrefix}:routing-table`),this.kBucketSize=t.kBucketSize??ih,this.running=!1,this.protocol=t.protocol,this.network=t.network,this.peerTagName=t.peerTagName??oh,this.peerTagValue=t.peerTagValue??1,this.pingOldContacts=this.pingOldContacts.bind(this),this.verifyNewContact=this.verifyNewContact.bind(this),this.peerAdded=this.peerAdded.bind(this),this.peerRemoved=this.peerRemoved.bind(this),this.populateFromDatastoreOnStart=t.populateFromDatastoreOnStart??true,this.populateFromDatastoreLimit=t.populateFromDatastoreLimit??1e3,this.shutdownController=new AbortController,this.pingOldContactQueue=new Fe({concurrency:t.pingOldContactConcurrency??20,metricName:`${t.metricsPrefix}_ping_old_contact_queue`,metrics:this.components.metrics,maxSize:t.pingOldContactMaxQueueSize??100}),this.pingOldContactTimeout=new ne({...t.pingOldContactTimeout??{},metrics:this.components.metrics,metricName:`${t.metricsPrefix}_routing_table_ping_old_contact_time_milliseconds`}),this.pingNewContactQueue=new Fe({concurrency:t.pingNewContactConcurrency??20,metricName:`${t.metricsPrefix}_ping_new_contact_queue`,metrics:this.components.metrics,maxSize:t.pingNewContactMaxQueueSize??100}),this.pingNewContactTimeout=new ne({...t.pingNewContactTimeout??{},metrics:this.components.metrics,metricName:`${t.metricsPrefix}_routing_table_ping_new_contact_time_milliseconds`}),this.kb=new sh(e,{kBucketSize:t.kBucketSize,prefixLength:t.prefixLength,splitThreshold:t.splitThreshold,numberOfOldContactsToPing:t.numberOfOldContactsToPing,lastPingThreshold:t.lastPingThreshold,ping:this.pingOldContacts,verify:this.verifyNewContact,onAdd:this.peerAdded,onRemove:this.peerRemoved,metricsPrefix:t.metricsPrefix}),this.closestPeerTagger=new eh(this.components,{logPrefix:t.logPrefix,routingTable:this,peerSetSize:t.closestPeerSetSize,refreshInterval:t.closestPeerSetRefreshInterval,closeTagName:t.closeTagName,closeTagValue:t.closeTagValue}),null!=this.components.metrics&&(this.metrics={routingTableSize:this.components.metrics.registerMetric(`${t.metricsPrefix}_routing_table_size`),routingTableKadBucketTotal:this.components.metrics.registerMetric(`${t.metricsPrefix}_routing_table_kad_bucket_total`),routingTableKadBucketAverageOccupancy:this.components.metrics.registerMetric(`${t.metricsPrefix}_routing_table_kad_bucket_average_occupancy`),routingTableKadBucketMinOccupancy:this.components.metrics.registerMetric(`${t.metricsPrefix}_routing_table_kad_bucket_min_occupancy`),routingTableKadBucketMaxOccupancy:this.components.metrics.registerMetric(`${t.metricsPrefix}_routing_table_kad_bucket_max_occupancy`),routingTableKadBucketMaxDepth:this.components.metrics.registerMetric(`${t.metricsPrefix}_routing_table_kad_bucket_max_depth`),kadBucketEvents:this.components.metrics.registerCounterGroup(`${t.metricsPrefix}_kad_bucket_events_total`)})}isStarted(){return this.running}async start(){this.running||(this.running=!0,this.shutdownController=new AbortController,await Ve(this.closestPeerTagger,this.kb))}async afterStart(){let e=0;Promise.resolve().then(async()=>{if(!this.populateFromDatastoreOnStart)return;const t=We([this.shutdownController.signal,AbortSignal.timeout(2e4)]);try{for(const i of await this.components.peerStore.all({filters:[e=>e.protocols.includes(this.protocol)&&e.tags.has(oh)],limit:this.populateFromDatastoreLimit,signal:t})){if(!this.running)return;try{await this.add(i.id,{signal:t}),e++}catch(s){this.log("failed to add peer %p to routing table, removing kad-dht peer tags - %e"),await this.components.peerStore.merge(i.id,{tags:{[this.peerTagName]:void 0}})}}}finally{t.clear()}this.log("added %d peer store peers to the routing table",e)}).catch(t=>{this.log.error("error adding %d, peer store peers to the routing table - %e",e,t)})}async stop(){this.running=!1,await He(this.closestPeerTagger,this.kb),this.pingOldContactQueue.abort(),this.pingNewContactQueue.abort(),this.shutdownController.abort()}async peerAdded(e,t,s){var i;this.components.peerId.equals(e.peerId)||await this.components.peerStore.merge(e.peerId,{tags:{[this.peerTagName]:{value:this.peerTagValue}}},s),this.updateMetrics(),null==(i=this.metrics)||i.kadBucketEvents.increment({peer_added:!0}),this.safeDispatchEvent("peer:add",{detail:e.peerId})}async peerRemoved(e,t,s){var i;this.components.peerId.equals(e.peerId)||await this.components.peerStore.merge(e.peerId,{tags:{[this.peerTagName]:void 0}},s),this.updateMetrics(),null==(i=this.metrics)||i.kadBucketEvents.increment({peer_removed:!0}),this.safeDispatchEvent("peer:remove",{detail:e.peerId})}async*pingOldContacts(e,t){var s;if(!this.running)return;const i=[];for(const r of e)null!=this.kb.get(r.kadId)?(null==(s=this.metrics)||s.kadBucketEvents.increment({ping_old_contact:!0}),i.push(async()=>{const e=this.pingOldContactQueue.find(r.peerId);if(null!=e){this.log("asked to ping contact %p was already being pinged",r.peerId);return await e.join(t)?void 0:r}if(!(await this.pingOldContactQueue.add(async e=>{var t;const s=this.pingOldContactTimeout.getTimeoutSignal(),i=We([s,this.shutdownController.signal,null==e?void 0:e.signal]);try{return await this.pingContact(r,e)}catch{return null==(t=this.metrics)||t.kadBucketEvents.increment({ping_old_contact_error:!0}),!0}finally{this.pingOldContactTimeout.cleanUp(s),i.clear()}},{peerId:r.peerId,signal:null==t?void 0:t.signal})))return r})):this.log("asked to ping contact %p that was not in routing table",r.peerId);for await(const r of Ss(i))null!=r&&(yield r)}async verifyNewContact(e,t){var s;const i=this.pingNewContactTimeout.getTimeoutSignal(),r=We([i,this.shutdownController.signal,null==t?void 0:t.signal]);try{const t=this.pingNewContactQueue.find(e.peerId);return null!=t?(this.log("joining existing ping to add new peer %p to routing table",e.peerId),await t.join({signal:r})):await this.pingNewContactQueue.add(async t=>{var s;return null==(s=this.metrics)||s.kadBucketEvents.increment({ping_new_contact:!0}),this.log("pinging new peer %p before adding to routing table",e.peerId),this.pingContact(e,t)},{peerId:e.peerId,signal:r})}catch(n){return this.log.trace("tried to add peer %p but they were not online",e.peerId),null==(s=this.metrics)||s.kadBucketEvents.increment({ping_new_contact_error:!0}),!1}finally{this.pingNewContactTimeout.cleanUp(i),r.clear()}}async pingContact(e,t){try{return this.log("pinging contact %p",e.peerId),await this.components.ping.ping(e.peerId,t),this.log("contact %p ping ok",e.peerId),this.safeDispatchEvent("peer:ping",{detail:e.peerId}),!0}catch(s){return this.log("error pinging old contact %p - %e",e.peerId,s),!1}}get size(){return null==this.kb?0:this.kb.count()}async find(e,t){var s;const i=await Bc(e,t);return null==(s=this.kb.get(i))?void 0:s.peerId}closestPeer(e){const t=this.closestPeers(e,{count:1});if(t.length>0)return t[0]}closestPeers(e,t){return null==this.kb?[]:[...this.kb.closest(e,t)]}async add(e,t){if(null==this.kb)throw new Error("RoutingTable is not started");await this.kb.add(e,t)}async remove(e,t){if(null==this.kb)throw new Error("RoutingTable is not started");const s=await Bc(e,t);await this.kb.remove(s,t)}updateMetrics(){if(null==this.metrics||null==this.kb)return;let e=0,t=0,s=0,i=20,r=0;!function n(o){if(th(o))return o.depth>s&&(s=o.depth),t++,e+=o.peers.length,o.peers.length<i&&(i=o.peers.length),void(o.peers.length>r&&(r=o.peers.length));n(o.left),n(o.right)}(this.kb.root),this.metrics.routingTableSize.update(e),this.metrics.routingTableKadBucketTotal.update(t),this.metrics.routingTableKadBucketAverageOccupancy.update(Math.round(e/t)),this.metrics.routingTableKadBucketMinOccupancy.update(i),this.metrics.routingTableKadBucketMaxOccupancy.update(r),this.metrics.routingTableKadBucketMaxDepth.update(s)}}const ch=[77591,22417,43971,28421,740,29829,71467,228973,196661,78537,27689,36431,44415,14362,19456,106025,96308,2882,49509,21149,87173,131409,75844,23676,121838,30291,17492,2953,7564,110620,129477,127283,53113,72417,165166,109690,21200,102125,24049,71504,90342,25307,72039,26812,26715,32264,133800,71161,88956,171987,51779,24425,16671,30251,186294,247761,14202,2121,8465,35024,4876,85917,169730,3638,256836,96184,943,18678,6583,52907,35807,112254,214097,18796,11595,9243,23554,887,268203,382004,24590,111335,11625,16619,29039,102425,69006,97976,92362,32552,63717,41433,128974,137630,59943,10019,13986,35430,33665,108037,43799,43280,38195,29078,58629,18265,14425,46832,235538,40830,77881,110717,58937,3463,325358,51300,47623,117252,19007,10170,20540,91237,294813,4951,79841,56232,36270,128547,69209,66275,100156,32063,73531,34439,80937,28892,44466,88595,216307,32583,49620,16605,82127,45807,21630,78726,20235,40163,111007,96926,5567,72083,21665,58844,39419,179767,48328,42662,51550,5251,37811,49608,81056,50854,55513,20922,18891,197409,164656,32593,71449,220474,58919,85682,67854,13758,35066,3565,61905,214793,119572,141419,21504,10302,27354,67003,46131,32668,15165,64871,34450,17821,2757,11452,34189,5160,12257,85523,560,53385,65887,119549,135620,312353,115979,122356,10867,193231,124537,54783,90675,120791,4715,142253,50943,17271,43358,25331,4917,120566,34580,12878,33786,160528,32523,4869,301307,104817,81491,23276,8832,97911,31265,52065,7998,49622,9715,43998,34091,84587,20664,69041,29419,53205,10838,58288,116145,6185,5154,141795,35924,21307,144738,43730,12085,8279,10002,119,133779,199668,72938,31768,39176,67875,38453,9700,44144,4121,116048,41733,12868,82669,92308,128,34262,11332,7712,90764,36141,13553,71312,77470,117314,96549,49135,23602,54468,28605,6327,62308,17171,67531,21319,14105,894,107722,46157,8503,51069,100472,45138,15246,14577,35609,191464,1757,13364,161349,32067,91705,81144,52339,5408,91066,21983,14157,100545,4372,26630,129112,1423,29676,213626,4397,88436,99190,6877,49958,26122,114348,60661,29818,293118,50042,179738,16400,163423,89627,31040,43973,36638,45952,5153,1894,109322,1898,134021,12402,112077,68309,190269,69866,31938,107383,11522,105232,11248,14868,39852,71707,186525,16530,38162,106212,11700,5130,16608,26998,59586,108399,230033,43683,48135,82179,2073,5015,196684,189293,16378,23452,8301,35640,11632,214551,29240,57644,33137,91949,55157,52384,117313,5090,17717,89668,49363,82238,241035,66216,29066,184088,97206,62820,26595,4241,135635,173672,8202,459,71355,146294,29587,3008,135385,141203,14803,6634,45094,69362,50925,546,51884,62011,83296,234584,44515,56050,89476,87751,19373,12691,149923,19794,13833,35846,87557,58339,2884,19145,25647,12224,11024,77338,64608,122297,53025,7205,36189,36294,170779,21750,7739,173883,75192,35664,224240,113121,30181,26267,27036,117827,92015,106516,55628,203549,67949,60462,60844,35911,20457,1820,920,19773,8738,73173,181993,38521,98254,76257,46008,92796,5384,26868,151566,22124,2411,15919,186872,180021,28099,152961,78811,80237,62352,102653,74259,184890,16792,123702,224945,29940,19512,75283,14059,112691,92811,233329,20411,138569,53341,109802,50600,134528,66747,5529,166531,31578,64732,67189,1596,126357,967,167999,206598,109752,119431,207825,78791,91938,10301,27311,24233,252343,28831,32812,66002,112267,90895,8786,8095,16824,22866,21813,60507,174833,19549,130985,117051,52110,6938,81923,123864,38061,919,18680,53534,46739,112893,161529,85429,26761,11900,81121,91968,15390,217947,56524,1713,6654,37089,85630,138866,61850,16491,75577,16884,98296,73523,6140,44645,6062,36366,29844,57946,37932,42472,5266,20834,19309,33753,127182,134259,35810,41805,45878,312001,14881,47757,49251,120050,44252,3708,25856,107864,120347,1228,36550,41682,34496,47025,8393,173365,246526,12894,161607,35670,90785,126572,2095,124731,157033,58694,554,12786,9642,4817,16136,47864,174698,66992,4639,69284,10625,40710,27763,51738,30404,264105,137904,109882,52487,42824,57514,2740,10479,146799,107390,16586,88038,174951,9410,16185,44158,5568,40658,46108,12763,97385,26175,108859,664,230732,67470,46663,14395,50750,141320,93140,15361,47997,55784,6791,307840,118569,107326,18056,58281,260415,54691,8790,73332,45633,7511,45674,143373,14031,11799,94491,35646,96544,14560,26049,32983,25791,83814,42094,231370,63955,139212,2359,169908,3108,183486,105867,28197,32941,124968,26402,88267,149768,23053,3078,19091,52924,25383,19209,111548,97361,3959,24880,235061,9099,24921,161254,151405,20508,7159,34381,20133,11434,74036,19974,34769,36585,1076,22454,17354,38727,235160,111547,96454,117448,156940,91330,37299,7310,26915,117060,51369,22620,61861,322264,106850,111694,15091,2624,40345,300446,177064,1707,27389,54792,327783,132669,183543,59003,17744,20603,151134,106923,53084,71803,279424,319816,11579,21946,16728,38274,72711,5085,83391,88646,40159,25027,34680,10752,12988,54126,30365,18338,100445,230674,44874,84974,143877,123253,139372,28082,91477,144002,13096,219729,46016,50029,42377,14601,6660,58244,58978,23918,88206,113611,64452,17541,41032,10942,12021,49189,10978,40175,37156,10947,71709,106894,112538,57007,137486,150608,152719,40615,7746,279716,13101,19524,28708,40578,72320,1096,182051,94527,51275,22833,45164,81917,77519,48508,5421,140302,37845,149830,5587,27579,5357,428725,248187,6326,206760,39814,32585,89923,44341,288753,284443,96368,31201,94189,119504,20359,52073,103216,179,27934,32801,96035,34111,34309,101326,18198,20704,210266,37643,27880,141873,106e3,19414,56614,167714,66483,107885,86602,4379,20796,75467,4987,5017,118857,26003,34308,114428,29198,6686,29697,73632,3739,69795,16798,41504,7207,30722,21436,36735,28067,28545,3239,11221,36031,41889,100010,19247,317673,29495,174554,6424,129725,53845,94986,7955,59676,2604,191497,19735,102214,62954,23844,11872,179525,261436,34492,428,78404,142035,16747,17246,27578,37021,33672,57944,26056,135760,2369,61674,122066,31327,19374,157065,40553,130982,69619,71290,38855,72100,92903,95940,51422,165999,65713,57873,50726,7288,20272,2081,42326,22624,81120,57914,79352,19447,1684,72302,11774,302559,161481,96396,13692,414988,3721,79066,56627,46883,21150,11747,12184,5856,113458,176117,84416,52079,27933,3354,59765,141359,2212,216309,2555,23458,196722,142463,45701,44548,28798,19418,215,29916,9396,10574,114226,84475,13520,18694,34056,4524,90302,62930,13539,19407,77209,7728,38088,9535,2263,23875,183945,17750,26274,67172,10585,28042,22199,7478,51331,66030,26774,192929,31434,25850,50197,52926,178158,4679,181256,70184,229600,9959,105594,72158,73974,2726,35085,78087,23284,35568,51713,155676,5401,27254,11966,17569,223253,71993,103357,111477,55722,30504,26034,46774,35392,36285,214814,41143,163465,1051,16094,81044,6636,76489,179102,20712,39178,35683,125177,54219,30617,52994,25324,50123,2543,87529,58995,10688,125199,12388,60158,125481,131646,7642,133350,65874,3438,97277,101450,10075,56344,116821,50778,60547,98016,106135,13859,14255,16300,77373,173521,8285,45932,37426,4054,114295,55947,7703,39114,52,51119,128135,19714,60715,9554,50492,88180,2823,118271,52993,122625,97919,23859,37895,25040,33614,32102,20431,3577,9275,15686,43031,157741,110358,1884,40291,125391,13736,5008,64881,87336,77381,70711,43032,49155,118587,70494,4318,10168,30126,12580,10524,280104,104001,145413,2862,84140,6603,106005,13566,12780,11251,42830,571,179910,82443,13146,469,42714,32591,265217,424024,92553,54721,134100,6007,15242,114681,59030,16718,85465,200214,85982,55174,165013,23493,56964,82529,109150,32706,27568,82442,5350,14976,13165,44890,60021,21343,33978,17264,4655,22328,27819,75730,16567,55483,14510,17926,45827,150609,3704,7385,272531,161543,76904,122163,52405,2039,19165,41623,14423,228354,3369,176360,85491,7122,35789,303724,4465,13628,2233,55311,118771,20713,10006,221519,45115,71021,35650,29775,7337,10864,20665,21142,1746,15080,1624,32449,10905,105743,229797,7701,3940,22997,178467,57208,389057,39683,59403,63344,63125,54847,69691,18336,56448,3362,37202,18282,29648,138224,35867,10495,5911,28814,26653,31514,176702,26550,45621,11734,4525,40543,73944,121080,27858,155561,14887,44670,30742,8796,107455,113472,56369,75581,183777,240095,133699,153299,8768,160464,26058,49078,103971,21875,71486,44888,17156,9678,89541,123019,102337,3972,83930,21245,87852,109660,287918,183019,686,10100,39177,283941,11274,24736,26793,26214,25995,77011,141580,4070,23742,46285,46632,30700,26669,19056,35951,115575,174034,56097,35463,87425,24575,44245,38701,82317,85922,281616,100333,147697,61503,7730,84330,8530,59917,61597,17173,9092,32658,90288,193136,39023,20381,56654,31132,7779,1919,1375,117128,30819,11169,40938,23935,115201,101155,151034,4835,11231,74550,89388,59951,91704,107312,167882,115062,12732,72738,88703,464019,158267,57995,60496,737,14371,123867,4174,243339,159946,7568,16025,134556,110916,38103,191,80226,88794,29688,27230,10454,76308,57647,77409,113483,66864,14745,19808,12023,46583,84805,16015,17102,2231,20611,3547,95740,250131,34559,108894,8498,15853,159169,148920,20942,2813,93160,45188,210613,45531,52587,149062,39782,28194,57849,60965,84954,89766,84453,100927,16501,27658,165311,103841,54192,207341,19558,20084,319622,5672,205467,98462,61849,36279,13609,147177,24726,165015,209489,59591,31157,6551,117580,75060,141146,277310,21072,22023,106474,63041,137443,122965,68371,5383,42146,98961,113467,30863,23794,4843,99630,30392,82679,13699,241612,33601,93146,24319,18643,32155,95669,40440,15333,34089,67799,142144,58245,38633,114531,117400,77861,188726,5507,2568,8853,10987,107222,2663,2421,11530,13345,30075,41785,118661,104786,17459,12490,16281,71936,193555,17431,5944,71758,26485,77317,20803,367167,158,7362,93430,11735,172445,46002,11532,54482,930,62911,2235,23004,179236,4764,101859,208113,22477,55163,95579,14098,67320,162556,90709,156949,3826,57492,4025,34092,87442,104565,6718,186015,28214,14209,10039,107186,233912,58877,81637,55265,39828,6194,145813,50831,105849,4974,88319,122296,10272,197216,95714,51540,72418,23324,91555,8743,140452,250249,51666,34124,7229,38592,129641,78169,174242,22464,149964,51450,14034,10026,95376,26190,120062,14401,8700,265,31386,143573,7203,229889,61567,4227,140981,2466,72052,10787,10062,30958,6099,38471,30103,23202,208101,70847,467,58934,32271,32984,36637,24107,30771,17109,73353,13650,2098,157040,67366,66904,106018,265380,107238,18535,44025,32681,144983,62505,91295,56120,3082,77508,10322,63023,36700,81885,224127,16721,45023,239261,111272,13852,7866,149243,204199,32309,22084,42029,38316,126644,104973,14406,43454,67322,61310,15789,40285,24026,181047,6301,70927,23319,115823,27248,66693,115875,278566,63007,146844,56841,59007,87368,180001,22370,42114,80605,12022,10374,308,25079,14689,12618,63368,7936,264973,212291,136713,95999,105801,18965,32075,48700,52230,35119,96912,32992,8586,16606,101333,101812,14969,39930,759,193090,27387,42914,12937,5058,62646,64528,38624,25743,37502,3716,4435,30352,178687,26461,132611,42002,138442,35833,59582,16345,8048,60319,49349,309,47800,49739,90482,26405,34470,63786,32479,85028,39866,47846,11649,23934,29466,2816,42864,31828,7410,74885,49632,47629,111801,90749,19536,18767,105764,59606,21223,10746,76298,22220,39408,7190,79654,64856,11602,82156,272765,17079,70089,245473,51813,184407,384678,1576,122249,5064,27481,6188,25790,74361,27541,318284,45430,31488,620,93579,45723,192118,22670,51913,4162,70244,35966,26397,16199,50899,209613,121702,287507,2993,36101,132229,67345,33062,76295,118628,78705,52316,34375,107083,107454,44863,127561,33964,3073,154010,190914,55967,39074,6272,31047,5550,41123,26154,98638,47110,19998,148091,50229,31329,59900,195442,19106,61347,73497,70015,682,45850,25776,38022,148951,6288,37411,232526,109277,27286,32342,9262,5220,16651,23175,46740,129438,78614,121925,66914,88710,127952,5563,21500,34521,10739,14863,191006,62956,17359,16749,67027,56284,69134,43301,35039,58883,54466,60823,404451,75743,59856,86979,7923,34273,83785,32142,7693,268986,197428,282681,17049,22346,22990,92245,107180,3357,37104,96724,49153,7683,31197,43267,82231,164276,23696,20848,188364,22309,24821,158707,1018,22514,70922,27792,45589,59709,10765,736,35218,63479,51987,24275,63588,55361,92929,81964,4658,20122,12330,44058,13065,311456,72224,8337,211229,38979,22590,138478,52757,32595,133600,8838,31549,94412,43391,90056,1585,94802,127271,6223,31889,137038,132910,2165,57616,230152,6080,10748,36737,74579,134062,50525,180532,119270,34556,76155,82394,52595,29258,31435,87820,67996,26943,183878,38007,2410,13526,180297,69856,3503,187396,167700,7838,16701,9199,56267,3661,37407,65994,23767,5708,62508,221700,67088,86978,46776,84434,32088,5612,9149,88244,21685,95151,46750,189612,2979,506311,2594,3628,40074,105039,78243,28523,6651,38058,71999,30992,12764,68261,108991,6165,26450,61961,13400,22426,7490,60890,109623,2070,12958,50355,67979,257096,7213,42578,52121,35716,65461,7516,124758,39268,302,64712,14977,1467,219452,2840,34229,11121,21602,19270,63574,8024,1532,17331,79839,78885,52029,180767,57957,6069,91265,61380,55767,8927,32881,287603,22149,35029,68876,6428,199567,46926,13412,104132,21434,366616,45060,110046,81924,128910,45886,52821,130416,29416,77342,21762,67329,121432,79924,11724,38625,81006,102033,28338,13326,3250,82056,82526,38212,21112,12382,111495,3263,7414,86274,93490,40844,30224,45212,24019,48411,71367,24941,76729,57776,3769,38114,202019,197745,31953,237533,33270,201580,255648,100798,44741,32241,98468,106931,10085,15090,170358,33154,66787,18819,69760,25061,234005,82660,6295,131975,16874,9076,4094,25005,17740,40908,19533,220019,44330,99792,50040,19619,13950,55228,24423,31253,95308,103177,184795,28590,82285,5059,3210,75525,49894,70007,56178,10580,36051,139681,21617,98736,3555,106306,164189,37352,63915,47824,24883,145530,61904,28444,11483,19837,145446,30420,112972,85939,11835,191233,2262,20705,58630,1753,148334,1197,144714,6887,11223,107667,60879,77914,4151,57417,81594,96681,169430,1784,20444,95138,254041,27038,596,7117,72808,13759,3353,126776,21074,55322,27081,36942,39547,139830,179275,4453,713,8722,71399,19204,25785,22794,23923,104114,11291,25458,102309,88396,75288,230440,206396,104551,58447,130857,37247,94734,31548,176529,226077,65159,20104,10096,66881,94191,237909,27109,37404,1520,27421,25220,113003,23423,24884,50585,6286,231877,150800,11789,3226,90004,60642,5053,202400,61442,132531,175329,57138,30116,103847,9973,75367,16452,32360,59119,21246,10191,164804,23305,61051,37348,154530,13214,5468,50403,66754,130976,50559,80515,14436,155492,84017,5472,43107,41240,2890,90431,70188,382,76234,48040,50211,281038,237007,32115,142178,1536,22761,96429,1811,31243,1679,49143,55209,17402,235054,61494,7462,77030,34925,87609,78002,9499,9027,73289,201078,101379,63544,27666,5469,10642,30029,49816,132979,95620,58086,351930,116300,2110,2043,30845,6154,11279,16727,4122,2277,27281,4971,3650,39060,61970,65951,39674,75686,38151,11370,130809,177895,32665,63725,122267,7857,39618,118483,44792,157755,178624,136994,24260,41308,22471,12404,21707,12486,30473,52781,50246,20247,39065,909,56825,103158,128603,31542,1089,41935,32744,12428,37963,84420,33134,72921,208449,42622,168151,127335,147107,46699,38216,12591,94342,85814,31423,24944,2605,87542,67473,192551,4496,56321,91819,17630,6300,256183,114569,202090,33209,35289,34897,24967,40520,43470,5344,10199,34810,14283,10381,10017,62923,49924,23233,64539,13051,35686,19698,11570,135555,120868,44924,87065,52318,52335,47586,140906,245885,109834,78668,9065,46990,25258,72022,61243,40838,4545,146387,10537,11557,17470,36930,68104,46711,24264,79401,81043,18225,120488,24746,84338,81652,28266,13776,21878,46973,1047,230465,73357,95777,24973,210160,62210,58404,110633,169651,6937,41870,9909,26822,191062,76553,27519,96256,239070,2478,205678,67955,58532,20601,50120,19148,78501,195724,110740,8249,109665,27446,30568,57631,31425,49752,32820,65504,50079,3663,102256,219898,23849,211315,14645,4359,91767,9528,12449,49366,7941,49763,107848,8930,27086,50686,9744,10447,81935,39513,46514,1670,29229,6172,22312,137280,97759,9806,14445,22976,56458,73391,34983,93760,174219,52573,33149,59747,2429,136277,75123,165263,91040,7446,57632,48633,97140,246081,84766,151684,79918,93268,120346,54059,54875,77858,32996,103590,45276,11968,19600,25849,17159,132907,42828,16817,4913,99462,103303,27395,5737,74184,20749,21160,14377,77062,131403,158735,10999,27799,77785,9320,34366,51593,61070,33746,47048,29268,36675,30262,53297,9832,82e3,20188,122292,39917,7331,18160,68301,185935,134830,15031,4935,10004,165845,185534,46923,30109,44134,122631,18874,22903,112790,26561,18549,348902,82871,140345,255565,135390,63556,103747,145055,179600,145662,296111,61661,211987,23952,52342,126343,48450,32919,44277,82185,9591,62139,205363,376969,394874,108461,18040,120885,14798,39863,16571,16794,58271,81025,55206,14640,118656,6361,44092,85970,6262,153863,108244,180200,72264,79947,38044,10050,5735,61221,80712,5471,115689,11391,11661,184257,20010,60116,30320,19327,134598,45455,27542,18004,125092,452272,1549,91523,46567,180063,156026,2608,11174,58848,37788,65907,80194,30490,5786,40775,119519,106241,11323,156297,8425,61495,2617,29675,2425,59886,112582,49142,59618,4863,50597,86710,50650,168632,27693,85641,83643,18993,25768,84284,28090,93592,36627,312804,43381,9887,9402,100931,97165,3311,173330,66805,28935,4963,184460,3201,78102,19126,21607,37496,24938,22615,16153,32862,134792,153318,61120,6067,2812,12826,12792,23825,37559,64662,202250,102694,155488,85881,149193,46233,65383,15521,106982,11358,176786,25752,39717,34208,24510,32464,77742,39371,72028,138229,60688,71386,102834,132477,2208,11548,63670,271279,28351,30338,38620,32491,99845,143885,152266,13252,2825,178663,108097,1775,78201,14897,113573,163346,62292,171129,22183,96598,38733,64971,166776,117445,9968,146393,44677,74867,20908,97328,12761,25656,26785,9148,112344,26115,99176,110121,22437,49547,6180,79320,5835,31392,43328,33377,75870,119860,69497,80273,7325,155219,43167,111173,28347,20222,3763,71752,55041,47252,14618,28088,15012,97805,194698,54636,2036,41349,6173,96604,61530,51859,43782,13361,24334,22668,24792,7070,23441,16789,3209,36211,208475,26242,32880,122181,182407,21444,31060,88459,29929,77907,12716,10934,97005,20599,31690,8403,58445,30303,22700,10336,86731,103115,337709,72556,46788,112566,47684,67089,53548,36874,56487,41387,125985,26893,40071,106683,73712,18787,40105,72992,67246,137276,50802,36790,70328,138827,22466,39263,183295,29858,50975,9322,57397,10654,24364,30383,55799,41600,23584,127295,296610,129078,143558,244131,86397,36049,1085,80677,3820,108139,5476,34767,24683,7758,13060,7239,131671,250593,59556,103392,29810,4188,252323,39404,116877,7651,43600,40338,13554,157253,39196,25978,144387,61211,234,50104,6129,10449,93777,9240,356378,274148,4439,72970,3724,147770,78680,62570,115877,40027,40547,36817,224392,64609,34795,165027,67440,2477,37206,23431,50754,164797,46018,94995,170982,27051,7957,22767,3674,27900,56419,18930,60701,41302,2692,84749,339721,61996,111094,80221,50129,1045,8153,62945,19202,8250,37208,37418,32560,79477,41106,88569,33963,36693,5892,30570,1581,66471,49647,11922,160717,29442,5643,114865,82962,95982,132098,22633,22838,94726,54556,28566,205039,162340,33216,16849,35847,221339,94851,26533,71469,1805,3804,12935,45483,71020,36310,65381,192960,34240,35165,59773,1248,46954,155332,96864,4246,388800,16129,57133,74592,44807,442014,38203,42574,80818,91592,26377,36424,65760,977,77387,22628,147610,28018,30561,98454,6969,119628,63648,18170,36854,26601,64018,22027,37279,51395,152934,21153,9430,58760,194742,5330,55115,34158,28917,174111,13171,122326,1526,43896,66094,25325,4234,148354,11450,275,18999,112191,44365,22723,68409,8733,57746,96565,75007,14196,108844,29475,88599,177563,100792,106156,86323,93726,14248,135341,194131,40126,47099,14779,8272,39597,95983,171398,65882,28052,10393,47213,40689,22120,72212,106829,34964,109146,753,648,21660,30047,17527,181025,5619,145357,4085,216883,9359,186951,24779,53931,24545,36197,223296,62628,168101,4243,107313,30321,26642,13049,51059,31027,107912,807,73550,26551,84369,122422,165872,49754,74213,234264,33151,52014,33100,87183,22365,52500,40013,23302,5652,72723,21404,26107,48434,587,94049,168493,96418,32871,70860,31709,25128,443,71597,166253,15670,70994,26341,133675,28280,75491,54756,47955,56028,26182,11952,113272,472197,64640,110753,17919,337,50642,22576,142,87371,53391,93210,126694,15285,19642,85667,14148,1506,42092,52962,33243,11970,20734,135843,57044,58880,13002,219134,22876,64754,232519,4257,43120,321573,24799,64526,124728,52579,81472,70831,276848,17403,74359,23021,182101,74597,23744,148267,12055,7976,5349,11772,67540,167347,65318,18720,127832,108238,22828,90233,9987,259080,118185,73209,79270,13775,90100,137742,90799,70569,15699,19961,9087,67475,57872,39731,8810,134897,131868,146849,19898,3334,2281,167061,91073,60356,467742,74712,188,53179,137679,92769,29241,9537,132595,80119,1041,88962,5976,40171,44911,102859,139059,104558,98987,47761,19272,71472,113864,175377,73338,10857,23402,23758,1591,139864,5644,4076,118760,16427,134198,18853,20291,100849,37423,22038,36677,19071,195521,57445,11069,31869,55718,66882,148490,44,41296,75242,49704,166810,9906,20943,122258,49112,105667,15969,10344,6408,187694,21399,72742,58970,14867,14376,81889,41856,23225,15042,56993,16074,131389,74276,72407,53875,383108,53597,37363,68993,44854,122548,430927,198279,38430,80409,12245,2981,628,2818,17760,37437,238229,7968,46892,2200,3730,34190,65983,37959,112291,87850,70827,6522,20750,73913,111621,41652,19587,2780,58668,25916,85259,18200,168962,95781,42445,102050,7776,57662,103313,47742,96358,41964,66174,100396,29069,204735,19679,27978,7479,40264,22534,61183,36081,107436,58223,14680,23002,101311,24716,124108,12908,5646,31750,40380,14215,232799,102772,14122,96775,61398,50917,12096,149880,67833,598749,124194,155871,49216,790,14677,65319,56917,7440,145744,95701,12206,49405,129269,76199,45732,9767,11058,9047,210885,11051,7392,26307,2130,8132,147526,20802,232698,115660,50060,59789,57344,107623,80343,112676,23291,9866,160971,34032,118291,15719,59730,164911,28975,2659,58046,78480,21854,66209,53863,109085,116045,29021,46481,107552,22130,18764,70254,31272,11300,52460,43933,84738,20721,53869,190840,79673,105300,7561,321817,66924,13940,33281,101046,183181,32176,71878,5678,62924,79535,56646,40303,19559,27703,93042,73368,42187,3670,37376,46440,7023,36816,109628,20680,5940,276440,275233,170848,112093,136996,14984,20226,111441,77693,112960,48577,39370,55707,50314,123404,26570,54281,61372,123391,4857,35928,246740,132507,106646,44241,7196,92258,9825,37688,51197,303141,5590,15476,132986,10955,85782,34486,26696,7991,28813,18858,39546,11703,11365,38185,5716,93555,11925,40121,60002,6985,10976,171384,3887,43394,13337,56346,6381,252336,39573,75042,53711,1028,31781,44295,95925,131713,7214,68125,43571,70954,213234,1628,8760,13391,65485,17320,56038,1710,25248,60803,57399,19839,3870,326,281556,50945,72400,21460,316244,75619,56246,98775,481,13513,55765,50427,7388,123519,32929,57908,27124,61316,101097,57467,30228,48792,10788,20402,37318,50526,155730,34456,158065,145305,17832,43733,64052,4506,35072,205355,177028,184004,187081,68616,35938,83703,10367,36892,93186,260137,51934,89970,4985,23445,26755,21558,7948,78741,23376,124405,85594,68596,57536,49351,12619,56593,132668,99924,109728,71844,71935,196018,65464,17617,14987,89701,143773,33997,8687,22701,33258,2914,4436,72108,85610,9671,49067,2327,82988,1361,1672,44033,35777,30269,24057,10605,82236,616,15793,13919,47249,112086,116698,9484,80207,90574,33304,68624,93127,56101,42210,160929,4827,38995,38095,4701,125119,5027,33680,9236,231236,14135,87837,23318,70261,78893,30151,81482,14332,1084,74256,27532,46644,79185,3148,62615,6981,55672,31668,36825,1849,14536,37446,14738,23779,43058,162749,72199,1168,21346,5592,85932,85302,9668,18351,57135,150360,2080,228015,77953,34670,119302,151751,31009,106725,84265,45214,59289,74178,113071,263206,111009,4021,44449,188119,192629,123592,392506,292847,114487,12831,205858,9852,20780,79648,75767,357014,97721,18166,21005,67950,33226,204009,16536,2987,11335,66717,144910,47950,17262,55060,15063,2934,51038,26775,178497,66008,3427,49433,128592,20036,157553,63861,3089,23015,51210,28696,35933,49942,71135,231518,99620,17248,21835,176536,20676,16944,38700,165831,233253,295625,36723,13023,52745,10907,19423,67972,125868,95473,82875,1183,108455,52685,33417,64095,21433,52438,33191,127809,44505,211823,7810,2752,95548,162031,7185,91196,47563,61721,33359,17897,23682,42806,178101,22874,49707,199897,75419,82456,8618,11171,79712,116847,18783,44190,46564,5346,59046,95032,7893,14916,3214,26800,24172,121453,34362,10250,17408,18888,4840,68696,22831,13162,36005,32512,14800,62357,41723,45046,27247,37486,5372,2564,34261,298500,66509,133920,89138,31305,117697,19097,108304,81386,84106,23802,46411,63304,946,51417,41777,41041,19501,115864,60743,294354,37955,94165,18116,1156,17937,20645,57114,90804,58042,48643,92288,9861,2557,88546,61333,101008,12853,5148,87856,4152,144503,73841,18718,9789,147565,10846,42085,12789,30223,8993,56352,67203,2448,28215,6052,23540,126319,75933,36689,80235,23231,23561,21383,38800,77548,102798,21234,31468,158608,46188,63960,191679,8051,67014,11185,170078,42186,28827,34777,41930,212079,12421,34750,24111,110344,73918,45171,70826,141949,40063,23979,24254,37309,26724,27179,24718,83648,54938,14591,17425,29525,102675,48975,48654,12316,8929,60640,41709,50168,63264,89812,50716,48632,38755,138583,160123,55579,71829,24230,233277,46322,39650,166388,34718,24108,98252,7031,106695,62498,18258,35062,217827,78731,34824,33354,19520,60852,2432,60224,8587,2836,62955,702,20227,42285,40560,95592,62486,11094,53035,143291,18842,46177,77994,1770,9657,107422,172915,32655,128716,25886,25164,156740,119928,165875,85817,11007,89110,33956,12652,65156,180266,8494,36889,19958,20955,96,1264,118288,135769,44754,86671,5632,19026,168220,289120,33569,93821,66144,70635,7687,5642,2714,55445,56636,71545,184182,93133,7332,37389,12643,52315,22729,11014,158742,17050,152889,50178,34601,41945,52136,9948,26914,63548,95721,115951,40759,8960,158258,38938,49232,48325,42234,81523,253019,66128,40978,20048,238048,38760,62928,122560,118532,43687,137472,163689,26680,9878,17448,51035,16211,60834,36749,29178,14241,59868,150086,2305,26477,42422,34342,165341,83279,33894,14257,29928,12743,13957,125571,89134,66712,10952,16507,147839,30146,7249,16565,45399,39874,114565,215780,31990,230881,171477,102,196546,44538,10880,84948,281705,86651,10617,31395,2342,453658,43569,60561,132901,21845,17727,58556,258242,22262,58728,4008,77997,11806,37431,30599,81375,109137,185787,114085,217292,97453,169085,30593,60212,11544,102056,65580,2384,91655,4855,95725,7295,157994,16228,20669,53276,141590,105246,17334,25440,76067,17967,39321,38911,11362,28559,63807,21627,26468,85816,40120,1025,15234,58319,69516,66512,124548,75845,78873,22137,46681,51242,85683,32909,76747,35555,43396,101465,1765,73094,1077,2962,39028,66777,57831,42048,15828,13962,36041,63657,52412,5242,58846,2141,5506,219012,134451,3936,182230,17558,17153,152237,22621,49377,170216,35257,68233,65374,6510,11126,212151,7184,2480,22517,3437,33073,30156,16557,3768,55067,86829,91e3,12350,148650,66017,79424,70885,49066,28250,21369,51213,34533,11510,3258,18176,18465,84413,6315,36411,163765,4346,356,107618,598,13727,285026,162695,8749,14583,7132,63521,184253,32378,25991,5604,30961,53675,4874,84693,5086,34811,26978,56564,7904,33519,51221,113942,69253,6664,125563,22055,220680,102008,742,51930,19494,176108,44424,35123,13025,75685,11759,74335,22250,181453,131147,16984,132115,154311,11991,76452,52609,85351,196,30969,9198,74919,2529,56838,71779,29187,116304,3504,62330,41190,86153,28393,254926,104228,105189,13264,84359,3574,12415,8534,57147,10175,188174,59504,60932,66318,16407,107921,17638,99103,49278,28403,39786,145865,8462,3558,43406,142271,29139,21989,36552,93955,72365,7176,13556,106185,37957,321774,17782,129017,51154,27938,24952,1935,39366,2791,33489,41582,56078,24558,9311,5449,218786,27808,190429,68013,36020,86003,29735,3404,87348,119357,115714,2324,86796,81973,40992,43376,93621,28784,16808,36367,2517,2909,191926,24978,55303,53308,205724,60068,3098,21375,64784,23949,26579,63121,12319,80145,39967,97861,6757,70143,67642,37082,34698,69140,122883,46151,62187,80934,429,19437,135071,137885,222647,13331,154065,327,61778,74257,40116,37493,14855,85079,237641,42342,102164,199965,71204,4662,29368,5042,113914,122214,8955,13149,102503,43173,5659,163787,69003,307084,63392,171080,21390,81918,86666,36622,24126,28887,5736,28054,207170,163428,79891,346467,95363,38980,111806,80828,9200,19288,294896,114468,87405,111715,141705,7015,72754,68463,48738,243147,33397,101210,37051,98801,82847,20397,4940,185559,18716,54718,83491,11725,40803,1128,12128,23060,5174,7745,67007,46701,1571,27807,180186,256996,18975,16837,7877,212758,250379,15440,87954,57755,24719,124057,83461,258,50864,8874,29038,71289,31627,15429,9005,4061,113851,107716,82819,13651,79656,117851,17539,111446,12938,39724,190787,4352,15402,21070,62708,8539,23777,73853,13552,38810,86117,16285,56400,1718,75342,142863,29033,378,110113,180321,32586,23606,26393,160984,207987,23783,8406,16904,24596,47274,11693,46539,60524,78595,48423,31718,20170,9009,146268,15183,191060,172765,1349,138436,37365,10970,40509,225817,20021,70394,152138,21541,66559,66544,89352,2725,17258,91345,7313,3815,115868,8660,40362,4071,103524,39388,118275,21950,6549,38226,32754,209574,29201,43495,18028,20296,40597,18370,47520,202450,24134,2219,8195,69545,38041,136934,46374,19041,159811,84865,58620,846,98749,13569,30714,97246,32186,4479,27355,92973,35214,151491,75963,37631,1561,27200,238083,23182,60756,12291,25766,39355,102333,87362,65741,59906,19538,201575,48772,102938,24438,292580,39964,66366,9004,61379,50548,37622,38732,28379,68180,76622,17488,69849,5963,7219,48143,43413,55358,540,58691,29506,19245,52193,48621,5518,13048,118625,44755,191081,42061,89197,2259,60665,66994,71210,51232,3585,142096,55024,7892,8345,58653,463307,65658,64319,137941,136323,53499,12746,43492,6978,95163,29925,60175,5128,7352,41463,184756,121146,20473,18426,4598,5309,54580,14277,121151,10691,56711,43880,63409,76682,11830,172218,264898,32632,66536,81062,31649,25788,92774,60222,11100,63159,9432,224657,25240,53613,152,138620,163829,2397,85345,12501,37507,64932,38575,43522,65789,80198,78796,35226,3851,108891,73311,3060,28391,93671,39663,46142,30982,66041,37281,68157,26553,71872,81142,211527,39747,118119,22695,2859,11066,20232,168911,7933,197005,17066,111071,44434,133994,120798,12766,227798,45756,132852,29917,36076,55352,65281,129800,41958,18944,84678,18580,168093,132621,39997,54092,27740,32354,3770,114118,103242,43918,15899,18574,145944,3190,123469,219903,24169,100571,62403,16776,92779,14535,17168,16475,14304,37231,1712,28218,242754,61688,28980,1318,51359,222657,99200,67989,31772,23932,35351,201251,49041,27306,19128,40135,3986,77333,19649,120683,151927,21081,7076,78375,77501,101599,8011,89585,96715,58179,5378,102138,106793,26051,217276,4197,16297,27014,46721,13322,22806,5278,29629,70632,9647,71519,58818,40603,128530,8903,36770,56900,31483,26935,43845,34265,34920,87658,6114,84767,64250,47318,50720,19264,162514,33357,13117,6705,46696,75032,71054,87004,42035,69138,11903,99854,102328,19611,34525,69312,6431,49842,101600,133178,108751,41829,89939,225664,48916,99556,9195,130387,5960,36857,116724,53518,94002,39077,53996,6945,22261,64291,8314,152785,57588,16522,9091,5048,87671,35441,39509,1945,12423,158923,178413,37549,14095,1475,73188,62878,4819,24012,68534,42606,4010,120809,57497,59564,101758,103718,32701,80116,12345,95834,46918,21468,53213,15665,31200,3867,5140,96013,250744,21016,10069,13968,35449,180829,27683,39704,59956,22893,3115,26293,32785,75934,62445,141162,62720,2018,83638,19949,114012,95006,3330,99829,130935,309272,9565,55874,121727,37017,23586,319858,40970,27602,8625,112329,61060,100088,118525,25922,16232,1907,60671,51583,44553,80993,5262,94679,8676,940,20736,11823,3020,16476,12340,152600,97416,3703,25744,66826,16245,16876,46446,84798,74227,176020,45192,61955,75496,23946,23626,40372,26036,6149,11822,30582,16541,41914,82385,232823,40921,80773,14930,3631,7517,39619,4348,36180,126106,138939,62611,1477,113512,47321,25052,14546,118881,29060,23589,128322,36795,18401,137921,104699,267929,36194,172791,18113,4766,188215,30083,332586,94089,5805,77909,22194,68234,154976,43220,40660,70001,184893,138095,11128,103010,22663,5108,212615,8485,5565,49222,54614,26530,42639,16319,55062,152662,105595,21114,22216,10294,68158,10436,86950,7206,62115,3977,3657,59874,456,118617,18156,106663,112229,80992,17442,8217,55551,5133,34344,251927,51153,39364,201321,7816,66803,23057,156724,145664,14276,95705,979,2796,6875,13429,212525,50602,26276,28284,3424,19465,52397,46963,31420,51399,206476,92317,48851,637,100820,83349,10317,60227,21972,6908,282439,32857,224767,95629,83882,42106,87338,69757,29840,68709,37665,45244,114577,49188,175943,54009,186746,106158,70168,3358,234002,50555,9221,129338,9562,20118,32923,78479,118280,65752,4977,10474,102174,60947,129006,10570,83451,8598,8078,159367,123785,80438,16742,5905,5281,181513,42402,6977,163136,93179,42191,14968,50421,112401,105440,33456,57347,121611,4221,94954,36517,24046,27796,6255,33394,72990,135408,116627,1233,57874,25654,95419,68156,401399,313338,55208,45573,93124,119251,47200,38196,11909,130667,45391,73904,64964,167846,4137,115606,52036,62214,7969,160925,7187,1132,134835,40309,73195,64494,80472,444841,61111,26500,45323,40743,53625,52797,22659,15631,29739,36706,28841,39147,102836,26794,10536,14845,87305,45874,12241,127587,83833,57183,79722,30844,41304,84655,20825,92500,3722,25655,27811,10157,81634,31362,34088,92487,70123,22190,185100,72658,139035,192523,88241,2078,230490,44528,85638,100198,22088,29982,291233,241062,13865,4445,137791,37835,107218,31726,19718,38234,72528,23046,19177,66695,5109,17251,28077,5617,21554,47839,72425,133825,1486,73065,181275,141508,21768,62971,63082,2512,34200,9904,120309,6392,91243,68416,268253,41199,116757,138551,185526,41246,28986,4093,19057,17295,4148,245766,122360,35356,112075,20301,75441,10998,7977,19769,62922,937,63547,100196,26427,157820,20983,236696,22935,8140,90315,156004,47204,140973,7726,45097,52725,22636,23436,257282,105247,522,88389,216031,202204,46812,211666,19693,68828,81691,45925,11256,30292,372,5236,167826,88328,232776,151611,5360,82104,18841,80393,25465,18285,20320,72377,31730,33160,45803,38715,27705,37379,24163,18360,103586,4015,32305,269494,91252,20080,36567,54650,7797,57073,12650,31164,42209,6375,261663,105528,81661,106002,2800,5375,17247,43151,4442,15727,194619,100855,144898,62320,78465,39929,16454,1967,28311,61363,17219,9395,8745,121445,76939,80385,162380,22009,54191,44248,16299,122830,48151,74429,78291,64755,14238,44966,2511,17712,67954,93583,829,105899,49935,84750,11591,33185,85447,42717,27409,208542,28965,62052,52525,5597,25694,65594,16343,63224,276188,12475,9331,127507,38522,57287,24128,133161,79723,105548,133695,48917,27558,43278,46520,13778,141954,110785,83366,17715,46317,105763,66298,147013,41086,94180,16478,220447,44611,730,19722,78975,117889,125643,26254,16574,18480,65006,15806,38549,246418,46052,36056,8440,34984,30170,3163,59800,4458,115442,4283,41970,33507,104078,1653,22,121158,276486,3655,6338,24048,133421,23641,2161,24422,36006,8086,10675,181474,12307,29514,59143,14729,52509,87128,122470,19446,80852,33314,24573,119864,14237,9652,57779,6612,51851,15284,98871,90581,124466,156831,21190,22015,71380,161906,87247,69201,18392,17908,108470,72962,40719,14338,17911,95260,43339,20610,78916,20710,72451,11315,31448,17263,58853,178878,48111,116002,45497,80506,82605,85880,36300,121755,25215,36118,301929,88728,405223,276136,553,34704,212438,49970,78329,922,20711,25036,257130,38295,145369,18128,15385,30829,55656,48345,8012,3561,28004,122041,192900,58338,112508,41085,29976,87040,47117,23905,4336,92061,138880,97407,42083,172121,6256,25192,172671,5,93568,1420,12677,31605,56743,40620,6015,78415,231077,31298,80026,13902,19048,24924,170586,32955,176119,87859,36731,6773,27711,24658,26475,115216,133207,93250,95820,88522,8317,5714,124047,55219,86860,19677,23961,22928,162209,8904,225992,359835,56084,96201,29392,96558,86071,93643,55114,13347,8183,95129,82012,2017,123336,34219,115554,157159,47747,101684,41008,18735,193781,104151,226906,7552,179874,124113,31159,21162,44010,14771,51268,166128,31382,73124,77438,92830,205709,12113,1292,38937,13114,1334,2118,15597,69581,14449,21934,76618,48728,67038,14967,51495,24243,87736,147249,26720,11119,46063,43749,5843,44147,152629,133428,65703,14269,45604,57982,28672,55616,45957,8438,95433,37698,220862,132034,39456,61870,4161,26501,73560,56418,9845,4654,20916,10456,88920,119358,9015,65931,96507,48029,38534,21676,109081,43078,34943,25089,6131,28766,23665,5477,10255,16695,67,45778,42443,42770,29534,23733,100513,62617,42630,48746,14191,43753,50295,26007,8792,57243,43119,54725,164253,58250,112304,131796,25165,4651,3188,24831,47748,3705,19540,13211,102095,5593,18699,23666,32005,117571,33541,60584,74573,86311,99443,25172,27222,168938,7143,11853,53560,18834,19960,86522,28217,53266,117700,72989,34323,18721,66450,34346,74056,47217,202002,46269,9429,68582,75458,37823,82843,96652,32549,145144,27958,19820,158086,31955,201406,135379,31207,192545,12950,51704,9094,248263,76147,64028,110009,79407,89345,99284,223492,47966,26848,15359,201137,2861,110507,71231,72297,31851,118777,71039,151051,240855,16333,50766,14727,7939,4149,80908,418780,88378,59276,1327,7284,38576,79814,65820,42199,84860,49574,62596,12396,70598,40117,8648,7994,16836,7630,14047,359699,106878,525,29037,28064,13380,11675,50669,74216,103539,180314,27449,56299,172344,19274,7301,246099,32043,19422,36506,129317,6806,30140,4614,46639,66926,932,86600,6322,27847,233103,10541,39025,34887,3517,12972,26220,2031,66561,115015,48658,47596,12714,33845,3893,16165,35237,89983,14769,11962,147224,47018,29977,27979,5552,82338,86023,131368,1218,24853,237840,132193,15455,40873,3668,65351,53388,15229,59889,272245,47934,11858,34347,18038,90853,86981,300602,19343,114181,29362,84921,6095,106059,79472,38015,1206,48741,6208,8e4,21916,17423,6002,108083,24479,34931,56661,9511,26995,100694,163853,35997,81254,58321,18919,171890,86877,91341,74503,70477,53412,7027,59281,39892,131302,5864,15947,61301,67466,162369,47956,27874,35624,282324,21270,111847,102548,41482,30955,116737,28264,8592,55458,22301,75090,29821,30697,51709,3041,19208,8038,24634,30467,87509,126428,19389,18814,152686,20701,83474,45832,80891,105808,11378,153223,120770,98186,150633,49838,9141,12755,30962,5260,74490,21256,31678,65062,33326,289838,187831,20595,89768,2805,58535,10844,70085,12090,2451,138068,98544,24461,4511,6754,41684,28203,3383,65355,82833,30161,83924,234361,128424,28921,222594,33975,125491,34069,11508,67464,144226,41850,98703,34371,7901,21254,38398,65651,23549,53883,213340,123269,12028,71764,177701,28758,2623,68395,11549,15232,68603,9660,63116,36079,57093,31198,20475,48467,89984,35619,186847,107469,31389,43631,73867,41949,68841,114250,1605,30564,63403,17588,27680,99533,12641,70325,50428,73426,78379,11855,91651,72081,91720,60198,15743,12065,83398,140046,6761,46598,45900,5068,886,62448,148968,37347,19405,9680,15819,43496,63370,75667,163700,37639,3633,22774,34341,183131,134335,37200,23915,7054,14194,12970,26438,13350,285521,25594,8219,104410,91039,168804,138480,149734,15907,33818,61132,60082,4622,110187,56736,13551,73571,3945,73463,65498,17758,263266,17593,2710,27585,54469,38200,45367,63754,28881,3473,12791,98287,31895,65787,4463,94536,24951,36332,59901,28803,52130,86403,7668,181822,74831,18977,9850,177206,145485,109798,7292,31421,26280,77211,58511,12507,127004,11113,147,8729,56208,43066,79926,129937,31345,83947,39915,46146,98763,42566,1337,13192,18323,105163,80570,117753,16555,72883,11077,159438,40764,70933,83329,26066,12276,72059,21655,173836,126713,69454,153482,91585,70644,102558,110483,6764,127864,190133,3961,101798,20945,71138,82402,90884,69669,44753,923,16939,59700,164258,25969,27082,31399,43846,6306,246093,51342,6153,151581,202801,182731,56475,162188,89426,141356,14355,121815,27536,28023,65257,77523,106668,127314,24947,12790,38796,169698,23555,10725,44573,183083,42088,62716,43265,105958,32050,44067,50118,1668,3874,6243,318411,16599,1691,94999,52378,28671,216728,123258,2059,34969,69225,5913,136280,171443,141515,91662,22175,135282,80020,92270,1663,4808,4482,3495,34691,5226,109830,108512,17342,107488,11606,123190,100247,29666,146527,113014,15794,30894,13224,39585,243192,22351,9903,7836,47699,11078,25468,122291,48821,26780,122679,75521,81450,630,4895,92900,55074,74293,17441,3563,111657,103102,51613,12318,52370,36191,68245,34269,40445,41354,122901,168604,182500,62012,42557,11259,24428,115113,86345,12362,3909,78430,86852,134602,20459,47853,93879,22577,7659,3688,38555,13349,17381,56715,91639,12493,10895,92438,3142,37057,28928,2004,36427,32268,34222,209974,10432,67436,41989,173518,107930,27079,62729,30908,55558,5828,45031,14902,53546,8204,144263,60255,14520,88212,86582,109589,69356,8064,47449,8505,66558,16886,4844,52817,111260,215129,12941,91118,650,20770,6273,73089,40618,62790,2873,35002,14023,97208,19386,102646,36993,143736,135457,35385,113601,17893,32627,84439,100619,56016,6581,57264,172160,45452,111710,203627,70131,24100,322787,1996,35665,70078,22358,90922,83658,4097,63200,58499,14542,99153,52159,6615,12414,63415,31986,16823,1579,65405,137809,8841,16898,48082,259,33014,42375,12260,179850,73667,91389,98882,29532,17311,326251,41092,5928,20742,44964,48019,43505,9317,49265,6643,192712,48424,163487,19861,20113,70848,31928,105333,23685,78563,14638,54755,7158,24142,44018,20774,125255,20331,24280,10163,1285,2336,39851,4299,117269,46714,63816,87779,159624,11731,9971,990,137317,108831,50994,74554,162680,23640,131597,146962,170620,34829,91205,21184,1913,63616,18427,93136,156592,17519,67565,115882,138220,78622,88535,18115,2711,33554,109492,54298,971,24914,25863,36363,45715,27099,194995,14299,178181,111488,72395,322385,157719,130787,11897,81843,83999,11369,49280,118604,40922,61332,110343,53407,75639,40582,300440,54722,25637,13694,48248,48278,194521,56203,52779,48783,72627,10953,376,16733,280238,26351,230789,15132,25168,137270,3588,63704,73376,94031,74284,19443,159557,9697,39901,13351,119050,15406,146455,3460,29556,75195,37673,102524,92329,47289,98413,15311,100684,56345,7116,95480,11590,7200,167,23610,58426,17730,136656,27944,53151,2701,8824,103124,3017,90744,113588,53216,79736,65940,26931,498,29568,80540,143543,21292,1740,59268,16561,180816,42323,50174,40890,52866,10703,57169,4700,17191,4424,93511,49698,166650,26972,48631,165169,82879,69326,202970,4007,2376,231325,139592,22119,62851,37504,68816,58345,67398,186643,43331,277416,53749,15746,23102,17432,4793,151138,48822,54265,48203,198688,14305,54287,2291,18018,113378,123260,7180,97549,87027,120085,2920,76080,8190,102005,5641,64580,14955,59802,54028,58884,19367,81779,412567,85957,97053,103637,78871,29364,27637,141728,4767,30686,112738,130146,42745,12730,105040,14844,232,210944,36581,152317,135543,29744,3129,55647,58149,46319,27265,17499,28005,59948,7170,34138,5702,293047,110892,408,91760,218674,18469,46095,81403,14389,4610,35672,73060,11006,74848,104820,118143,190357,20043,105358,141735,5115,27093,45924,123073,52599,29433,9616,238350,78610,24851,58858,26769,31969,24613,18294,4982,32735,39639,143563,112073,202205,12567,4873,88601,44897,81503,101648,81362,34662,85277,17574,48173,21435,221188,40215,39576,80786,26544,64668,81841,10731,37733,247986,149188,127703,495,18382,54388,72446,43071,30974,198723,89608,41360,190,33045,8386,31658,19992,237838,119015,137622,50890,100913,6460,116233,267230,26621,104129,65114,14190,41542,14888,85962,23342,23041,26453,43725,71809,45186,4770,46452,53894,56616,221286,18973,9038,109299,55365,19366,26863,18808,60909,69353,41738,83463,12100,68561,72860,3980,13796,49340,12332,31311,27418,4255,53430,18976,45523,510,14224,30477,26581,4530,3651,101663,139840,22709,150861,31996,63923,120623,262522,3076,10528,2929,14672,130238,18087,9816,121894,100308,25085,55111,14565,18952,53293,2042,369988,23674,61789,133529,28783,108293,35477,47119,36448,71049,40015,33055,78598,198442,1833,159937,40654,77444,189245,113153,8621,18599,38553,35223,166072,2375,11659,21786,89523,6032,12116,63046,159398,18454,3678,32521,47626,11411,103527,38896,42946,15696,26370,10185,8413,37080,165583,4331,63555,14907,72220,50056,6623,62236,36565,49783,10049,17503,100581,55951,146244,24724,9626,17969,25524,109300,173965,99994,101056,46459,43647,53737,277968,8347,123521,74858,33829,44762,77574,877,81377,222525,123532,30602,43881,53145,2973,16284,81940,61281,127044,63620,9875,14756,114829,19032,9202,52759,119141,23928,120551,19607,3599,33401,76821,73233,117430,39968,36539,7071,5446,121735,194059,15206,45283,6706,15603,65615,1207,165723,92275,34773,104447,8396,32353,205240,164323,13600,60555,79205,25532,22907,33410,57480,107111,69630,32137,47832,70913,33161,20321,2371,117348,10714,86246,1625,11763,17900,268,78457,99175,97940,101092,86660,32221,14041,128504,125080,53744,124263,31017,13897,403,31859,21964,5633,111630,5547,77329,17961,18241,84995,25984,12983,67491,62168,47262,5241,297,51191,7351,8967,147212,82060,16821,782,11033,82431,62957,5026,43459,77963,203477,53528,6247,191852,87774,74164,215654,13467,1522,219964,28589,244104,16242,117821,67725,72570,156792,17186,15979,26990,44128,193014,35276,57125,16212,166451,68017,6905,77608,16364,53777,75921,76426,37975,26203,269296,64099,84122,12077,38533,830,4407,20139,963,43028,38902,42911,37503,83343,85045,16979,1165,60835,137387,58380,86990,110066,134540,56331,193845,81238,17922,163093,38744,110641,12502,56404,34862,26865,125964,12965,111648,25547,7771,27196,136980,9555,29551,107158,57885,18831,37705,35505,101742,13970,102109,62548,124657,23328,11124,89592,146376,248050,6241,22033,18337,80685,29898,11908,216623,67721,106162,146610,21377,15085,91552,42041,62560,122532,125336,102365,121537,142559,29693,223919,11515,110495,18776,22494,5895,185059,103592,229351,51220,100102,37027,257855,29359,54123,36066,106493,12244,79258,32002,432,56205,94836,90182,6726,14762,29391,48938,26864,38083,60364,3310,60192,14766,205567,57504,110760,22649,24666,46333,21517,3430,13135,28873,27052,158809,11597,20529,6695,23138,22960,37137,45574,6545,305877,43423,26153,24769,59844,14501,10430,134352,56169,13213,103432,49523,35181,13435,12408,129475,64620,230854,77390,51990,15653,83248,33466,44571,117828,51481,2187,10559,68019,18021,54895,48247,18354,33737,4554,108595,37288,39767,116707,9175,3726,108877,21616,83684,49862,1938,8543,276466,20134,108498,48770,102254,31914,131520,185291,100559,51890,209,19526,76471,50544,71814,99351,8172,198526,28816,20419,9109,98389,136777,76479,75596,30635,165417,48216,120220,25955,211071,39314,24308,32164,2559,146280,43403,9233,17947,90585,1786,86920,125662,2457,64741,32152,32918,122882,78538,44001,31723,56426,23375,103172,88177,145697,52506,49319,68016,31664,41488,18486,110400,7030,28241,986,109199,19900,42147,56864,65287,49183,7858,24e3,30453,840,16673,25907,68916,89927,6309,158335,36407,199737,130464,13137,59603,201778,195292,21015,42466,179062,172561,89492,11075,180407,31868,72493,20998,60217,9865,19530,39274,130266,54539,21623,12535,13505,40641,73375,4087,85633,2153,3117,70680,55788,92096,47509,98493,37490,271936,151475,3032,16171,96642,34106,78425,125761,19591,3366,19316,54508,24183,50786,194248,91528,33253,34622,108355,41741,705,3814,3883,108929,13203,67831,10142,59754,68208,29128,84820,56880,38794,24972,48571,40821,40476,18137,164254,24064,236309,79181,11282,395,39169,2013,51587,28551,9645,701,109513,115899,113566,12762,62045,58322,103726,41343,40866,244102,143816,2490,70346,40973,52618,15412,30720,104315,38917,42027,93676,17513,107418,20706,123890,13399,97727,24044,87962,65606,44250,98044,65276,74790,101473,19350,91570,1326,87790,172042,7577,100813,86896,85891,41512,108130,27794,14875,71431,12835,156250,58135,3759,22476,42176,115873,34686,56523,73643,108505,51491,20838,12721,32863,45700,29496,13700,34294,55360,29206,155942,123812,7706,163234,203,132720,49358,144431,8130,175788,35818,3270,76832,25710,54095,97274,28779,94621,74396,19092,128242,58067,20885,14670,93255,15107,63291,23654,126900,129421,59294,262659,9798,3251,67344,28600,44629,50672,29072,26999,31526,23183,49175,165843,175455,17282,175411,32022,45989,30298,90690,78118,83156,23749,35636,31317,7069,80381,94561,133756,14960,97404,6138,41065,78041,32843,16601,34123,9559,146529,123377,96395,54441,42012,84257,123541,10745,22139,106459,11720,150883,172651,154996,110538,4728,53447,25704,2009,71152,119354,21166,66604,1429,216162,8637,122250,63520,27180,29172,36124,276428,107787,77184,4680,14952,104903,24418,14793,51561,52931,8371,26342,48526,7118,92066,67280,40653,8847,34597,105438,14198,50163,61188,146286,50315,41205,170829,161496,585,197359,95056,1687,365794,91349,48507,5804,49263,5146,104902,96365,117343,132222,46084,96919,16875,8073,262381,79982,52663,13928,16056,153908,15145,109256,132308,18763,24904,167644,13618,40750,18686,147124,114709,150038,52849,2938,12568,48617,8778,5459,44202,44591,74914,17183,248689,13878,7822,80060,23116,194037,18487,2067,7798,43077,33678,244028,31320,74273,2794,19466,8218,36280,183997,48124,19416,29656,19280,98734,7715,18311,30701,133602,150307,126956,7378,2933,79903,13178,12593,86571,26604,92446,13574,44205,65699,427599,21118,8245,14407,27877,47936,33542,7916,26460,117762,21596,37818,2249,127359,209394,60044,47677,308089,36791,154971,31417,6998,150042,174360,12255,43009,29335,48739,3912,101398,53340,2580,146939,151295,45360,125275,15273,45383,27456,48761,23314,8750,60801,85823,104759,27894,123685,66968,39480,26917,55290,83305,2696,98390,57569,145853,340733,4919,20024,52268,30884,7413,203685,70989,112855,4129,50536,349518,68205,332641,159581,135361,236026,37563,176404,64899,6578,122033,63871,1850,85234,82089,66124,74145,121098,107351,12687,36881,117334,13136,14698,85933,93866,18047,32620,310,15094,46e3,88451,23632,36645,27940,87618,80520,58892,20976,27702,140090,96075,67841,103292,238964,87778,107338,17019,83427,67522,7302,8261,47570,116787,8730,80484,61772,174422,56005,131193,52875,14588,28471,59817,9586,15720,158155,51307,109734,15196,11025,59331,3884,52626,102602,84797,25158,27314,4437,20488,76214,189248,35023,114952,157376,2827,62439,102878,129749,36405,10329,109339,108633,36662,1254,13267,5470,87105,58004,15397,10434,159667,21864,52022,179464,3013,32147,31496,116832,18494,105502,129227,107267,50033,13481,9954,24267,22141,16257,116154,36185,950,115685,11305,176708,2048,178671,112573,287867,162328,497663,95170,50979,193861,50987,30368,136257,31830,46549,15119,169876,23788,17462,249887,57377,1949,35448,14791,43769,210091,3783,34612,282103,88380,245190,5457,20491,98908,11402,86899,117916,16028,162584,60644,320177,156096,31065,55876,22e3,77655,9992,23397,13757,317623,63978,215255,2443,17648,93231,27388,104529,93807,55505,140477,12046,112040,70887,40152,94365,112353,25063,114679,266061,71248,119555,15589,2244,617,14129,211431,70110,100652,7777,4383,85911,89221,21010,120615,58357,86405,37554,41647,18,15143,69662,60491,14714,186134,148344,42347,5410,168175,44535,42449,343894,129417,99682,20659,27272,140483,63455,222159,17536,13722,42637,62324,11976,114691,148109,2283,32057,182393,4295,147364,33705,2075,44303,30274,28331,63740,69740,29148,10346,44862,33716,73937,153333,12930,38784,247159,2515,41053,20256,83368,256189,54639,115240,5096,24661,175419,153552,26516,141,138176,63885,34115,47222,55709,2765,28479,38875,236608,12229,22921,77291,54426,45388,2860,57787,114579,295139,105782,17826,71066,19119,54364,69385,16568,12323,28057,33346,34919,124763,155533,101386,31644,8627,49001,303600,29868,63213,9103,77280,71333,9696,138789,37059,24823,5057,21352,32368,114208,56803,19424,10445,58514,8661,209508,26187,171838,10460,63454,14016,122504,41328,21329,46618,32493,38225,7855,31763,7945,29876,8734,6438,24205,97490,139977,130740,47323,33195,85390,57194,13813,60600,21313,96251,7699,27584,170521,139271,1363,4402,336738,129223,84983,69150,13147,3590,163929,207225,155260,55916,20288,4503,8398,98490,11773,27512,37113,84976,86558,28365,11756,116005,182148,13733,115313,47644,67208,85069,9347,14995,226141,14704,101835,41159,35314,13113,63526,214039,29978,50446,83339,17440,129441,72522,118641,97816,24907,73844,15717,118884,167255,96509,162793,30847,36849,51297,78974,77793,10427,1873,2972,9999,35074,28190,64297,146836,46298,60038,163007,108919,61219,2403,75022,127339,4233,110389,69022,9833,128097,88016,79390,222936,22570,94657,28462,56956,38803,81536,30474,152794,19566,16481,147408,74574,81895,20731,1918,1366,76367,187321,54494,24366,21690,61696,33283,107477,77499,31112,414383,74362,18463,218441,120929,59848,258629,201924,69269,454,19989,13054,59894,3623,58908,20681,35723,78523,102680,38988,184112,108087,50944,132704,52966,21699,18860,96349,201411,82697,85395,95658,5093,6427,177894,44191,32755,26961,155739,6249,31310,81030,26574,84311,120155,86730,113535,7424,48888,13516,45747,98098,20077,183995,81945,43210,26704,40420,75831,45648,11180,6855,57927,65528,124096,34851,2598,156633,107572,127352,38169,123845,60142,62722,105584,232364,23211,68120,1601,22169,89299,747,258039,80572,7258,152249,11862,101204,8834,121434,33761,19175,133142,46343,40178,48723,3589,41977,30210,38868,62257,10087,82658,87827,90646,16415,47552,351723,28298,72225,91146,272760,1701,11295,1652,109651,300747,51863,198800,29446,11794,32345,37538,22356,33102,37590,113544,37970,11478,179743,25454,103417,59905,221970,105196,145604,7817,164809,102360,16974,75840,255333,56902,6659,1954,645,59400,67769,7689,18675,5215,13793,20536,27852,3387,29523,259718,16860,94625,43143,29245,15848,233581,22685,63631,78557,22836,133302,84513,1348,51826,47129,98836,58284,1830,1749,94642,10933,6145,12506,10975,13879,103781,144434,10268,28409,32346,52968,121567,107374,77268,23686,35097,10501,155275,15303,47136,21102,168741,55332,90385,15996,84817,681,137803,25054,142275,6163,38175,8056,124296,240642,65621,4934,178205,16101,62803,60964,18230,100622,76465,44689,14545,9543,47514,16852,93380,28048,12047,107106,37575,101485,77047,57326,34819,96137,76916,6469,46264,115983,75768,87668,69942,13027,165,8373,114231,26434,52844,42799,182044,23580,146254,38081,43236,33883,146220,382894,14606,46035,36481,166621,35417,95382,2957,59384,60428,36358,66343,75378,22267,22950,83528,17577,56474,25285,4619,179691,75355,95836,53295,34588,171410,4487,14679,84208,44015,18562,109133,54101,11531,86052,174479,303157,28095,9953,35642,14564,39802,16145,77606,117406,53038,121117,53624,22062,1212,7632,127157,237292,189087,10478,127345,102515,181997,86752,87623,10966,121602,68783,68681,83042,114380,138349,191305,67176,50085,39016,1427,42384,1412,67118,122616,72389,25260,2237,13576,137346,19938,20304,2191,68759,5373,61364,238507,75814,23931,69565,38993,131741,38364,12528,87762,5679,129853,5310,186831,32653,90338,260176,389531,108118,26843,43985,50175,30563,25106,56965,18130,140428,4542,165503,117991,24219,229605,1819,129663,1240,3797,76093,18398,71339,51919,93043,27175,47060,216257,6483,35051,1217,16512,80798,129064,13225,69339,8548,237079,72298,2575,34280,51379,117910,55671,53345,247552,29486,39328,140821,34681,57045,60177,5004,90269,78522,2479,322607,48474,61296,13057,31558,4678,59271,6699,27044,31988,35944,12503,83480,4389,136508,3781,114121,70279,4488,155829,42214,2898,68191,75695,305850,45041,74344,106509,30087,17429,93292,12477,290,23080,114802,35714,18751,26554,105424,17775,2144,2412,100610,65192,113975,52975,180272,135050,129815,76238,106483,21440,63186,4260,46189,9711,28249,4169,23429,23390,8324,141585,63809,67668,38457,38063,39226,59972,1189,203916,62368,14403,16949,61767,85801,1739,40147,35049,76757,33124,62102,15780,103593,103009,53484,22952,67973,114645,6566,5245,50462,7601,8288,3513,194571,80276,1908,54592,5124,58571,2513,6800,273997,193904,1119,17991,117245,2508,129156,82366,26278,71465,63341,56943,39662,106116,94966,156875,9736,2204,122308,94418,27134,1280,24539,49022,45314,3764,50904,46424,30699,28087,293839,9400,33646,40165,822,147499,50263,116179,29085,11863,31314,5578,17797,5104,12454,1604,15342,219206,10232,67800,94261,25872,13565,90339,78971,75377,26649,41184,47695,11514,35369,20767,14227,41953,309396,148270,147938,33074,14453,27499,109019,39018,25738,240196,158931,52820,8612,95853,21524,137010,84901,70869,70021,116794,48404,38771,6732,1070,70990,187297,49140,5238,576,3564,253975,16027,16483,2811,37775,19034,25259,4053,2e3,70083,95774,19713,33431,92703,91314,42381,288770,48194,95985,3991,77418,13406,241328,245086,56533,35275,62725,9246,51924,70181,95331,16163,31410,79016,39312,120878,119371,275987,80124,27712,9186,220,23598,146167,85209,68238,282190,57048,31273,30555,80913,17594,75779,59160,135002,101219,189377,29225,96735,60126,62522,104e3,27620,86814,17240,147533,11001,5425,43682,410,49460,87270,69480,46315,59448,1816,76201,9431,11788,87960,29063,65539,47347,11678,33846,7008,196704,9895,6753,8633,120892,59970,572824,115934,6646,202559,892,48351,37611,251282,57823,67263,57750,26527,34485,90747,7685,88370,6144,64182,1709,41969,21458,62327,181657,49247,225330,122600,114574,107124,85361,111833,63243,71420,15655,191178,72430,18063,51425,54002,12364,53225,86557,18193,97580,41232,138398,67821,128724,8944,233212,101353,52099,42127,14006,120107,32789,32132,3498,18123,33758,56058,5779,128760,59888,98869,18445,84702,51911,13234,218379,20093,39031,8074,70195,20708,23462,24355,131384,60189,26390,10403,41060,7140,10781,49410,42261,87202,82566,41663,43105,60276,2768,5733,74176,28329,2297,145430,131632,83615,122915,105441,655,224102,5284,136426,67763,16294,188511,32538,61049,27893,3394,13951,159099,28542,17930,145360,9492,190122,32285,78855,26440,13570,58648,73908,4239,124561,2444,74172,53131,11468,10794,73566,11623,35343,64710,30481,4163,10328,38309,29901,10538,154377,76132,92405,24839,11679,3465,13449,11637,7824,2337,57754,1260,14458,41118,19878,38661,13416,159180,37074,163164,54137,28627,52134,184900,8520,40385,29546,30502,22386,66527,107458,6850,24022,47983,30603,35083,8934,304066,39500,9,28261,33026,77251,9374,44833,116312,34990,29236,63563,125639,135405,165398,159055,55690,88141,69643,236964,31983,25572,20436,36746,60896,31850,16179,11828,5888,3043,66368,9750,31167,7915,53111,36430,1333,64344,93659,20061,60596,180191,51630,6792,30244,43509,101058,22409,420,44210,109783,43223,27030,72477,72831,32679,29235,7675,47556,12258,39907,149412,84926,118247,24692,71717,105038,86009,45941,41189,89453,29856,52543,30627,226798,67303,59230,67415,34408,1367,99685,16867,128419,52147,4111,125381,117881,16173,44093,102224,31575,23234,24870,83790,127407,239098,3200,994,1255,100903,242275,117266,55116,38205,16140,29662,11307,40414,208793,123355,56470,4862,75600,30119,58218,70828,24075,26974,7802,192353,4851,5475,78720,66596,3409,28573,64396,30381,30690,59859,88256,5406,99945,103064,34463,37727,24238,86643,60088,4057,23741,5967,162904,38240,28356,93858,25510,122879,6897,3278,7057,11971,4400,35461,211413,21395,59615,39471,87233,55795,128426,3051,22470,41950,14705,3974,180108,80476,78442,204996,91987,15634,67610,139015,142373,35611,51134,10387,4353,153456,57749,181039,14183,68447,151532,21107,36452,20551,3186,46247,46383,129666,88736,140662,146243,2066,8360,7978,64818,106963,17896,47801,10723,114821,223295,74192,3293,3393,16987,74064,11277,91622,4270,29828,27951,387869,103235,1374,61988,120083,477,145892,128378,11779,211263,61354,18221,17869,46530,83061,108538,157981,90608,67199,95080,49064,195814,12302,66307,10348,231346,160732,112859,63633,146558,21271,31037,198802,47622,12862,95710,3910,77850,73961,85585,34752,61e3,4082,24595,103679,71107,8208,79568,150019,16615,24961,139857,32664,197366,4559,54735,32696,4126,162019,75698,13916,70108,159638,19834,9349,24675,175560,49643,18206,52459,27992,10809,88865,401975,133172,29e3,34558,30915,3658,25834,42430,36562,125265,18182,10155,40149,97082,208980,19575,60853,90529,66545,9600,789,46420,2317,88593,55595,98980,115302,5742,169155,1073,177901,3472,11189,63711,78643,65472,50459,127979,93,42202,67053,21720,157650,11145,141378,42033,22824,85705,79114,35584,15974,1510,54172,28562,12451,104226,19190,97151,73024,20948,5151,81741,21499,29006,84183,198074,54003,45120,170125,26240,35177,28389,64863,79974,60778,176915,232183,45342,2038,80253,41564,40703,32689,5430,100689,5366,23007,134279,14266,26712,73993,24934,64242,52113,102887,61801,46415,201049,54251,62133,122757,164883,30815,139966,2319,30842,766,13362,10287,134518,86111,81665,82440,28333,43019,18963,8804,161944,23439,102144,101145,80029,39052,248708,30350,117340,11878,128467,974,138625,63961,5237,74778,61834,67040,43814,13690,65947,33809,232476,115258,181745,28824,94013,9510,10246,93722,81976,7217,114383,3493,16014,69045,72692,12145,80981,9507,6692,1620,60820,330444,35474,33962,4797,7053,295463,46445,27026,12491,77988,49524,35675,90947,29114,166705,101385,133782,32704,6186,84595,176031,185623,45966,151302,63069,1699,107491,947,15458,74452,196212,6046,10498,12163,10239,35191,243951,9277,9090,29539,54460,22820,26514,112549,60372,51753,48756,21812,70861,260326,41,44222,10441,16961,48148,138771,216194,5914,52153,53400,212036,56519,26245,10117,45888,15294,138019,90913,26368,43842,42111,23348,6082,194845,161089,156206,51546,11647,30759,302912,262094,8635,78876,26535,35283,54183,31183,85484,147873,12989,5197,6356,72894,65347,20150,27370,73787,1493,45918,12366,190217,20724,13858,10981,67449,81213,7553,14115,72242,271517,11842,48310,88743,143726,22177,3290,243231,58452,62937,12592,1654,40066,33477,13751,9921,128442,15868,7106,75236,83773,10775,36938,10482,170465,17368,17469,161508,32752,98340,800,19824,264456,3901,87319,2867,26782,9630,113102,185815,24197,44584,86366,40224,3636,140916,31731,267731,9567,53678,72984,29389,27963,17106,50282,284911,60170,8322,12608,23374,89652,5268,39044,229766,8869,151350,31436,177342,12269,183212,120418,116270,2843,78888,69192,7865,184099,1086,129897,18383,70508,20242,18508,229924,124569,35749,50589,55626,9884,83115,40971,30671,18135,14452,38861,17844,201826,5549,26413,17189,13561,38539,10679,143331,3314,36785,171194,49685,187713,67506,4618,104039,17060,195080,50648,33159,19238,67559,134840,28599,157523,17130,38064,117398,94355,31918,13575,34538,40326,13997,3494,348283,62481,26862,3603,104426,244363,153709,112487,304612,199674,41239,35545,54869,293005,28223,26277,26899,4533,18518,15492,38587,80488,70485,160395,263,60162,11382,222152,4696,250751,51921,182609,10707,48463,46243,1227,49111,111564,46502,33342,56846,68541,63559,858,139927,16654,229375,76759,26478,33205,95828,23399,92945,2637,35630,28470,143992,50214,14174,21456,166191,65665,1711,21594,78019,97599,111701,36,147151,110246,189022,43021,30397,40757,131935,42065,73335,48039,26596,28984,15102,2361,7421,202167,69744,43766,52826,3642,83304,33873,75140,63169,192389,36551,92748,13039,123959,233220,21738,84447,77230,20228,187852,19095,25799,92136,108774,29237,53947,2299,118106,2687,8830,42331,202924,33667,2023,73763,30704,19363,19779,16737,35629,48081,24068,101013,162338,291912,13749,24745,328289,167679,70086,48299,23306,16732,17801,43322,54589,3586,63653,43624,53474,925,109177,251316,43805,13082,19511,86565,142182,92461,17117,101033,103319,64589,4022,4351,235897,5352,82705,107142,46391,156084,5860,61365,10558,13045,7717,18357,33922,12590,33065,6928,46993,783,46937,67846,8952,26295,6107,119656,18799,17458,50747,4229,179559,112727,118080,20683,41464,125468,51560,49749,44231,7359,35339,62988,136487,67015,5208,29150,24956,105186,48858,6143,18097,6972,16404,73489,58742,97196,36357,164616,5834,32267,13746,147733,15113,132091,34127,106298,39729,106426,22294,9780,15602,36213,71502,42808,66802,599,60755,5851,39120,67363,108623,126368,72770,91263,32486,30596,151717,7951,52002,43103,11768,68942,40901,39344,24037,127500,116890,48403,16926,86750,17745,48648,159545,34460,58419,5634,114317,67865,31462,23352,24010,98185,125708,69686,68337,13610,26271,70691,2980,4768,27225,102402,75453,28106,8104,6931,1176,6274,6475,112635,22498,6176,238686,26832,28893,90319,14441,15682,15087,39517,45270,109134,104440,45965,47645,81772,7876,52683,87720,12898,4505,185665,2769,113401,15664,57592,105229,137381,97059,119268,6876,43309,33886,128363,35476,144249,67013,143587,83367,25703,91436,59347,53236,2289,16519,19844,46309,58558,99834,23313,218816,231303,36388,51333,183535,109792,139277,54306,90139,18235,8275,32710,37677,82464,86025,92204,88842,117723,37570,128723,234242,76350,73795,34896,148247,58424,11105,11744,45746,63372,17118,49772,199520,81902,38004,22911,33752,3125,1995,53792,4689,26909,108150,146062,69674,41811,161444,84855,8999,28561,16731,93937,3189,21967,24890,22943,1356,145300,51569,28802,517,118679,31703,40607,48098,108854,25003,10233,73969,177495,5248,24516,215347,146192,48712,60626,69188,40735,5866,586,101541,6509,47590,52129,5969,222045,110933,25733,24223,65339,62812,2414,155418,35819,16022,78423,43138,20995,128255,240673,46745,236093,72176,57085,97841,61248,107,36068,193177,105427,55726,215229,20446,47228,100420,87091,14429,121708,23605,21157,187721,21880,2997,203976,99166,95068,25877,7724,98925,83401,4829,13182,18229,13718,239662,38653,116505,153497,30589,89029,38962,181302,43853,78872,180301,4786,248240,7401,106136,112590,77745,19731,60880,77789,125748,135487,5975,48627,34084,12419,215770,47557,254582,10364,106495,21856,67539,88981,38805,21428,48732,42316,12149,16078,52808,25327,51322,33850,51147,12253,122354,46077,56483,254553,115417,81834,150991,94662,86668,7381,12841,100650,18218,15741,22372,68294,50705,15535,84660,61887,22553,72299,31361,24824,17743,46820,64288,31582,77006,111674,116384,30760,80920,86149,77192,51979,79691,60342,122805,103800,240873,160744,233114,78962,54920,8608,3484,316104,72548,24337,5088,230040,21926,10172,36838,26,86221,83458,102176,12062,17571,41929,41170,28428,68239,41750,103930,2634,18313,53019,34825,97837,63115,24606,73157,152474,14715,91439,37033,109806,140259,30668,174760,380,135597,95673,136073,65073,134249,13829,17279,122305,4420,46444,10237,64848,203623,70728,10349,182885,65075,24519,25783,40318,34139,22222,63394,55266,102764,41422,20126,65100,90408,53640,35128,48932,11192,38935,96839,34782,39492,19396,41332,6250,5511,19492,51304,25936,104466,54099,73771,86115,5080,7669,30891,111700,13931,25276,72289,135447,14820,258641,25265,31005,281179,75286,393,95359,14623,13584,6680,101227,80173,44933,76666,54542,13244,39348,458,25379,109451,134348,81143,6959,65554,12027,51311,8716,57589,140731,28467,23316,17272,30458,25980,55229,77197,83798,28302,114784,7428,34548,26241,14712,39336,103304,18928,54080,12870,334,87722,15208,16895,142098,114262,39820,83913,57817,28682,7721,14900,108672,11250,62246,42849,415188,1724,26555,24549,25505,26443,107450,145899,61035,43528,6901,60726,65906,267741,21338,147590,42079,18924,73017,135236,15393,5206,4026,84185,1531,5988,113890,82647,303391,7386,69844,71611,189865,76523,31877,13315,19314,198575,32821,1928,67641,25913,104475,103489,3297,70391,18406,15446,113347,19295,93790,27856,1792,167471,116449,8541,4408,41757,63233,25765,86680,64501,27034,24816,34975,6079,4486,49693,36229,16917,21581,62426,27862,11612,54284,35702,194034,355,24277,48262,87411,70504,310164,118018,12516,47559,43502,57433,107139,9290,66533,80863,14634,34312,91725,28606,21342,67241,72355,43244,375789,37402,174015,105070,8342,44167,67494,1890,16365,11723,271002,1865,47918,8350,45564,27742,25110,125803,8553,49504,81925,62211,4534,15491,19011,80373,206920,667,102405,128623,245524,5553,113309,192739,65766,19567,22832,261958,29679,21293,71134,20962,105123,24721,860,21752,33448,18372,157167,94822,35770,173224,232737,75729,28937,46828,28062,25453,5207,140366,36665,30652,6169,67920,150458,92040,23186,184604,92330,20891,176492,49427,27828,38305,42495,143982,49560,25503,90043,29747,65328,47830,12932,11068,77721,9003,25213,94205,140426,46090,89945,138173,192691,33329,112232,129905,35709,27514,1841,19957,31411,127476,53572,17497,173549,55063,175135,19841,69314,5192,237921,117660,150697,4060,273045,50414,98940,65348,153665,164423,58804,156695,48994,213928,86036,28608,8355,39574,34540,16927,135680,18374,151587,10830,53805,16878,16623,4282,48030,8537,14986,46102,13062,72897,72,33050,108227,39451,45935,651,113320,40535,95176,57450,48843,5003,19019,10407,211163,3848,1068,4988,32091,30095,41692,15099,43602,107434,50744,7627,171349,16313,150832,352665,207750,33937,38256,51091,156e3,87889,90663,84175,24908,114900,50365,31494,83829,5398,169342,47521,54818,18935,8356,43094,41212,174536,10082,92550,6678,60614,23355,69721,14796,34149,128830,58187,3179,208,40325,28399,225029,401412,51150,31580,207268,6657,10993,69818,64282,289845,23308,12961,38447,6681,52944,31855,2572,47646,120728,179148,37240,45196,218274,4816,3695,21961,50084,35209,18073,51452,27004,6100,33941,1377,84831,171214,85,141510,9078,99227,32610,6417,11718,49868,65579,87902,73018,49062,46280,61742,21512,40862,107733,15941,29168,157765,144919,14487,5767,158014,140070,7241,573,71584,16921,223566,40331,179473,35081,47926,140885,41508,52104,59180,42310,32811,29048,123517,102413,80208,10104,14746,12649,153641,126022,37965,113017,4171,83,142592,2809,6362,50416,71323,116894,260776,16204,1524,5760,30351,12658,20703,54403,36083,45408,74772,4946,14485,50759,111222,10890,2195,167147,92962,130534,16283,177256,35016,15472,210156,151187,73922,117691,43250,52051,37392,24811,24358,30830,5775,818,21969,1476,127322,151783,58392,31021,106913,65215,89407,90802,28531,11690,20234,95249,44602,37256,18707,11928,5161,4410,26571,51903,49768,22008,25252,65780,209499,68769,203726,13249,137363,48845,86823,6658,5674,31881,1083,1823,108676,34518,166752,13791,14287,91576,91429,8665,11529,26401,16191,91972,30964,5254,28486,54697,79613,66520,18447,22870,45203,194466,22822,51703,12278,76716,44595,73455,33546,12235,144843,36154,51247,11116,33040,3180,225753,60864,1972,28469,12891,28879,10338,144157,56294,353058,38302,41447,87532,110616,27065,168438,6557,1213,50804,144643,24817,2390,136531,38174,247513,16190,4059,122791,131994,137430,39506,57650,16305,5188,54309,106128,20628,88071,67394,395446,250285,66176,91254,1399,114196,43915,60230,44853,27206,106353,43013,18733,345105,226453,51202,16607,57106,117175,35492,10476,89598,127439,15187,39624,13688,61570,10615,31111,59370,6238,175252,32143,224492,41388,95408,34384,148238,78307,38959,9340,160091,61443,15737,11216,41244,170,38299,102443,113097,26382,14027,33707,3957,76300,66160,19431,18900,6952,1717,108656,82206,188021,257335,27295,43999,41210,31777,46956,57457,12657,11489,15697,48060,204748,53583,82422,284790,30503,137341,8120,19615,220311,15991,10217,63424,9808,67431,70976,98221,4491,15177,28535,144789,751,13230,2394,1504,33977,132104,30316,22230,931,97193,185240,24826,22687,174322,15307,22988,1390,188745,180325,29580,59068,74903,18994,29195,79,15436,7622,38462,11566,138710,44828,45774,37768,99236,68137,84083,19282,22698,17134,74807,126662,173497,46248,16938,119735,3212,28292,213652,49013,9975,32180,45660,86250,4801,68788,95490,77482,113751,11994,44624,94452,46839,128497,100316,5798,58588,73184,202987,65417,37790,88524,1606,43156,97964,105717,34947,11203,100060,37742,130074,93653,107799,94311,196106,41347,8035,10780,16390,27883,118236,167395,1979,25006,19375,31628,18916,144723,78502,114047,103107,86492,107686,5844,20934,206963,23556,22591,16562,146333,20167,10471,117434,33085,2863,9740,36669,41849,37271,22790,18209,28979,8231,12952,54408,21731,25130,45208,55748,138120,75826,414,29593,9925,292865,25999,683,123149,7036,92159,86055,61827,103680,23176,54918,58466,57578,13305,5709,86479,16697,31064,17660,200919,10770,49793,33423,32370,52047,16488,62555,6459,8426,83493,7763,59725,82812,18628,67760,79405,68557,9612,7673,28102,56517,69620,171797,32458,29541,15870,81109,32080,207644,71495,21202,11039,91036,61230,2810,130800,32260,4613,60590,37112,75214,33979,126402,155062,30642,63875,12810,194463,82799,47664,16725,36685,43367,61099,449,172150,102867,21691,301838,36745,7130,18671,57316,34852,38034,54182,35578,65900,99486,19771,3456,2658,16914,99866,28390,28109,8262,21147,34353,20006,4228,137085,1675,203023,283196,198286,214375,163329,290603,152574,40471,83506,30068,14730,23177,131539,34759,27668,32178,71896,104799,116305,85430,119262,42860,25160,8911,23428,49437,105322,6519,16203,6349,74711,1230,38045,8540,75165,44736,25909,51026,317034,4984,32281,91312,27060,44431,17817,45363,155937,239085,35697,59784,91993,29531,126740,213757,76560,167776,285273,24262,8237,65030,41160,74437,48804,118916,13159,37842,1031,75349,1478,11655,108777,23435,277425,101734,67469,70231,124711,43532,28514,65526,54956,1e3,21882,17728,25302,40952,52214,149632,1999,2111,3259,63362,89961,220561,39777,26335,9063,10572,12416,34551,34623,38604,24723,5947,15588,69927,66252,119177,69173,46629,28714,70715,212408,20521,406913,74380,11716,50659,50862,37009,88460,130101,7210,53853,538,65120,151950,55806,163748,52837,13153,21100,16674,64536,6091,138201,44837,58547,3723,163,2177,32288,85454,34033,8497,14282,25742,10535,10741,79559,117493,243787,49337,100718,79495,40139,42956,7551,55433,15421,31509,23034,45081,547,61176,53434,328001,8470,36263,30145,4519,74173,53935,11845,73774,60211,78025,3,4102,73782,109293,315332,48412,26683,13714,6865,20128,18490,104141,325,39470,171970,115860,15707,7268,73301,74336,31370,2368,111827,107757,136231,142844,97138,96638,84053,38691,23801,1588,10573,122098,77039,240,186135,146101,11996,18143,112963,46171,155836,348769,47795,121213,116266,132515,3344,144804,31286,99187,255838,129694,35894,48779,55235,148582,71967,65282,15174,13920,47080,6147,108242,157593,125025,7136,1286,28957,127956,28402,98813,20805,7532,109417,40610,5041,32958,15142,18408,108596,33543,50517,27748,80114,233434,91447,487,37094,100048,30541,43477,10639,89862,155868,37667,8726,60684,237903,73408,99589,12190,38739,97348,3914,13594,2680,149016,13907,30171,28343,23530,115225,61104,35821,147679,14337,4297,244282,24085,326976,56428,7851,21303,131620,71446,83253,68692,111870,5224,15813,38197,49026,45057,13660,3306,76345,40671,27905,91072,996,68527,62085,91351,122634,55109,168209,2024,27560,112707,17352,8306,167115,169921,166958,5031,46020,11844,67284,19130,76185,6920,32849,5450,14610,22451,21002,17392,31872,66682,84796,13709,40210,59898,12029,8719,53564,21462,91884,21647,88379,194428,12754,37797,132826,160016,22567,54383,53186,77611,31107,8339,4694,19185,90355,23597,17222,140675,28442,23668,55977,9128,61555,28774,155229,17658,9390,24379,69357,15752,127381,239631,62460,93181,55913,45133,140155,18676,25249,33164,29581,82837,67223,22362,29975,7317,52813,1943,29613,20012,207130,49617,49651,5636,15334,36313,29226,28084,95247,72072,19e3,224932,15811,114,32127,38097,37508,88507,37225,27359,91626,12193,69279,20608,11055,88156,92808,2152,57259,55275,72789,24475,104414,1708,9882,3818,48661,66897,1631,34806,227930,85815,87753,18321,250664,72733,25107,206797,50891,8082,196411,92596,96764,152823,65514,22819,387277,62176,51225,40329,15563,189,3659,73670,64357,51793,275136,33482,86653,74615,67058,11318,125720,15388,22388,8267,1730,102663,170910,40784,7144,85373,13040,7088,94309,583,44224,140424,77439,18496,164026,36578,4722,9151,5824,63365,26510,35199,40500,79277,32495,44614,35233,9566,203293,152144,7097,2330,183480,98629,13423,330887,44130,68600,30939,97829,31012,345465,56747,94879,4939,160027,149761,99423,46099,32251,15332,8761,96094,128555,5763,235318,222223,55729,30241,55420,201746,3987,81382,8259,49325,23287,7719,24633,251100,92311,18591,110533,64759,170260,393860,7175,21144,132887,3593,75346,101277,91109,16387,259187,11627,57459,173829,44694,55780,49797,89192,120443,62622,3904,14814,23887,1027,112258,64955,99800,11132,66353,36202,48624,18158,88481,96882,43059,11040,2455,7077,21651,181159,99126,100434,61388,68186,19161,110468,120052,8819,55324,41494,7014,37689,3618,87729,92615,207943,9823,128657,12587,15857,6379,67628,51216,71775,157617,63244,1503,3864,218754,110864,5769,21492,7243,1192,87921,85529,31512,18537,42698,35350,73510,84474,34301,8991,21013,35034,566,38832,19838,35586,37216,39413,55006,12178,59742,856,84563,6900,25632,17437,49786,30723,13847,70845,4044,7843,23944,235976,55530,48942,6518,20939,73769,192653,52936,95207,23895,132542,142982,22632,87452,48042,54018,178468,10728,26230,23559,363,81269,142012,5718,346258,31456,84333,246476,51018,66692,101804,120570,39962,30373,70593,2864,60541,19425,54209,104092,7201,31545,48018,25865,15442,46257,40443,8328,6451,111782,47527,97754,33046,470,245116,31095,39,91934,87208,73470,36708,36521,12801,70624,36272,8892,79768,12427,55454,103756,5908,52390,62962,22720,141138,94634,41689,128402,126390,6628,106394,35527,134394,82727,254651,194502,148064,89549,3202,28359,957,21954,27906,49840,142747,8307,24206,48978,1186,71728,133038,71474,91306,6333,110959,74600,70387,18983,62609,56057,22970,1147,135850,1321,28834,3578,59715,102227,32827,81415,99952,55636,257598,390,22702,35701,85872,402916,39216,189795,14929,19467,10112,144422,61514,5279,63421,134686,41436,8424,51925,10598,132295,124416,4604,194739,210929,57866,31829,51626,50007,9976,91878,61906,56168,81906,60918,61859,40017,23059,16887,40927,62064,12785,32893,32913,21782,93965,20169,44387,79084,38463,11457,93950,27127,157050,2697,337088,5116,54128,48255,33279,8821,27352,25515,124022,65710,28906,38557,33390,1722,104435,72215,38551,12094,30978,25113,6671,37355,175109,42862,98024,65406,221276,59624,118012,64637,78760,86697,21426,1639,40350,12584,67193,84144,31396,7863,143011,69629,63112,9454,28666,65798,46372,134721,6314,51402,30837,151922,2847,38676,38008,92823,136245,17540,5504,109295,205242,37606,5211,214892,1586,20670,208711,137743,19328,40652,16995,20023,14657,154919,34422,12996,13918,38221,47690,16398,2959,37680,89122,6721,198469,91876,172043,83898,101992,26084,94570,3635,76958,22853,76497,38266,176590,168403,44464,142840,79180,184594,1984,41806,83147,11985,6546,366068,59732,24533,271505,8736,39084,222992,93429,28962,58985,86665,8432,30028,14548,32439,54424,165029,55175,27458,69046,121277,46168,33732,20661,24581,135574,123110,37556,79260,72611,16957,12939,46162,58238,44907,72936,253758,41324,32518,96480,11949,124438,65280,43256,34107,53533,43531,37037,28366,45970,32741,173438,6121,194202,62969,26355,30314,58370,28455,1848,50519,82830,90393,21761,295490,10936,256940,133568,44050,20269,4089,27457,21610,219460,36743,14821,101388,52005,13124,30979,140816,167362,26054,18458,60789,34917,40447,26606,33422,9066,3452,83614,5761,20263,137238,25038,91310,101,52322,74548,42572,38084,214054,186568,31802,17665,30620,141936,37730,14420,4265,187218,49640,188208,51441,55388,96452,66659,40869,42039,60967,221027,19234,178581,29105,96050,9165,196118,157335,3738,40354,117436,2965,34136,59659,15570,50843,230035,31444,71260,43886,18316,5387,38500,168508,17406,32174,8828,103373,143806,90367,3560,18719,122310,16508,26719,2541,105429,6645,37998,73190,10591,235916,49737,87112,233941,53188,32193,79154,4544,52905,126477,7580,63501,57314,3216,31337,6541,103083,60846,49,9756,15481,1355,43840,14319,13743,27486,10222,73114,230718,418644,16706,6674,279748,23058,45273,295831,86306,2743,5535,88773,21829,35253,120938,31153,3169,16839,42847,8751,80974,33942,36867,35514,16485,26474,77775,56877,5391,48346,3882,108713,31403,27804,55248,26235,43821,136104,40118,175507,28034,203908,18732,1788,34030,106427,36958,54359,7251,44936,15356,69139,455,157915,22173,140291,50348,43275,82066,49621,54952,15216,36226,96695,66855,6936,1987,8227,196087,4631,68827,99004,47541,110265,17953,147605,110242,58520,31312,38724,329975,642,3155,34497,75937,6207,73843,6120,17249,51429,117746,3218,910,68961,319671,14938,29555,34700,1649,66673,72268,9655,76800,153087,6941,210168,27130,35398,1780,73242,3135,56689,19556,165307,8765,35967,121458,13333,70453,17350,117253,22265,13340,44265,39869,441,3742,135025,23581,33309,16543,17731,13291,157637,283005,21408,101360,63887,52312,83873,5338,233779,23759,186949,34531,177320,38069,156465,91004,19353,59852,68160,14891,1338,1072,29823,1950,28901,81407,313445,73038,84807,162348,240257,37162,138934,16111,58013,41253,102951,16457,96056,19541,56402,67217,41638,94381,89674,29481,37456,80815,151579,13937,13683,132537,19699,134545,67020,29816,222341,141235,427578,48868,129557,233342,23077,87871,16213,18728,16184,9469,37913,19680,2798,171356,178328,13216,50049,72690,71904,124644,55455,7504,29052,41036,266546,19899,30391,188755,8659,59469,16,104298,112943,53865,76203,138226,68857,139953,14125,107625,119795,173133,4398,50273,48808,54390,16466,122086,31835,67035,50971,48859,7508,46427,66477,73021,84615,39985,83076,46779,201569,53336,36443,60865,168164,143810,51393,25548,169307,32896,24485,38424,21837,29087,275813,51674,6714,64883,46169,187369,55186,76192,12852,12018,62134,31067,118303,16542,12125,10579,4928,26291,43854,7091,10946,253716,109062,39283,17261,113012,258512,47764,125126,32646,55892,80279,201623,149872,3192,385,1208,48750,5376,58738,22335,5427,82416,47811,32435,143086,38930,94128,59975,156037,37977,38224,62485,7698,50405,71027,16462,21559,136153,34131,107506,162069,63703,3101,215029,40407,4178,3774,9187,80019,17880,97926,67579,2600,18405,8351,47924,86638,70820,92206,86453,29610,42241,119200,3198,15466,67813,57863,35454,4779,99518,4649,104641,144269,33730,38073,65864,6838,109456,193298,154007,5623,45741,30846,182578,25573,157224,1543,58575,138703,146140,44971,49356,18275,59064,20300,13122,11848,24453,11973,9797,86843,2919,25530,49210,1130,161220,76788,75373,85604,34926,36014,17777,17255,51533,11676,92226,51845,119859,21525,5936,18507,28050,1140,31418,14857,34207,47859,10750,36382,32079,106909,59426,87757,38393,110042,15965,97104,33757,35344,97993,53979,33651,45407,41884,82515,173089,7177,58371,35365,47543,51927,35587,10670,23544,29306,84233,39976,76076,62097,9007,8668,28119,78281,120790,19835,143020,54968,18670,64959,20649,34469,42570,33001,136570,87796,120044,1106,58700,63951,127623,12805,83057,40212,31773,49850,7361,54336,347524,101314,23751,19569,48791,29174,49369,20467,7465,75842,38281,623,112457,60210,28849,51003,94720,6426,90047,85560,43761,3579,85105,34607,90410,118528,7224,42907,111163,18168,6960,161135,191298,5247,100584,127552,171568,20121,91173,12636,54615,20199,63730,98105,2396,40387,14438,125012,4765,33235,12865,45299,37728,82098,77872,114037,59253,19675,24838,398016,102561,11446,17069,57508,178277,65836,99941,26114,2585,271882,136866,50126,11027,155648,118367,14585,8910,123015,335383,40434,41016,53021,14439,87098,176860,201543,121888,2358,9286,5739,22666,54270,37884,169381,33984,93859,16124,89364,72207,51639,76366,99029,65812,2198,12147,174891,194289,6986,30252,88822,21284,11445,288337,160821,33034,100869,43852,25761,52882,1144,103809,1924,84458,86079,43411,13542,139276,18141,34978,41298,7276,26481,173800,33210,17951,142652,33616,33677,2210,19941,98568,2486,192414,80136,12058,235883,50963,249638,29572,27221,47034,6124,72107,63346,97620,158513,299699,40388,23235,37176,224244,198386,121323,67992,23827,63170,17838,106622,158590,26807,5345,23489,91891,55474,74834,37981,13058,5977,72552,34706,26828,145172,19904,21367,34043,960,77092,91381,4733,47446,7680,41697,5170,16960,14741,46101,13656,473,51842,37433,11103,11551,121951,13191,97536,165932,50397,51628,129028,9069,44885,6590,59195,47045,32940,225472,90345,21833,13303,29407,96615,141951,5198,6028,18395,7181,3861,14966,156358,167182,36529,55253,25942,173153,30959,27261,50691,150176,162201,38467,48462,80602,42163,118482,168,108756,26011,17166,54149,456538,22512,91374,13816,90358,131615,18132,226707,1824,28139,26860,42253,93877,77351,65575,8980,80574,22020,27948,40422,91324,76376,13528,39281,91685,82215,122541,144066,1983,193851,17283,26320,2739,194978,4790,26845,42627,61300,65815,174612,55133,4200,191130,79771,158321,52280,166796,221620,62461,11278,4067,88152,83409,31717,121367,13522,47325,37945,10406,174348,249321,154101,64912,29938,51775,17220,15776,166138,78890,84425,54121,42861,16368,24572,291647,10197,32073,22651,11677,97509,26952,35787,18424,41910,71614,94977,72318,41594,70024,275419,37702,60199,7335,39107,61315,18271,18394,33768,87884,104277,123724,7277,56288,71981,189803,49320,3352,6798,14240,8954,69220,94433,57372,28620,68863,193727,85575,42309,41667,67689,42081,22543,44824,12719,28540,114236,101553,27638,27296,4300,5353,4663,19379,94098,3758,95888,95144,80344,87320,28447,259518,12718,71391,152731,37063,24132,31911,104896,15672,103782,1521,4945,72541,23717,122632,15619,87175,206120,29428,189780,61416,28350,44457,972,1175,47233,198738,95789,41907,21953,97034,59341,22864,53713,16873,32971,20693,20954,31336,21477,16169,38370,16412,9019,3841,24599,21938,17085,6484,81198,76413,5849,72514,12320,65247,276175,37234,59796,52642,16312,57349,198507,94148,46134,18958,125552,1747,18725,151873,14901,5490,68287,29470,3689,64794,40814,26018,25692,54450,2703,88278,124886,173087,174e3,24159,179477,24276,46004,201876,209202,445,52876,31948,30206,157610,39180,18439,44124,50469,5774,96278,222758,200216,50290,45486,20435,46986,46276,140133,142326,15569,13363,47522,92583,2182,7135,16853,22998,30272,4952,63263,35623,39096,53789,44864,20053,110392,124213,4630,16087,28221,127787,25839,77481,44693,13464,113146,6983,27069,55717,50102,4760,7107,26186,66507,59145,36032,104182,71328,29425,64317,50781,47465,94298,69706,74899,22754,120756,25108,93077,56834,73286,39928,16218,41699,176763,7555,70819,50083,26895,23315,26014,16773,123079,41712,5719,31516,90427,158540,85051,183128,40864,27505,55392,9058,45224,96857,30901,136622,96557,56304,120061,11501,151448,5773,89743,7769,86069,2935,18471,41628,10114,33660,110170,49479,26745,92846,33221,26731,18795,87076,8550,2100,29972,120289,3077,72490,33784,2630,208722,50861,63483,79029,6419,39467,14302,45286,64207,9686,67513,44170,1050,77246,59266,17055,53801,7150,11111,42432,4278,94579,362117,36175,42902,41933,39002,98489,22913,74161,84773,57036,17556,162288,74485,178760,93867,73635,128860,50362,261,67455,80001,46080,35662,4368,25247,19230,74393,22588,1822,27682,235324,13798,85998,13194,235067,23514,71669,147632,23191,134748,214683,105101,1518,25489,247114,7380,54842,26922,3971,26361,20844,68642,170517,77339,123255,8963,77818,150998,48466,36806,2732,23261,11741,236162,18243,126216,28690,50546,16385,92760,197383,246558,201295,88255,67588,71687,176076,172653,169058,33906,63747,24835,157621,43338,30050,46152,132741,2770,51371,94835,6614,15112,11749,56936,1250,19027,399017,58036,100215,23388,55815,308768,124152,94803,9521,64186,8971,28,30427,62163,7616,103838,35079,29203,131235,7743,17389,10882,37420,61460,228512,85363,41581,131077,62822,119647,10130,54445,26925,19968,29016,24446,74028,24176,61448,67185,9254,8563,119129,9771,99184,37716,39514,10532,221512,258753,218630,55980,23394,32141,61924,66749,32411,3741,36475,26678,77010,44946,91203,128749,116953,20476,49625,53116,13735,102335,29376,51946,83407,67892,59212,34685,21083,1546,112982,32972,74397,1078,190545,16082,86140,58591,89611,101531,10061,105104,76319,20035,17551,52611,169061,190842,100780,23907,90413,115619,9675,34710,193435,49443,129734,11183,258877,16318,136182,126808,44635,27304,192375,2599,125648,47051,12091,23814,721,58800,40137,66726,97930,60877,74487,7942,54326,9841,41428,13762,8211,85383,6950,99177,79806,201786,296464,124087,13144,29741,41721,47634,55088,254286,106408,17041,99064,12942,64086,45233,14005,2612,55827,255,7984,13980,38574,12776,46654,73499,249951,2101,26676,25996,132326,116415,119062,50449,31033,23038,11589,179252,20007,14860,129270,21143,17796,144715,60106,70758,69842,34674,282133,44014,16774,57268,38528,24053,46373,201667,28327,471023,51889,102667,21193,114909,84132,69317,96723,67969,16134,68145,15058,28765,32035,2524,101089,98664,25045,76571,14957,86040,118506,262428,154764,81573,39681,283900,73287,127825,544,80448,52347,38512,175971,15180,45467,33086,46552,48894,81107,43213,36672,54025,76703,8053,7608,13299,56619,20752,238099,54164,105133,1444,32942,953,37564,8e3,66316,119463,106817,404,13667,149108,128597,31267,10269,49836,106150,1484,52330,76965,160486,171648,38456,31263,22424,37738,66245,67467,143369,60471,75610,20895,115528,86070,60854,40796,49347,18989,15030,11371,37578,15779,79867,10187,86462,46402,155626,93200,40229,7090,57547,108053,99598,11088,47505,41218,206017,2173,20988,30219,22919,80563,57566,42369,93141,41675,2407,182519,120495,27154,16702,29456,14349,7958,16688,117177,140375,42467,261919,74916,153569,10836,34742,49526,7621,105997,12212,2270,392377,7755,17959,25086,232152,138791,33847,13860,35316,5811,1344,71259,50452,207539,92635,50359,5821,33674,30255,2086,2587,96264,17543,42,6029,9580,43007,139248,82831,12917,29607,25786,51467,42137,85161,100698,31561,88989,121990,278500,3602,109344,37982,15279,116442,28936,30880,87894,58079,128661,126731,67392,28051,146885,4861,16216,97344,42827,147561,153948,22684,21335,47685,1853,43349,15185,59642,10229,25520,187921,108972,5579,98037,24945,6697,19193,63734,137934,75056,89740,19767,224268,56138,63643,151661,39313,70618,84031,89723,84074,13703,85626,35460,8867,64845,3439,57906,99776,63968,49270,81130,34356,16210,23547,36446,34090,140028,72439,2221,22163,57058,363492,113754,18913,95451,48663,54464,54037,176097,68425,3023,34906,29482,117389,341780,80431,58330,16753,92616,60907,94846,147486,4498,48646,7773,46801,7778,18946,464978,47558,33223,177444,7328,15626,63337,94700,11743,9351,255024,39098,16447,42647,96230,39769,58840,10068,63439,35800,65843,58823,413844,9156,51258,7434,61791,85018,6872,3692,28096,7121,33024,6009,75532,31997,192535,9661,3304,9547,14753,31987,25314,55689,15896,20430,39472,31340,99744,25398,115569,54883,28719,205423,23071,57855,64638,149867,25671,82403,37616,20668,39989,77996,74948,140555,175248,64810,36515,46595,4958,248773,24045,28728,136673,168704,20804,114833,100325,27135,21205,96151,153134,45992,7093,13992,76047,1980,19432,145001,75159,87462,17710,1013,45556,34297,144882,20648,26061,11319,129567,108555,18872,464580,33386,22717,65948,167189,5603,135042,79542,8801,202632,18114,91882,5973,5239,67315,4431,60916,47819,71693,32597,32606,18183,45072,80329,76385,24749,51305,40314,156514,14693,130345,13168,66214,18029,12858,34801,27628,14544,10823,40522,40185,33739,148694,23548,9923,61012,28859,17933,19442,34364,99849,164107,141167,30629,21054,6744,36491,8096,42474,41706,155060,30650,10600,163442,1143,96655,61390,52359,7559,51568,64256,203854,4467,22453,14504,436398,7878,6980,8293,63610,293747,16167,35763,19627,147603,15419,18032,110744,51346,33681,54571,40472,48615,39073,21604,13754,173027,92560,11083,47299,63062,11813,52007,29883,9734,139722,15953,1550,20651,13616,49306,16113,90089,92326,7584,30712,72424,164858,6831,152871,55746,197721,34167,196442,6022,112107,55215,7538,123381,4920,43539,77165,8939,50392,34192,20225,79762,22505,58667,40770,29788,97180,82835,4568,8579,13273,363569,35898,49983,436,36598,3237,131691,62418,35591,8101,4073,379438,65218,76072,33887,2968,27573,212619,288680,68278,72851,150504,217896,6913,121339,22017,35340,51072,43616,75043,31437,10833,81487,4364,22968,41454,106687,85446,19863,109625,149241,524,141850,214404,54376,657,237023,9401,108137,53800,32474,49712,53334,126876,27337,45552,177696,8269,15036,12097,42240,2328,125374,119295,99715,2500,19624,39441,27220,102691,60957,94543,39101,18566,67362,13975,78230,25017,34017,239007,90027,39351,41681,35354,43822,1043,916,58587,141983,94818,38799,75459,41114,67432,16195,36606,59568,22272,126769,31424,68659,12287,134302,257977,5756,207285,95637,47248,117689,19583,77451,22373,12200,54993,117118,34244,29386,34562,53819,71267,64172,77665,49368,7716,59301,25749,45426,194789,17297,2650,1766,32501,45198,20403,20984,6600,14171,94604,19037,5402,29896,9938,59935,109708,88081,145182,44844,39167,352626,164173,35374,45982,6122,154,73419,220487,53834,53601,17992,8609,229321,5610,68098,66815,71012,95069,140968,27396,8957,134489,24656,86659,56598,134852,17316,123838,255436,6613,41610,138033,81452,32023,32396,123687,63398,8693,29712,30407,19296,121188,3551,36099,20032,111948,56624,16547,27453,35916,15378,52039,56849,13489,22214,73177,53097,277349,2157,14029,187886,10260,141743,246460,91880,50869,3788,49486,133566,54950,33120,129337,53768,18333,9525,26902,312251,10297,9020,70759,16647,112432,59260,84609,9818,82766,73569,468,46001,75780,55028,52106,11498,43645,108069,17150,17753,29417,16705,31799,9606,289,122254,115975,8620,6133,255357,56908,14456,133464,43554,79224,11247,29630,160,12756,25464,65960,350428,62521,321796,100359,67358,35169,46172,113128,48988,88868,31094,33266,6847,60887,98188,49659,69117,92977,220228,13947,80181,35103,62170,97351,13475,2440,199768,19498,36597,46971,25234,67806,62881,84717,73648,181966,10488,94149,21550,26655,63436,48375,14405,165650,9621,24439,28043,42735,4490,29963,56674,45373,1934,262446,50855,67098,26898,5261,52696,40644,33900,9440,180286,87162,22940,19704,26936,69769,10254,101759,27406,12243,48e3,73926,113215,54935,5726,192787,4312,106216,9366,11550,52949,23457,212271,277152,133895,108374,6191,96477,29980,218916,58024,54696,40853,91124,65894,91170,65908,252552,6793,29212,15389,44516,122515,52617,35058,9017,103536,39510,49136,19242,130652,662077,74699,47024,31422,8517,73351,24399,13867,128360,4810,4434,61779,111983,61036,17798,110240,59722,102960,39688,10001,23803,23039,176498,56659,44814,134295,17188,77577,74466,226175,102472,154333,63900,111747,18062,41171,79669,32773,408933,42562,28931,30907,107388,43487,2946,240310,23938,24354,319,184983,7927,6488,1422,10790,68809,68209,64775,4361,202,17123,59634,51200,44391,18188,17843,2619,74278,3230,9540,47187,21702,36274,56894,43907,16310,34790,16866,6150,5561,13587,107545,108873,126867,86986,28640,33427,19017,5762,80637,17430,46903,2047,131055,25958,13558,5444,47152,13900,44563,122857,45348,70863,39593,54332,38068,33637,318,40310,143467,18502,24520,11377,62013,28942,27246,28269,83545,17999,59015,90707,30065,15161,34720,1263,37008,2012,6060,98575,92933,5721,299,199555,24578,29223,2985,743,115825,109523,136657,47454,26378,53586,3733,174945,93340,244456,5693,37386,28782,89767,27545,23573,18798,136425,34320,84778,20041,48453,38215,7477,71958,40621,8773,5874,187927,105965,51100,43533,18083,8443,10180,43597,2003,183999,69689,12216,129696,146188,62389,34044,68410,12765,43273,26949,266807,3345,34477,79197,5688,47539,213110,21634,22257,50092,32222,42346,39530,63668,98,134978,74022,5152,59088,174145,37220,9934,9545,118937,5724,87240,19875,15784,40143,23263,87513,181654,285152,37881,263241,4966,43934,10433,186657,6470,74416,225854,25908,142677,246262,32280,6192,75890,45546,143264,135305,29742,47013,77787,11732,126658,8763,37950,21806,57557,113464,89465,108995,164574,23894,22996,23169,15369,23117,17642,130607,40503,36239,280990,44666,9981,40427,147487,26869,168452,32886,32991,46798,240839,15111,70502,65697,88548,44145,28701,48767,31139,206777,35659,181164,166262,14554,171445,31786,66523,76607,17956,6507,31279,90476,116611,167918,6560,1243,115324,80128,41867,55897,187323,37069,32596,189444,145931,13390,105530,65709,26805,6999,55714,41300,22915,68951,22138,21120,22264,10058,19945,33635,56123,99085,10032,5818,6016,46649,57476,35264,94413,112522,262288,93686,83038,14341,23204,28807,66084,77987,6101,126673,7133,38126,5923,122091,170240,97772,46874,215746,43948,41622,3272,55596,8332,146411,251315,13533,8561,81521,115449,48616,175175,2063,186556,3036,134537,75772,29728,82360,22973,186559,86348,89100,38388,82297,45610,2613,87082,9986,177812,57884,23591,47485,42543,33582,44713,74439,257444,252451,31825,35631,38540,33066,5147,13973,4343,51830,70378,22827,26448,95560,36896,241741,48067,203953,298860,61620,20450,3220,67272,6586,107662,100160,108684,6929,57226,4762,7457,1320,40404,77204,99309,62750,208653,59977,44e3,74315,34332,5819,172217,64904,114077,18147,84012,1791,98456,90930,21446,116669,103938,7422,85140,59713,5768,326211,16239,75411,13229,29398,10758,236107,1539,112472,95979,152154,151294,306,21196,38146,10700,6891,84282,109646,56492,40539,6589,119491,51354,30685,140209,136906,29622,73617,49553,70525,51671,166869,139616,74395,37439,49595,45678,11959,33211,86560,52434,9282,62690,112155,130810,5243,108261,99970,265613,72551,80049,6391,33365,90721,66737,69872,87011,1860,9032,112544,60905,37371,89015,140351,19076,850,373531,2802,36725,218795,72062,28990,16550,24614,7815,6187,26336,33373,32162,42791,73555,32062,23386,10244,56392,49442,27076,136262,12412,14883,1134,33675,97153,199281,15608,100152,74072,47942,254301,36451,16026,10687,65067,56708,254030,30290,50490,13864,57941,259331,35588,23485,43486,24869,21620,92971,22072,88645,1048,182050,13343,32452,14825,19509,3325,216938,45740,99716,189082,53740,78245,25609,24311,176777,47340,308354,40669,66085,14102,125339,9225,128709,97207,1271,200933,78439,113451,88975,18324,46521,11819,18570,141756,72512,170020,52754,63550,118515,103073,93330,32736,50499,14722,31600,68452,398867,29316,172786,18417,104924,2606,5670,84818,16288,67106,59580,82929,607401,291,85829,359,15897,35830,50696,65630,52672,22115,356968,29895,40837,231192,34024,38957,26722,406,23335,124952,72068,68804,13268,147101,164740,276569,162596,66943,11569,26654,66358,4777,23229,102127,5848,978,2921,59666,5371,28212,90108,42938,39320,2499,4271,108792,33510,125072,71653,65239,38250,66357,38577,13964,86251,35708,50755,36010,29448,12209,3844,38222,206337,100876,67827,137088,14167,252225,84163,195270,1306,5703,54198,779,46802,22028,51124,86759,70560,113164,35685,162145,45471,34561,422,2611,6464,47486,19223,38246,9191,18331,89942,243642,212364,15893,17518,22617,6409,30046,126182,59716,36560,104428,18846,26592,19458,50793,147333,30826,1388,27647,10922,14495,33545,19269,135828,39727,41601,46931,233379,49169,131130,182112,16276,82381,118209,142445,128310,19672,28740,82907,33436,3118,102206,28723,24819,41937,38854,5157,3881,111491,1142,9776,421673,152241,29309,14961,87854,6054,15424,3796,82656,54996,2108,55367,239450,154525,9643,118103,106041,64601,68549,48707,30266,25772,18740,9462,229669,91798,112152,191327,14493,72828,8175,66636,236474,25817,87351,129027,76653,20422,22983,71240,27846,44661,12399,46158,77704,53101,35032,11072,17300,109294,33638,24408,1895,11241,760,17584,82479,125877,63150,141075,34259,23274,81698,15732,43577,48340,91584,14688,16379,24481,150280,96420,262050,48635,43727,61819,56268,72003,88178,17281,79912,13218,122519,125295,166396,11811,2171,118930,67746,17636,178278,174656,95661,173039,83845,79689,17473,98555,127696,203415,54730,22925,232239,9309,12136,175026,20740,180188,10747,39816,314017,266131,10040,175732,112550,220651,31974,37393,888,23008,86799,4303,64905,148467,75337,251,3284,370102,50264,9835,5438,23655,4481,29851,329,12855,7162,64931,78141,12804,42372,296771,83547,18624,34874,86271,3360,48665,77735,88767,11463,63527,28889,22258,29140,194315,113924,25499,6406,31334,1845,4802,49184,43455,35469,127594,92970,61038,115005,38840,87761,106838,8811,20572,55637,11162,96721,132425,108925,2948,125457,36356,3502,75270,27622,127192,2561,123095,49394,61155,16897,110064,9699,89448,53356,19628,220310,21622,83036,9885,112214,6087,26713,17901,161912,91492,3440,68594,9266,92238,8087,6866,150194,72175,80701,13459,31836,43243,239700,95846,44749,50647,21945,230538,120612,132371,244604,5193,105637,34661,41341,68775,85393,1874,8771,33718,49672,77403,595452,99507,6490,58895,128742,7704,39239,73217,43816,62824,37804,199976,22361,80005,87514,94832,14089,4574,139975,59142,75523,100268,43906,53442,15152,2547,186002,17011,19513,204282,3343,60568,128318,119250,4298,51871,41336,71759,21921,45074,98169,145889,99427,11350,1237,5520,28799,7803,53702,21026,136352,38293,128690,12158,90132,44600,10184,26957,39459,126025,78904,82999,59373,39301,150198,120529,153042,20177,50089,14764,271571,30530,123161,38975,101562,22941,5648,124654,109243,69817,71675,49162,106884,21241,107795,30258,16572,188262,141456,7688,60718,8271,11044,32440,104608,103419,236109,93156,43293,128929,42107,67180,25201,115254,185488,130954,72813,167547,20537,39969,38432,22582,184022,1139,27199,5655,17767,97412,122606,209377,27070,35871,326617,188954,42680,73512,80911,22629,3011,95021,315242,157737,383,41821,41808,19335,27950,15674,25677,110950,35375,76835,59108,57370,35262,16569,160415,37706,78086,32041,49691,137143,9782,172080,50148,77917,6323,10110,69172,17711,21795,59511,76184,135114,31046,132319,59105,157578,20549,80778,57649,158421,65143,4575,72235,21899,10797,92745,34035,106079,80159,4508,78304,25350,75457,46458,32937,25623,47,8531,104751,84953,8138,36508,187199,66310,115274,13253,32461,38536,1916,42007,187160,35055,26325,84394,35963,94216,45590,97782];class hh{constructor(e,t){B(this,"log"),B(this,"peerRouting"),B(this,"routingTable"),B(this,"refreshInterval"),B(this,"refreshQueryTimeout"),B(this,"commonPrefixLengthRefreshedAt"),B(this,"refreshTimeoutId");const{peerRouting:s,routingTable:i,refreshInterval:r,refreshQueryTimeout:n,logPrefix:o}=t;this.log=e.logger.forComponent(`${o}:routing-table:refresh`),this.peerRouting=s,this.routingTable=i,this.refreshInterval=r??3e5,this.refreshQueryTimeout=n??3e4,this.commonPrefixLengthRefreshedAt=[],this.refreshTable=this.refreshTable.bind(this)}async afterStart(){this.log(`refreshing routing table every ${this.refreshInterval}ms`),this.refreshTable(!0)}async stop(){null!=this.refreshTimeoutId&&clearTimeout(this.refreshTimeoutId)}refreshTable(e=!1,t){this.log("refreshing routing table");const s=this._maxCommonPrefix(),i=this._getTrackedCommonPrefixLengthsForRefresh(s);this.log(`max common prefix length ${s}`),this.log(`tracked CPLs [ ${i.map(e=>e.toISOString()).join(", ")} ]`),Promise.all(i.map(async(r,n)=>{try{if(await this._refreshCommonPrefixLength(n,r,e,t),0===this._numPeersForCpl(s)){const s=Math.min(2*(n+1),i.length-1);for(let i=n+1;i<s+1;i++)try{await this._refreshCommonPrefixLength(i,r,e,t)}catch(o){this.log.error(o)}}}catch(o){this.log.error(o)}})).catch(e=>{this.log.error(e)}).then(()=>{this.refreshTimeoutId=setTimeout(this.refreshTable,this.refreshInterval),null!=this.refreshTimeoutId.unref&&this.refreshTimeoutId.unref()}).catch(e=>{this.log.error(e)})}async _refreshCommonPrefixLength(e,t,s,i){if(!s&&t.getTime()>Date.now()-this.refreshInterval)return void this.log("not running refresh for cpl %s as time since last refresh not above interval",e);const r=this._generateRandomPeerId(e);this.log("starting refreshing cpl %s with key %p (routing table size was %s)",e,r,this.routingTable.size);const n=We([null==i?void 0:i.signal,AbortSignal.timeout(this.refreshQueryTimeout)]);try{const t=await Yc(this.peerRouting.getClosestPeers(r.toMultihash().bytes,{signal:n}));this.log(`found ${t} peers that were close to imaginary peer %p`,r),this.log("finished refreshing cpl %s with key %p (routing table size is now %s)",e,r,this.routingTable.size)}finally{n.clear()}}_getTrackedCommonPrefixLengthsForRefresh(e){e>15&&(e=15);const t=[];for(let s=0;s<=e;s++)t[s]=this.commonPrefixLengthRefreshedAt[s]??new Date;return t}_generateRandomPeerId(e){if(null==this.routingTable.kb)throw new Error("Routing table not started");if(null==this.routingTable.kb.localPeer)throw new Error("Local peer not set");const t=ee(2),s=(t[1]<<8)+t[0],i=this._makePeerId(this.routingTable.kb.localPeer.kadId,s,e),r=De(i);return rs(r)}_makePeerId(e,t,s){if(s>15)throw new Error("Cannot generate peer ID for common prefix length greater than 15");const i=new DataView(e.buffer,e.byteOffset,e.byteLength).getUint16(0,!1),r=65535<<16-(s+1),n=ch[(i^32768>>s)&r|t&~r],o=new ArrayBuffer(34),a=new DataView(o,0,o.byteLength);return a.setUint8(0,ke.code),a.setUint8(1,32),a.setUint32(2,n,!1),new Uint8Array(a.buffer,a.byteOffset,a.byteLength)}_maxCommonPrefix(){let e=0;for(const t of this._prefixLengths())t>e&&(e=t);return e}_numPeersForCpl(e){let t=0;for(const s of this._prefixLengths())s===e&&t++;return t}*_prefixLengths(){var e;if(null!=(null==(e=this.routingTable.kb)?void 0:e.localPeer))for(const{kadId:t}of this.routingTable.kb.toIterable()){const e=qc(this.routingTable.kb.localPeer.kadId,t);let s=0;for(const t of e){if(0!==t)break;s++}yield s}}}class dh{constructor(e,t){B(this,"peerId"),B(this,"providers"),B(this,"peerStore"),B(this,"log"),this.log=e.logger.forComponent(`${t.logPrefix}:rpc:handlers:add-provider`),this.peerId=e.peerId,this.providers=t.providers,this.peerStore=e.peerStore}async handle(e,t){if(null==t.key||0===t.key.length)throw new ns("Missing key");let s;try{s=ue.decode(t.key)}catch(i){throw new ns("Invalid CID")}null!=t.providers&&0!==t.providers.length||this.log.error("no providers found in message"),this.log("%p asked us, %p to store provider record for for %c",e,this.peerId,s),await Promise.all(t.providers.map(async t=>{const i=De(t.id),r=rs(i),n=t.multiaddrs.map(e=>Qe(e));e.equals(r)?t.multiaddrs.length<1?this.log("no valid addresses for provider %p. Ignore",e):(this.log.trace("received provider %p for %s (addrs %s)",e,s,n),await this.providers.addProvider(s,r),await this.peerStore.merge(r,{multiaddrs:n})):this.log("invalid provider peer %p from %p",t.id,e)}))}}class uh{constructor(e,t){B(this,"peerRouting"),B(this,"peerInfoMapper"),B(this,"peerId"),B(this,"addressManager"),B(this,"log");const{peerRouting:s,logPrefix:i}=t;this.log=e.logger.forComponent(`${i}:rpc:handlers:find-node`),this.peerId=e.peerId,this.addressManager=e.addressManager,this.peerRouting=s,this.peerInfoMapper=t.peerInfoMapper}async handle(e,t){this.log("incoming request from %p for peers close to %b",e,t.key);try{if(null==t.key)throw new ns("Invalid FIND_NODE message received - key was missing");const s=await this.peerRouting.getClosestPeersOffline(t.key,{exclude:[e,this.peerId]});ge(this.peerId.toMultihash().bytes,t.key)&&s.push({id:this.peerId,multiaddrs:this.addressManager.getAddresses().map(e=>e.decapsulateCode(ct("p2p").code))});const i={type:lc.FIND_NODE,clusterLevel:t.clusterLevel,closer:s.map(this.peerInfoMapper).filter(({multiaddrs:e})=>e.length).map(e=>({id:e.id.toMultihash().bytes,multiaddrs:e.multiaddrs.map(e=>e.bytes)})),providers:[]};return 0===i.closer.length?this.log("could not find any peers closer to %b for %p",t.key,e):this.log("found %d peers close to %b for %p",i.closer.length,t.key,e),i}catch(s){throw this.log("error during finding peers closer to %b for %p - %e",t.key,e,s),s}}}class gh{constructor(e,t){B(this,"peerId"),B(this,"peerRouting"),B(this,"providers"),B(this,"peerStore"),B(this,"peerInfoMapper"),B(this,"log");const{peerRouting:s,providers:i,logPrefix:r}=t;this.log=e.logger.forComponent(`${r}:rpc:handlers:get-providers`),this.peerId=e.peerId,this.peerStore=e.peerStore,this.peerRouting=s,this.providers=i,this.peerInfoMapper=t.peerInfoMapper}async handle(e,t){if(null==t.key)throw new ns("Invalid GET_PROVIDERS message received - key was missing");let s;try{s=ue.decode(t.key)}catch(o){throw new ns("Invalid CID")}this.log("%p asking for providers for %s",e,s);const[i,r]=await Promise.all([Is(vs(await this.providers.getProviders(s),async e=>{const t=await this.peerStore.get(e);return{id:t.id,multiaddrs:t.addresses.map(({multiaddr:e})=>e)}})),this.peerRouting.getClosestPeersOffline(t.key)]),n={type:lc.GET_PROVIDERS,key:t.key,clusterLevel:t.clusterLevel,closer:r.map(this.peerInfoMapper).filter(({id:e,multiaddrs:t})=>t.length>0).map(e=>({id:e.id.toMultihash().bytes,multiaddrs:e.multiaddrs.map(e=>e.bytes)})),providers:i.map(this.peerInfoMapper).filter(({id:e,multiaddrs:t})=>t.length>0).map(e=>({id:e.id.toMultihash().bytes,multiaddrs:e.multiaddrs.map(e=>e.bytes)}))};return this.log("got %s providers %s closerPeers",n.providers.length,n.closer.length),n}async _getAddresses(e){return[]}}class ph{constructor(e,t){B(this,"peerStore"),B(this,"datastore"),B(this,"peerRouting"),B(this,"log"),B(this,"datastorePrefix"),this.log=e.logger.forComponent(`${t.logPrefix}:rpc:handlers:get-value`),this.datastorePrefix=`${t.datastorePrefix}/record`,this.peerStore=e.peerStore,this.datastore=e.datastore,this.peerRouting=t.peerRouting}async handle(e,t){const s=t.key;if(this.log("%p asked for key %b",e,s),null==s||0===s.length)throw new ns("Invalid key");const i={type:lc.GET_VALUE,key:s,clusterLevel:t.clusterLevel,closer:[],providers:[]};if(function(e){return"/pk/"===St(e.subarray(0,4))}(s)){this.log("is public key");const e=function(e){const t=De(e.subarray(4));return rs(t)}(s);let t;try{const s=await this.peerStore.get(e);if(null==s.id.publicKey)throw new Et("No public key found in key book");t=cs(s.id.publicKey)}catch(o){if("NotFoundError"!==o.name)throw o}if(null!=t)return this.log("returning found public key"),i.record=new Ms(s,t,new Date).serialize(),i}const[r,n]=await Promise.all([this._checkLocalDatastore(s),this.peerRouting.getClosestPeersOffline(s)]);return null!=r&&(this.log("had record for %b in local datastore",s),i.record=r.serialize()),n.length>0&&(this.log("had %s closer peers in routing table",n.length),i.closer=n.map(e=>({id:e.id.toMultihash().bytes,multiaddrs:e.multiaddrs.map(e=>e.bytes)}))),i}async _checkLocalDatastore(e){this.log("checkLocalDatastore looking for %b",e);const t=Nc(this.datastorePrefix,e);let s;try{s=await this.datastore.get(t)}catch(r){if("NotFoundError"===r.name)return;throw r}const i=Ms.deserialize(s);if(!(null==i.timeReceived||Date.now()-i.timeReceived.getTime()>Xl))return i;await this.datastore.delete(t)}}class fh{constructor(e,t){B(this,"log"),this.log=e.logger.forComponent(`${t.logPrefix}:rpc:handlers:ping`)}async handle(e,t){return this.log("ping from %p",e),t}}class mh{constructor(e,t){B(this,"components"),B(this,"validators"),B(this,"log"),B(this,"datastorePrefix");const{validators:s}=t;this.components=e,this.log=e.logger.forComponent(`${t.logPrefix}:rpc:handlers:put-value`),this.datastorePrefix=`${t.datastorePrefix}/record`,this.validators=s}async handle(e,t){const s=t.key;if(this.log("%p asked us to store value for key %b",e,s),null==t.record){const t=`Empty record from: ${e.toString()}`;throw this.log.error(t),new ns(t)}try{const e=Ms.deserialize(t.record);await Rc(this.validators,e),e.timeReceived=new Date;const i=Nc(this.datastorePrefix,e.key);await this.components.datastore.put(i,e.serialize().subarray()),this.log("put record for %b into datastore under key %k",s,i)}catch(i){this.log("did not put record for key %b into datastore %o",s,i)}return t}}class wh{constructor(e,t){var s,i,r;B(this,"handlers"),B(this,"log"),B(this,"metrics"),B(this,"incomingMessageTimeout"),this.metrics={operations:null==(s=e.metrics)?void 0:s.registerCounterGroup(`${t.metricsPrefix}_inbound_rpc_requests_total`),errors:null==(i=e.metrics)?void 0:i.registerCounterGroup(`${t.metricsPrefix}_inbound_rpc_errors_total`),rpcTime:null==(r=e.metrics)?void 0:r.registerMetricGroup(`${t.metricsPrefix}_inbound_rpc_time_seconds`,{label:"operation"})},this.log=e.logger.forComponent(`${t.logPrefix}:rpc`),this.incomingMessageTimeout=t.incomingMessageTimeout??1e4,this.handlers={[lc.GET_VALUE.toString()]:new ph(e,t),[lc.PUT_VALUE.toString()]:new mh(e,t),[lc.FIND_NODE.toString()]:new uh(e,t),[lc.ADD_PROVIDER.toString()]:new dh(e,t),[lc.GET_PROVIDERS.toString()]:new gh(e,t),[lc.PING.toString()]:new fh(e,t)}}async handleMessage(e,t){var s,i;const r=this.handlers[t.type];if(null!=r)try{return null==(s=this.metrics.operations)||s.increment({[t.type]:!0}),await r.handle(e,t)}catch{null==(i=this.metrics.errors)||i.increment({[t.type]:!0})}else this.log.error(`no handler found for message type: ${t.type}`)}onIncomingStream(e){Promise.resolve().then(async()=>{var t,s,i,r;const{stream:n,connection:o}=e,a=()=>{n.abort(new qt)};let l=AbortSignal.timeout(this.incomingMessageTimeout);l.addEventListener("abort",a);const c=Rs(n).pb(wc);try{for(;;){const e=await c.read({signal:l}),n=null==(s=null==(t=this.metrics)?void 0:t.rpcTime)?void 0:s.timer(e.type.toString()),d=null==(r=null==(i=this.metrics)?void 0:i.rpcTime)?void 0:r.timer(e.type.toString());let u=!1;try{this.log("incoming %s from %p",e.type,o.remotePeer);const t=await this.handleMessage(o.remotePeer,e);null!=t&&await c.write(t,{signal:l})}catch(h){throw u=!0,null==d||d(),h}finally{u||null==n||n()}l.removeEventListener("abort",a),l=AbortSignal.timeout(this.incomingMessageTimeout),l.addEventListener("abort",a)}}catch(h){n.abort(h)}}).catch(t=>{this.log.error("error handling %s RPC message from %p - %e","unknown",e.connection.remotePeer,t)})}}class yh extends ze{constructor(e,t){super(),B(this,"log"),B(this,"components"),B(this,"protocol"),B(this,"running"),B(this,"registrarId");const{protocol:s,logPrefix:i}=t;this.components=e,this.log=e.logger.forComponent(`${i}:topology-listener`),this.running=!1,this.protocol=s}isStarted(){return this.running}async start(){this.running||(this.running=!0,this.registrarId=await this.components.registrar.register(this.protocol,{onConnect:e=>{this.log("observed peer %p with protocol %s",e,this.protocol),this.dispatchEvent(new CustomEvent("peer",{detail:e}))}}))}async stop(){this.running=!1,null!=this.registrarId&&(this.components.registrar.unregister(this.registrarId),this.registrarId=void 0)}}class vh{constructor(e){B(this,"dht"),this.dht=e}async provide(e,t={}){await j(this.dht.provide(e,t))}async cancelReprovide(e){await this.dht.cancelReprovide(e)}async*findProviders(e,t={}){for await(const s of this.dht.findProviders(e,t))"PROVIDER"===s.name&&(yield*s.providers)}async put(e,t,s){await j(this.dht.put(e,t,s))}async get(e,t){for await(const s of this.dht.get(e,t))if("VALUE"===s.name)return s.value;throw new Et("Could not find value for key")}}class bh{constructor(e){B(this,"dht"),this.dht=e}async findPeer(e,t={}){for await(const s of this.dht.findPeer(e,t))if("FINAL_PEER"===s.name)return s.peer;throw new Et("Peer not found")}async*getClosestPeers(e,t={}){for await(const s of this.dht.getClosestPeers(e,t))"FINAL_PEER"===s.name&&(yield s.peer)}}class kh extends ze{constructor(e,t={}){var s,i,r,n;super(),B(this,"k"),B(this,"a"),B(this,"d"),B(this,"protocol"),B(this,"routingTable"),B(this,"providers"),B(this,"network"),B(this,"peerRouting"),B(this,"components"),B(this,"log"),B(this,"running"),B(this,"clientMode"),B(this,"validators"),B(this,"selectors"),B(this,"queryManager"),B(this,"contentFetching"),B(this,"contentRouting"),B(this,"routingTableRefresh"),B(this,"rpc"),B(this,"topologyListener"),B(this,"querySelf"),B(this,"maxInboundStreams"),B(this,"maxOutboundStreams"),B(this,"dhtContentRouting"),B(this,"dhtPeerRouting"),B(this,"peerInfoMapper"),B(this,"reprovider"),B(this,"onPeerConnectTimeout"),B(this,I,"@libp2p/kad-dht"),B(this,S,["@libp2p/content-routing","@libp2p/peer-routing","@libp2p/peer-discovery","@libp2p/kad-dht"]),B(this,E,["@libp2p/identify","@libp2p/ping"]);const o=t.logPrefix??"libp2p:kad-dht",a=t.datastorePrefix??"/dht",l=t.metricsPrefix??"libp2p_kad_dht",c={queries:null==(s=e.metrics)?void 0:s.registerMetricGroup(`${l}_operations_total`,{label:"operation"}),errors:null==(i=e.metrics)?void 0:i.registerCounterGroup(`${l}_operation_errors_total`,{label:"operation"}),queryTime:null==(r=e.metrics)?void 0:r.registerMetricGroup(`${l}_operation_time_seconds`,{label:"operation"}),errorTime:null==(n=e.metrics)?void 0:n.registerMetricGroup(`${l}_operation_error_time_seconds`,{label:"operation"})};this.running=!1,this.components=e,this.log=e.logger.forComponent(o),this.k=t.kBucketSize??ih,this.a=t.alpha??10,this.d=t.disjointPaths??this.a,this.protocol=t.protocol??"/ipfs/kad/1.0.0",this.clientMode=t.clientMode??!0,this.maxInboundStreams=t.maxInboundStreams??32,this.maxOutboundStreams=t.maxOutboundStreams??64,this.peerInfoMapper=t.peerInfoMapper??Cc,this.onPeerConnectTimeout=t.onPeerConnectTimeout??1e4,this.providers=new jc(e,{...t.providers,logPrefix:o,datastorePrefix:a}),this.validators={...xc,...t.validators},this.selectors={...Pc,...t.selectors},this.network=new Fc(e,{protocol:this.protocol,logPrefix:o,metricsPrefix:l}),this.routingTable=new lh(e,{kBucketSize:this.k,pingOldContactTimeout:t.pingOldContactTimeout,pingOldContactConcurrency:t.pingOldContactConcurrency,pingOldContactMaxQueueSize:t.pingOldContactMaxQueueSize,pingNewContactTimeout:t.pingNewContactTimeout,pingNewContactConcurrency:t.pingNewContactConcurrency,pingNewContactMaxQueueSize:t.pingNewContactMaxQueueSize,protocol:this.protocol,logPrefix:o,metricsPrefix:l,prefixLength:t.prefixLength,splitThreshold:t.kBucketSplitThreshold,network:this.network});const h=vt();!0===t.allowQueryWithZeroPeers&&h.resolve(),this.queryManager=new Jc(e,{disjointPaths:this.d,alpha:this.a,logPrefix:o,metricsPrefix:l,initialQuerySelfHasRun:h,routingTable:this.routingTable,allowQueryWithZeroPeers:t.allowQueryWithZeroPeers}),this.peerRouting=new Gc(e,{routingTable:this.routingTable,network:this.network,validators:this.validators,queryManager:this.queryManager,logPrefix:o}),this.contentFetching=new $c(e,{validators:this.validators,selectors:this.selectors,peerRouting:this.peerRouting,queryManager:this.queryManager,network:this.network,logPrefix:o,datastorePrefix:a}),this.contentRouting=new Hc(e,{network:this.network,peerRouting:this.peerRouting,queryManager:this.queryManager,routingTable:this.routingTable,providers:this.providers,logPrefix:o}),this.routingTableRefresh=new hh(e,{peerRouting:this.peerRouting,routingTable:this.routingTable,logPrefix:o}),this.rpc=new wh(e,{routingTable:this.routingTable,providers:this.providers,peerRouting:this.peerRouting,validators:this.validators,logPrefix:o,metricsPrefix:l,datastorePrefix:a,peerInfoMapper:this.peerInfoMapper}),this.topologyListener=new yh(e,{protocol:this.protocol,logPrefix:o}),this.querySelf=new Zc(e,{peerRouting:this.peerRouting,interval:t.querySelfInterval,initialInterval:t.initialQuerySelfInterval,logPrefix:o,initialQuerySelfHasRun:h,operationMetrics:c}),this.reprovider=new Xc(e,{...t.reprovide,logPrefix:o,metricsPrefix:l,datastorePrefix:a,contentRouting:this.contentRouting,operationMetrics:c}),this.network.addEventListener("peer",e=>{const t=e.detail;this.onPeerConnect(t).catch(e=>{this.log.error("could not add %p to routing table",t.id,e)}),this.dispatchEvent(new CustomEvent("peer",{detail:t}))}),this.topologyListener.addEventListener("peer",e=>{const t=e.detail;Promise.resolve().then(async()=>{const e=await this.components.peerStore.get(t),s={id:t,multiaddrs:e.addresses.map(({multiaddr:e})=>e),protocols:e.protocols};await this.onPeerConnect(s)}).catch(e=>{this.log.error("could not add %p to routing table - %e - %e",t,e)})}),this.dhtPeerRouting=new bh(this),this.dhtContentRouting=new vh(this),null==t.clientMode&&e.events.addEventListener("self:peer:update",e=>{this.log("received update of self-peer info"),Promise.resolve().then(async()=>{const t=e.detail.peer.addresses.some(({multiaddr:e})=>function(e){const t=e.stringTuples();for(const s of t)if(290===s[0])return!1;if(54===t[0][0]||55===t[0][0]||56===t[0][0])return!0;if(4===t[0][0]||41===t[0][0]){const e=X(`${t[0][1]}`);return null==e||!e}return!1}(e)),s=this.getMode();t&&"client"===s?await this.setMode("server"):"server"!==s||t||await this.setMode("client")}).catch(e=>{this.log.error("error setting dht server mode",e)})}),this.get=Oc(this.get.bind(this),c,"GET_VALUE"),this.findProviders=Oc(this.findProviders.bind(this),c,"FIND_PROVIDERS"),this.findPeer=Oc(this.findPeer.bind(this),c,"FIND_PEER"),this.getClosestPeers=Oc(this.getClosestPeers.bind(this),c,"GET_CLOSEST_PEERS"),this.provide=Oc(this.provide.bind(this),c,"PROVIDE"),this.put=Oc(this.put.bind(this),c,"PUT_VALUE")}get[(I=Symbol.toStringTag,S=ot,E=lt,z)](){return this.dhtContentRouting}get[G](){return this.dhtPeerRouting}get[oe](){return this}async onPeerConnect(e){if(this.log.trace("peer %p connected",e.id),0===(e=this.peerInfoMapper(e)).multiaddrs.length)return void this.log.trace("ignoring %p as there were no valid addresses in %s after filtering",e.id,e.multiaddrs.map(e=>e.toString()));const t=AbortSignal.timeout(this.onPeerConnectTimeout);try{await this.routingTable.add(e.id,{signal:t})}catch(s){this.log.error("could not add %p to routing table",e.id,s)}}isStarted(){return this.running}getMode(){return this.clientMode?"client":"server"}async setMode(e,t){e!==this.getMode()||!0===(null==t?void 0:t.force)?(await this.components.registrar.unhandle(this.protocol,t),e!==this.getMode()||!0===(null==t?void 0:t.force)?"client"===e?(this.log("enabling client mode while in %s mode",this.getMode()),this.clientMode=!0):(this.log("enabling server mode while in %s mode",this.getMode()),this.clientMode=!1,await this.components.registrar.handle(this.protocol,this.rpc.onIncomingStream.bind(this.rpc),{signal:null==t?void 0:t.signal,maxInboundStreams:this.maxInboundStreams,maxOutboundStreams:this.maxOutboundStreams})):this.log("already in %s mode",e)):this.log("already in %s mode",e)}async start(){this.running||(this.running=!0,await this.setMode(this.clientMode?"client":"server",{force:!0}),await Ve(this.routingTable,this.queryManager,this.network,this.topologyListener,this.routingTableRefresh,this.reprovider),await Ve(this.querySelf))}async stop(){this.running=!1,await He(this.querySelf,this.queryManager,this.network,this.routingTable,this.routingTableRefresh,this.topologyListener,this.reprovider)}async*put(e,t,s={}){yield*this.contentFetching.put(e,t,s)}async*get(e,t={}){yield*this.contentFetching.get(e,t)}async*provide(e,t={}){yield*this.contentRouting.provide(e,this.components.addressManager.getAddresses(),t)}async cancelReprovide(e,t){await this.providers.removeProvider(e,this.components.peerId,t)}async*findProviders(e,t={}){yield*this.contentRouting.findProviders(e,t)}async*findPeer(e,t={}){yield*this.peerRouting.findPeer(e,t)}async*getClosestPeers(e,t={}){yield*this.peerRouting.getClosestPeers(e,t)}async refreshRoutingTable(e){this.routingTableRefresh.refreshTable(!0,e)}}var Eh,Sh,Ih,Ph;function Rh(e={}){return t=>new kh(t,e)}(Sh=Eh||(Eh={}))[Sh.SEND_QUERY=0]="SEND_QUERY",Sh[Sh.PEER_RESPONSE=1]="PEER_RESPONSE",Sh[Sh.FINAL_PEER=2]="FINAL_PEER",Sh[Sh.QUERY_ERROR=3]="QUERY_ERROR",Sh[Sh.PROVIDER=4]="PROVIDER",Sh[Sh.VALUE=5]="VALUE",Sh[Sh.ADD_PEER=6]="ADD_PEER",Sh[Sh.DIAL_PEER=7]="DIAL_PEER",Sh[Sh.PATH_ENDED=8]="PATH_ENDED",(Ph=Ih||(Ih={}))[Ph.NEW_STREAM=0]="NEW_STREAM",Ph[Ph.MESSAGE_RECEIVER=1]="MESSAGE_RECEIVER",Ph[Ph.MESSAGE_INITIATOR=2]="MESSAGE_INITIATOR",Ph[Ph.CLOSE_RECEIVER=3]="CLOSE_RECEIVER",Ph[Ph.CLOSE_INITIATOR=4]="CLOSE_INITIATOR",Ph[Ph.RESET_RECEIVER=5]="RESET_RECEIVER",Ph[Ph.RESET_INITIATOR=6]="RESET_INITIATOR";const xh=Object.freeze({0:"NEW_STREAM",1:"MESSAGE_RECEIVER",2:"MESSAGE_INITIATOR",3:"CLOSE_RECEIVER",4:"CLOSE_INITIATOR",5:"RESET_RECEIVER",6:"RESET_INITIATOR"}),Ah=Object.freeze({NEW_STREAM:Ih.NEW_STREAM,MESSAGE:Ih.MESSAGE_INITIATOR,CLOSE:Ih.CLOSE_INITIATOR,RESET:Ih.RESET_INITIATOR}),Ch=Object.freeze({MESSAGE:Ih.MESSAGE_RECEIVER,CLOSE:Ih.CLOSE_RECEIVER,RESET:Ih.RESET_RECEIVER}),Th=1<<20;class Bh{constructor(e=Th,t=4194304){B(this,"_buffer"),B(this,"_headerInfo"),B(this,"_maxMessageSize"),B(this,"_maxUnprocessedMessageQueueSize"),this._buffer=new Be,this._headerInfo=null,this._maxMessageSize=e,this._maxUnprocessedMessageQueueSize=t}write(e){if(null==e||0===e.length)return[];if(this._buffer.append(e),this._buffer.byteLength>this._maxUnprocessedMessageQueueSize)throw new ns("Unprocessed message queue size too large!");const t=[];for(;0!==this._buffer.length;){if(null==this._headerInfo)try{this._headerInfo=this._decodeHeader(this._buffer)}catch(s){if("InvalidMessageError"===s.name)throw s;break}const{id:e,type:i,length:r,offset:n}=this._headerInfo;if(this._buffer.length-n<r)break;const o={id:e,type:i};i!==Ih.NEW_STREAM&&i!==Ih.MESSAGE_INITIATOR&&i!==Ih.MESSAGE_RECEIVER||(o.data=this._buffer.sublist(n,n+r)),t.push(o),this._buffer.consume(n+r),this._headerInfo=null}return t}_decodeHeader(e){const{value:t,offset:s}=Dh(e),{value:i,offset:r}=Dh(e,s),n=7&t;if(null==xh[n])throw new Error(`Invalid type received: ${n}`);if(i>this._maxMessageSize)throw new ns("Message size too large");return{id:t>>3,type:n,offset:s+r,length:i}}}const Nh=128,_h=127;function Dh(e,t=0){let s,i=0,r=0,n=t;const o=e.length;do{if(n>=o||r>49)throw t=0,new RangeError("Could not decode varint");s=e.get(n++),i+=r<28?(s&_h)<<r:(s&_h)*Math.pow(2,r),r+=7}while(s>=Nh);return{value:i,offset:t=n-t}}const Mh=10240;const Lh=new class{constructor(){B(this,"_pool"),B(this,"_poolOffset"),this._pool=Oe(Mh),this._poolOffset=0}write(e,t){const s=this._pool;let i=this._poolOffset;Ce(e.id<<3|e.type,s,i),i+=Ae(e.id<<3|e.type),e.type!==Ih.NEW_STREAM&&e.type!==Ih.MESSAGE_INITIATOR&&e.type!==Ih.MESSAGE_RECEIVER||null==e.data?(Ce(0,s,i),i+=Ae(0)):(Ce(e.data.length,s,i),i+=Ae(e.data.length));const r=s.subarray(this._poolOffset,i);Mh-i<100?(this._pool=Oe(Mh),this._poolOffset=0):this._poolOffset=i,t.append(r),e.type!==Ih.NEW_STREAM&&e.type!==Ih.MESSAGE_INITIATOR&&e.type!==Ih.MESSAGE_RECEIVER||null==e.data||t.append(e.data)}};class Oh extends Error{constructor(e="Stream input buffer error"){super(e),this.name="StreamInputBufferError"}}class Uh extends Nl{constructor(e){super(e),B(this,"name"),B(this,"streamId"),B(this,"send"),B(this,"types"),B(this,"maxDataSize"),this.types="outbound"===e.direction?Ah:Ch,this.send=e.send,this.name=e.name,this.streamId=e.streamId,this.maxDataSize=e.maxDataSize}async sendNewStream(){await this.send({id:this.streamId,type:Ah.NEW_STREAM,data:new Be(me(this.name))})}async sendData(e){for(e=e.sublist();e.byteLength>0;){const t=Math.min(e.byteLength,this.maxDataSize);await this.send({id:this.streamId,type:this.types.MESSAGE,data:e.sublist(0,t)}),e.consume(t)}}async sendReset(){await this.send({id:this.streamId,type:this.types.RESET})}async sendCloseWrite(){await this.send({id:this.streamId,type:this.types.CLOSE})}async sendCloseRead(){}}function $h(e){const t={...e,type:`${xh[e.type]} (${e.type})`};return e.type===Ih.NEW_STREAM&&(t.data=St(e.data instanceof Uint8Array?e.data:e.data.subarray())),e.type!==Ih.MESSAGE_INITIATOR&&e.type!==Ih.MESSAGE_RECEIVER||(t.data=St(e.data instanceof Uint8Array?e.data:e.data.subarray(),"base16")),t}class Vh{constructor(e,t){B(this,"protocol","/mplex/6.7.0"),B(this,"sink"),B(this,"source"),B(this,"log"),B(this,"_streamId"),B(this,"_streams"),B(this,"_init"),B(this,"_source"),B(this,"closeController"),B(this,"rateLimiter"),B(this,"closeTimeout"),B(this,"logger"),t=t??{},this.log=e.logger.forComponent("libp2p:mplex"),this.logger=e.logger,this._streamId=0,this._streams={initiators:new Map,receivers:new Map},this._init=t,this.closeTimeout=t.closeTimeout??500,this.sink=this._createSink(),this._source=bt({objectMode:!0,onEnd:()=>{for(const e of this._streams.initiators.values())e.destroy();for(const e of this._streams.receivers.values())e.destroy()}}),this.source=As(this._source,e=>async function*(e){for await(const t of e){const e=new Be;Lh.write(t,e),yield e}}(e)),this.closeController=new AbortController,this.rateLimiter=new ae({points:t.disconnectThreshold??5,duration:1})}get streams(){const e=[];for(const t of this._streams.initiators.values())e.push(t);for(const t of this._streams.receivers.values())e.push(t);return e}newStream(e){if(this.closeController.signal.aborted)throw new ss("Muxer already closed");const t=this._streamId++;e=null==e?t.toString():e.toString();const s=this._streams.initiators;return this._newStream({id:t,name:e,type:"initiator",registry:s})}async close(e){if(this.closeController.signal.aborted)return;const t=(null==e?void 0:e.signal)??AbortSignal.timeout(this.closeTimeout);try{await Promise.all(this.streams.map(async e=>e.close({signal:t}))),this._source.end(),await this._source.onEmpty({signal:t}),this.closeController.abort()}catch(s){this.abort(s)}}abort(e){this.closeController.signal.aborted||(this.streams.forEach(t=>{t.abort(e)}),this.closeController.abort(e))}_newReceiverStream(e){const{id:t,name:s}=e,i=this._streams.receivers;return this._newStream({id:t,name:s,type:"receiver",registry:i})}_newStream(e){const{id:t,name:s,type:i,registry:r}=e;if(this.log("new %s stream %s",i,t),"initiator"===i&&this._streams.initiators.size===(this._init.maxOutboundStreams??1024))throw new is("Too many outbound streams open");if(r.has(t))throw new Error(`${i} stream ${t} already exists!`);const n=function(e){const{id:t,name:s,send:i,onEnd:r,type:n="initiator",maxMsgSize:o=Th}=e;return new Uh({id:"initiator"===n?`i${t}`:`r${t}`,streamId:t,name:`${s??t}`,direction:"initiator"===n?"outbound":"inbound",maxDataSize:o,onEnd:r,send:i,log:e.logger.forComponent(`libp2p:mplex:stream:${n}:${t}`)})}({id:t,name:s,send:async e=>{this.log.enabled&&this.log.trace("%s stream %s send",i,t,$h(e)),this._source.push(e)},type:i,onEnd:()=>{this.log("%s stream with id %s and protocol %s ended",i,t,n.protocol),r.delete(t),null!=this._init.onStreamEnd&&this._init.onStreamEnd(n)},maxMsgSize:this._init.maxMsgSize,logger:this.logger});return r.set(t,n),n}_createSink(){return async e=>{const t=()=>{Tl(e,this.log)};this.closeController.signal.addEventListener("abort",t);try{const t=new Bh(this._init.maxMsgSize,this._init.maxUnprocessedMessageQueueSize);for await(const s of e)for(const e of t.write(s))await this._handleIncoming(e);this._source.end()}catch(s){this.log("error in sink",s),this._source.end(s)}finally{this.closeController.signal.removeEventListener("abort",t)}}}async _handleIncoming(e){const{id:t,type:s}=e;if(this.log.enabled&&this.log.trace("incoming message",$h(e)),e.type===Ih.NEW_STREAM){if(this._streams.receivers.size===(this._init.maxInboundStreams??1024)){this.log("too many inbound streams open"),this._source.push({id:t,type:Ih.RESET_RECEIVER});try{await this.rateLimiter.consume("new-stream",1)}catch{return this.log("rate limit hit when opening too many new streams over the inbound stream limit - closing remote connection"),void this.abort(new Error("Too many open streams"))}return}const s=this._newReceiverStream({id:t,name:St(e.data instanceof Uint8Array?e.data:e.data.subarray())});return void(null!=this._init.onIncomingStream&&this._init.onIncomingStream(s))}const i=(1&~s?this._streams.receivers:this._streams.initiators).get(t);if(null==i){this.log("missing stream %s for message type %s",t,xh[s]);try{await this.rateLimiter.consume("missing-stream",1)}catch{return this.log("rate limit hit when receiving messages for streams that do not exist - closing remote connection"),void this.abort(new Error("Too many messages for missing streams"))}return}const r=this._init.maxStreamBufferSize??4194304;try{switch(s){case Ih.MESSAGE_INITIATOR:case Ih.MESSAGE_RECEIVER:if(i.sourceReadableLength()>r)throw this._source.push({id:e.id,type:s===Ih.MESSAGE_INITIATOR?Ih.RESET_RECEIVER:Ih.RESET_INITIATOR}),new Oh("Input buffer full - increase Mplex maxBufferSize to accommodate slow consumers");i.sourcePush(e.data);break;case Ih.CLOSE_INITIATOR:case Ih.CLOSE_RECEIVER:i.remoteCloseWrite();break;case Ih.RESET_INITIATOR:case Ih.RESET_RECEIVER:i.reset();break;default:this.log("unknown message type %s",s)}}catch(n){this.log.error("error while processing message",n),i.abort(n)}}}R=Symbol.toStringTag,P=ot;class Hh{constructor(e,t={}){B(this,"protocol","/mplex/6.7.0"),B(this,"_init"),B(this,"components"),B(this,R,"@libp2p/mplex"),B(this,P,["@libp2p/stream-multiplexing"]),this.components=e,this._init=t}createStreamMuxer(e={}){return new Vh(this.components,{...e,...this._init})}}function Fh(e={}){return t=>new Hh(t,e)}A=Symbol.toStringTag,x=ot;class qh{constructor(e,t={}){B(this,"protocol"),B(this,"components"),B(this,"started"),B(this,"timeout"),B(this,"maxInboundStreams"),B(this,"maxOutboundStreams"),B(this,"runOnLimitedConnection"),B(this,"log"),B(this,A,"@libp2p/ping"),B(this,x,["@libp2p/ping"]),this.components=e,this.log=e.logger.forComponent("libp2p:ping"),this.started=!1,this.protocol=`/${t.protocolPrefix??"ipfs"}/ping/1.0.0`,this.timeout=t.timeout??1e4,this.maxInboundStreams=t.maxInboundStreams??2,this.maxOutboundStreams=t.maxOutboundStreams??1,this.runOnLimitedConnection=t.runOnLimitedConnection??!0,this.handleMessage=this.handleMessage.bind(this)}async start(){await this.components.registrar.handle(this.protocol,this.handleMessage,{maxInboundStreams:this.maxInboundStreams,maxOutboundStreams:this.maxOutboundStreams,runOnLimitedConnection:this.runOnLimitedConnection}),this.started=!0}async stop(){await this.components.registrar.unhandle(this.protocol),this.started=!1}isStarted(){return this.started}handleMessage(e){this.log("incoming ping from %p",e.connection.remotePeer);const{stream:t}=e,s=Date.now(),i=pt(t);let r=!1;Promise.resolve().then(async()=>{for(;;){const e=AbortSignal.timeout(this.timeout);e.addEventListener("abort",()=>{null==t||t.abort(new qt("ping timeout"))});const s=await i.read({bytes:32,signal:e});await i.write(s,{signal:e}),r=!0}}).catch(s=>{r&&"UnexpectedEOFError"===s.name&&"ready"!==t.readStatus||(this.log.error("incoming ping from %p failed with error - %e",e.connection.remotePeer,s),null==t||t.abort(s))}).finally(()=>{const i=Date.now()-s;this.log("incoming ping from %p complete in %dms",e.connection.remotePeer,i);const r=AbortSignal.timeout(this.timeout);t.close({signal:r}).catch(s=>{this.log.error("error closing ping stream from %p - %e",e.connection.remotePeer,s),null==t||t.abort(s)})})}async ping(e,t={}){this.log("pinging %p",e);const s=Date.now(),i=ee(32),r=await this.components.connectionManager.openConnection(e,t);let n;if(null==t.signal){const e=AbortSignal.timeout(this.timeout);t={...t,signal:e}}try{n=await r.newStream(this.protocol,{...t,runOnLimitedConnection:this.runOnLimitedConnection});const e=pt(n),[,o]=await Promise.all([e.write(i,t),e.read({...t,bytes:32})]),a=Date.now()-s;if(!ge(i,o.subarray()))throw new hs(`Received wrong ping ack after ${a}ms`);return this.log("ping %p complete in %dms",r.remotePeer,a),a}catch(o){throw this.log.error("error while pinging %p",r.remotePeer,o),null==n||n.abort(o),o}finally{null!=n&&await n.close(t)}}}function Wh(e={}){return t=>new qh(t,e)}const zh={list:["/dnsaddr/bootstrap.libp2p.io/p2p/QmNnooDu7bfjPFoTZYxMNLWUQJyrVwtbZg5gBMjTezGAJN","/dnsaddr/bootstrap.libp2p.io/p2p/QmbLHAnMoJPWSCR5Zhtx6BHJX9KiKNN6tpvbUcqanj75Nb","/dnsaddr/bootstrap.libp2p.io/p2p/QmcZf59bWwK5XFi76CZX8cbJ4BhTzzA3gU1ZjYZcYW3dwt","/dnsaddr/va1.bootstrap.libp2p.io/p2p/12D3KooWKnDdG3iXw9eTFijk3EWSunZcFi54Zka4wmtqtt6rPxc8","/ip4/104.131.131.82/tcp/4001/p2p/QmaCpDMGvV2BGHeYERUEnRQAwe3N8SzbUtfsmvsqQLuvuJ"]};function Gh(e={}){const t=`helia/5.5.0 ${le()}`;return{privateKey:e.privateKey,dns:e.dns,nodeInfo:{userAgent:t},addresses:{listen:["/p2p-circuit","/webrtc"]},transports:[xs(),Hs(),Fs(),qs()],connectionEncrypters:[Cs()],streamMuxers:[$l(),Fh()],peerDiscovery:[Os(zh)],services:{autoNAT:Fl(),dcutr:Yl(),delegatedRouting:()=>function(e,t={}){return new Vr(new URL(e),t)}("https://delegated-ipfs.dev",{filterProtocols:["unknown","transport-bitswap","transport-ipfs-gateway-http"],filterAddrs:["https","webtransport","webrtc","webrtc-direct","wss","tls"]}),dht:Rh({clientMode:!0,validators:{ipns:_s},selectors:{ipns:Ls}}),identify:$s(),identifyPush:Us(),keychain:ll(e.keychain),ping:Wh()}}}async function jh(e){const t=e.libp2p??{};null==t.privateKey&&null!=e.datastore&&(t.privateKey=await async function(e,t={}){const s=t.selfKey??"self",i=ll(t)({datastore:e,logger:O()});let r;return await e.has(new H(`/pkcs8/${s}`))?r=await i.exportKey(s):(r=await Xt(t.keyType??"Ed25519"),await i.importKey(s,r)),r}(e.datastore,e.keychain));const s=Gh(t);s.datastore=s.datastore??e.datastore;return await ce({...s,...t,start:!1})}async function Kh(e={}){const t=e.datastore??new he,s=e.blockstore??new pn;let i;return i=de(e.libp2p)?e.libp2p:await jh({...e,libp2p:{dns:e.dns,...e.libp2p,start:void 0},datastore:t}),{...e,libp2p:i,datastore:t,blockstore:s,blockBrokers:e.blockBrokers??[Ar(),hr()],routers:e.routers??[gn(i),dn()],metrics:i.metrics}}async function Qh(e={}){const t=await Kh(e),s=new Ti(t);return!1!==t.start&&await s.start(),s}export{si as DEFAULT_SESSION_MAX_PROVIDERS,ti as DEFAULT_SESSION_MIN_PROVIDERS,ii as InsufficientProvidersError,ri as NoRoutersAvailableError,oi as UnknownCodecError,ni as UnknownHashAlgorithmError,Qh as createHelia,Kh as heliaDefaults,Gh as libp2pDefaults};
