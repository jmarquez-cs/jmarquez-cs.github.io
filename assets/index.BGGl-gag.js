import{p as n,m as e}from"./scalable-cuckoo-filter.BKNYiDuL.js";function l(n,...e){if(null==n)throw new Error("Empty pipeline");if(s(n)){const e=n;n=()=>e.source}else if(r(n)||o(n)){const e=n;n=()=>e}const l=[n,...e];if(l.length>1&&s(l[l.length-1])&&(l[l.length-1]=l[l.length-1].sink),l.length>2)for(let t=1;t<l.length-1;t++)s(l[t])&&(l[t]=u(l[t]));return t(...l)}const t=(...n)=>{let e;for(;n.length>0;)e=n.shift()(e);return e},o=n=>null!=(null==n?void 0:n[Symbol.asyncIterator]),r=n=>null!=(null==n?void 0:n[Symbol.iterator]),s=n=>null!=n&&(null!=n.sink&&null!=n.source),u=l=>t=>{const s=l.sink(t);if(null!=(null==s?void 0:s.then)){const t=n({objectMode:!0});let u;s.then(()=>{t.end()},n=>{t.end(n)});const i=l.source;if(o(i))u=async function*(){yield*i,t.end()};else{if(!r(i))throw new Error("Unknown duplex source type - must be Iterable or AsyncIterable");u=function*(){yield*i,t.end()}}return e(t,u())}return l.source};export{l as p};
